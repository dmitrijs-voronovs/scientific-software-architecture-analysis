id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/1387:224,deployability,modul,modules,224,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
https://github.com/root-project/root/pull/1387:85,modifiability,modul,module,85,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
https://github.com/root-project/root/pull/1387:224,modifiability,modul,modules,224,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
https://github.com/root-project/root/pull/1387:85,safety,modul,module,85,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
https://github.com/root-project/root/pull/1387:224,safety,modul,modules,224,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
https://github.com/root-project/root/pull/1387:37,testability,assert,assert,37,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
https://github.com/root-project/root/pull/1387:45,testability,Assert,Assert,45,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
https://github.com/root-project/root/pull/1387:212,testability,assert,assert,212,[cxxmodules] Also include explicitly assert; Assert isn't included from the STL/libc module as it's a textual. header which needs to be textually parsed. Let's add it to the. TCling `declare` call to cheaply get assert with modules into. the lookup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1387
https://github.com/root-project/root/pull/1388:21,deployability,modul,module,21,[cxxmodules] Preload module ROOT_Types;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1388
https://github.com/root-project/root/pull/1388:21,modifiability,modul,module,21,[cxxmodules] Preload module ROOT_Types;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1388
https://github.com/root-project/root/pull/1388:21,safety,modul,module,21,[cxxmodules] Preload module ROOT_Types;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1388
https://github.com/root-project/root/pull/1389:4,reliability,diagno,diagnostics,4,"Add diagnostics to debug broken initialization of TCling; **Please do not merge this branch, it is for testing only!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1389
https://github.com/root-project/root/pull/1389:103,safety,test,testing,103,"Add diagnostics to debug broken initialization of TCling; **Please do not merge this branch, it is for testing only!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1389
https://github.com/root-project/root/pull/1389:4,testability,diagno,diagnostics,4,"Add diagnostics to debug broken initialization of TCling; **Please do not merge this branch, it is for testing only!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1389
https://github.com/root-project/root/pull/1389:103,testability,test,testing,103,"Add diagnostics to debug broken initialization of TCling; **Please do not merge this branch, it is for testing only!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1389
https://github.com/root-project/root/pull/1391:106,deployability,modul,modules,106,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:257,deployability,modul,module,257,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:22,energy efficiency,Load,LoadCoreModules,22,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:61,energy efficiency,Load,LoadCoreModules,61,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:101,energy efficiency,core,core,101,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:299,energy efficiency,Load,LoadModule,299,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:13,modifiability,Refact,Refactor,13,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:106,modifiability,modul,modules,106,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:257,modifiability,modul,module,257,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:334,modifiability,refact,refactors,334,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:13,performance,Refactor,Refactor,13,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:22,performance,Load,LoadCoreModules,22,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:61,performance,Load,LoadCoreModules,61,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:299,performance,Load,LoadModule,299,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:334,performance,refactor,refactors,334,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:106,safety,modul,modules,106,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1391:257,safety,modul,module,257,[cxxmodules] Refactor LoadCoreModules and fix nullptr deref; LoadCoreModules crashes when one of the core modules wasn't. found as we call `findModule` and then dereference that result. unconditionally. It also calls `findModule` and then passes. the found module name again to `findModule` in the `LoadModule`. function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1391
https://github.com/root-project/root/pull/1392:14,deployability,modul,module,14,Refactor load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1392
https://github.com/root-project/root/pull/1392:9,energy efficiency,load,load,9,Refactor load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1392
https://github.com/root-project/root/pull/1392:0,modifiability,Refact,Refactor,0,Refactor load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1392
https://github.com/root-project/root/pull/1392:14,modifiability,modul,module,14,Refactor load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1392
https://github.com/root-project/root/pull/1392:0,performance,Refactor,Refactor,0,Refactor load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1392
https://github.com/root-project/root/pull/1392:9,performance,load,load,9,Refactor load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1392
https://github.com/root-project/root/pull/1392:14,safety,modul,module,14,Refactor load module;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1392
https://github.com/root-project/root/pull/1393:10,deployability,updat,updates,10,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1393:47,deployability,releas,release,47,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1393:116,deployability,patch,patches,116,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1393:10,safety,updat,updates,10,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1393:61,safety,test,testing,61,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1393:116,safety,patch,patches,116,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1393:10,security,updat,updates,10,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1393:116,security,patch,patches,116,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1393:61,testability,test,testing,61,"Fixes and updates in preparation for ROOT 6.12 release; Just testing for now, please do not merge as there are LLVM patches in the mix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1393
https://github.com/root-project/root/pull/1394:101,deployability,modul,module,101,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:22,energy efficiency,Load,LoadCoreModules,22,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:51,energy efficiency,Load,LoadCoreModules,51,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:13,modifiability,Refact,Refactor,13,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:40,modifiability,Refact,Refactored,40,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:101,modifiability,modul,module,101,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:13,performance,Refactor,Refactor,13,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:22,performance,Load,LoadCoreModules,22,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:40,performance,Refactor,Refactored,40,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:51,performance,Load,LoadCoreModules,51,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:101,safety,modul,module,101,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1394:179,security,access,accessed,179,[cxxmodules] Refactor LoadCoreModules.; Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1394
https://github.com/root-project/root/pull/1395:443,availability,error,error,443,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:44,deployability,modul,modules,44,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:251,deployability,modul,modules,251,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:276,deployability,modul,modulemap,276,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:326,deployability,modul,modules,326,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:469,deployability,modul,module,469,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:492,deployability,depend,depends,492,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:503,deployability,modul,modules,503,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:553,deployability,modul,module,553,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:32,energy efficiency,load,load,32,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:361,energy efficiency,load,loaded,361,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:492,integrability,depend,depends,492,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:44,modifiability,modul,modules,44,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:251,modifiability,modul,modules,251,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:276,modifiability,modul,modulemap,276,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:326,modifiability,modul,modules,326,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:469,modifiability,modul,module,469,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:492,modifiability,depend,depends,492,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:503,modifiability,modul,modules,503,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:553,modifiability,modul,module,553,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:32,performance,load,load,32,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:361,performance,load,loaded,361,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:443,performance,error,error,443,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:44,safety,modul,modules,44,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:251,safety,modul,modules,251,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:276,safety,modul,modulemap,276,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:307,safety,prevent,preventing,307,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:326,safety,modul,modules,326,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:443,safety,error,error,443,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:469,safety,modul,module,469,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:492,safety,depend,depends,492,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:503,safety,modul,modules,503,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:553,safety,modul,module,553,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:307,security,preven,preventing,307,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:529,security,access,accessible,529,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:492,testability,depend,depends,492,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1395:443,usability,error,error,443,[cxxmodules] Allow rootcling to load system modules using the overlays.; Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to. get the TCling's instance of the cling interpreter. This in turn might. need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing. system modules such as libc and stl to be loaded. This criples rootcling. and whenever it #includes a header file we get an error that we included. a module from ROOT which depends on modules stl but it is not accessible. through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1395
https://github.com/root-project/root/pull/1396:786,availability,avail,available,786,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:327,deployability,fail,failing,327,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:384,deployability,modul,modules,384,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:635,deployability,modul,modules,635,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:832,deployability,depend,depends,832,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:128,energy efficiency,load,loading,128,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:518,energy efficiency,load,loading,518,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:209,integrability,inject,injected,209,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:832,integrability,depend,depends,832,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:384,modifiability,modul,modules,384,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:635,modifiability,modul,modules,635,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:734,modifiability,pac,packages,734,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:832,modifiability,depend,depends,832,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:128,performance,load,loading,128,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:518,performance,load,loading,518,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:548,performance,perform,performance,548,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:327,reliability,fail,failing,327,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:786,reliability,availab,available,786,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:335,safety,test,tests,335,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:384,safety,modul,modules,384,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:635,safety,modul,modules,635,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:786,safety,avail,available,786,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:832,safety,depend,depends,832,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:209,security,inject,injected,209,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:786,security,availab,available,786,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:335,testability,test,tests,335,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:535,testability,regress,regressin,535,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:832,testability,depend,depends,832,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1396:548,usability,perform,performance,548,"[cxxmodules] Also preload TMVA/TreePlayer/Graf; ROOT can't autoparse classes inside namespaces with the rootmap. system (as the loading callbacks don't correctly land where. they are supposed to land with our injected namespaces). As this. turns out to be a feature of some kind, let's preload. TMVA/TreePlayer/Graf to fix all failing tests that are related. to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading. without regressin in performance. 2. replace the rootmap system with something else like attaching. all C++ modules on startup. Note that we already do something like this in normal ROOT by. including these packages into the PCH which also makes those. decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1396
https://github.com/root-project/root/pull/1397:47,performance,time,time,47,"disable unicode (UTF-8) in the console for the time being, since it c…; …auses problems on Windows 10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1397
https://github.com/root-project/root/pull/1400:14,interoperability,format,format,14,Switch object format from ELF to COFF and fix symbol lookup; - Switch object format from ELF (Linux) to COFF (Windows). - Fix mangled symbols lookup on Windows: remove leading '_' and use malloc to simulate __imp_ variables (that are indirection pointers),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1400
https://github.com/root-project/root/pull/1400:77,interoperability,format,format,77,Switch object format from ELF to COFF and fix symbol lookup; - Switch object format from ELF (Linux) to COFF (Windows). - Fix mangled symbols lookup on Windows: remove leading '_' and use malloc to simulate __imp_ variables (that are indirection pointers),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1400
https://github.com/root-project/root/pull/1400:214,modifiability,variab,variables,214,Switch object format from ELF to COFF and fix symbol lookup; - Switch object format from ELF (Linux) to COFF (Windows). - Fix mangled symbols lookup on Windows: remove leading '_' and use malloc to simulate __imp_ variables (that are indirection pointers),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1400
https://github.com/root-project/root/pull/1400:198,testability,simul,simulate,198,Switch object format from ELF to COFF and fix symbol lookup; - Switch object format from ELF (Linux) to COFF (Windows). - Fix mangled symbols lookup on Windows: remove leading '_' and use malloc to simulate __imp_ variables (that are indirection pointers),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1400
https://github.com/root-project/root/pull/1401:96,deployability,BUILD,BUILDTYPE,96,"TDirectory Constructor; This resolved https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=native,LABEL=mac1012/5509/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1401
https://github.com/root-project/root/pull/1401:147,safety,test,testReport,147,"TDirectory Constructor; This resolved https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=native,LABEL=mac1012/5509/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1401
https://github.com/root-project/root/pull/1401:186,safety,test,test,186,"TDirectory Constructor; This resolved https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=native,LABEL=mac1012/5509/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1401
https://github.com/root-project/root/pull/1401:147,testability,test,testReport,147,"TDirectory Constructor; This resolved https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=native,LABEL=mac1012/5509/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1401
https://github.com/root-project/root/pull/1401:186,testability,test,test,186,"TDirectory Constructor; This resolved https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=native,LABEL=mac1012/5509/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1401
https://github.com/root-project/root/pull/1403:238,performance,disk,disk,238,Set the SourceManager flag to enable -fmodules-embed-all-files.; This marks all files in the PCH/PCM transient. This allows clang to. stream them back within the zip in the PCH rather than requiring the. files to be physically present on disk. This should resolve an introduced regression which materializes if. the files are moved/deleted after the generation of the PCH.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1403
https://github.com/root-project/root/pull/1403:278,testability,regress,regression,278,Set the SourceManager flag to enable -fmodules-embed-all-files.; This marks all files in the PCH/PCM transient. This allows clang to. stream them back within the zip in the PCH rather than requiring the. files to be physically present on disk. This should resolve an introduced regression which materializes if. the files are moved/deleted after the generation of the PCH.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1403
https://github.com/root-project/root/pull/1404:26,interoperability,XML,XML,26,"Add possibility to insert XML node in the middle of childs list; Provide missing feature, which probably required here:. https://root-forum.cern.ch/t/27044. Add correspondent tutorial, adjust older tutorials as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1404
https://github.com/root-project/root/pull/1406:162,deployability,modul,modules,162,Refactor fromRootCling in TCling (NFC); Let's hardcode the long symbol name at least in only one place. in TCling as we will need that in more places for the C++ modules. work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1406
https://github.com/root-project/root/pull/1406:0,modifiability,Refact,Refactor,0,Refactor fromRootCling in TCling (NFC); Let's hardcode the long symbol name at least in only one place. in TCling as we will need that in more places for the C++ modules. work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1406
https://github.com/root-project/root/pull/1406:162,modifiability,modul,modules,162,Refactor fromRootCling in TCling (NFC); Let's hardcode the long symbol name at least in only one place. in TCling as we will need that in more places for the C++ modules. work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1406
https://github.com/root-project/root/pull/1406:0,performance,Refactor,Refactor,0,Refactor fromRootCling in TCling (NFC); Let's hardcode the long symbol name at least in only one place. in TCling as we will need that in more places for the C++ modules. work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1406
https://github.com/root-project/root/pull/1406:162,safety,modul,modules,162,Refactor fromRootCling in TCling (NFC); Let's hardcode the long symbol name at least in only one place. in TCling as we will need that in more places for the C++ modules. work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1406
https://github.com/root-project/root/pull/1406:46,security,hardcod,hardcode,46,Refactor fromRootCling in TCling (NFC); Let's hardcode the long symbol name at least in only one place. in TCling as we will need that in more places for the C++ modules. work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1406
https://github.com/root-project/root/pull/1407:401,integrability,event,eventhough,401,Use a helper class (TStringView) to resolve string/string_view ambiguity. [v6-08]; This solves the ambiguity of conversion from TString to std::string_view while preserving the conversion from. TString to std::string at the cost of requiring overload of function taking a std::string_view. This is necessary. as C++11 and C++14 does not have the proper semantic for properly resolving the conversions eventhough we have. an explicit conversion (from TString to std::string). Note that this problem is resovled in C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1407
https://github.com/root-project/root/pull/1407:112,interoperability,convers,conversion,112,Use a helper class (TStringView) to resolve string/string_view ambiguity. [v6-08]; This solves the ambiguity of conversion from TString to std::string_view while preserving the conversion from. TString to std::string at the cost of requiring overload of function taking a std::string_view. This is necessary. as C++11 and C++14 does not have the proper semantic for properly resolving the conversions eventhough we have. an explicit conversion (from TString to std::string). Note that this problem is resovled in C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1407
https://github.com/root-project/root/pull/1407:177,interoperability,convers,conversion,177,Use a helper class (TStringView) to resolve string/string_view ambiguity. [v6-08]; This solves the ambiguity of conversion from TString to std::string_view while preserving the conversion from. TString to std::string at the cost of requiring overload of function taking a std::string_view. This is necessary. as C++11 and C++14 does not have the proper semantic for properly resolving the conversions eventhough we have. an explicit conversion (from TString to std::string). Note that this problem is resovled in C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1407
https://github.com/root-project/root/pull/1407:353,interoperability,semant,semantic,353,Use a helper class (TStringView) to resolve string/string_view ambiguity. [v6-08]; This solves the ambiguity of conversion from TString to std::string_view while preserving the conversion from. TString to std::string at the cost of requiring overload of function taking a std::string_view. This is necessary. as C++11 and C++14 does not have the proper semantic for properly resolving the conversions eventhough we have. an explicit conversion (from TString to std::string). Note that this problem is resovled in C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1407
https://github.com/root-project/root/pull/1407:389,interoperability,convers,conversions,389,Use a helper class (TStringView) to resolve string/string_view ambiguity. [v6-08]; This solves the ambiguity of conversion from TString to std::string_view while preserving the conversion from. TString to std::string at the cost of requiring overload of function taking a std::string_view. This is necessary. as C++11 and C++14 does not have the proper semantic for properly resolving the conversions eventhough we have. an explicit conversion (from TString to std::string). Note that this problem is resovled in C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1407
https://github.com/root-project/root/pull/1407:433,interoperability,convers,conversion,433,Use a helper class (TStringView) to resolve string/string_view ambiguity. [v6-08]; This solves the ambiguity of conversion from TString to std::string_view while preserving the conversion from. TString to std::string at the cost of requiring overload of function taking a std::string_view. This is necessary. as C++11 and C++14 does not have the proper semantic for properly resolving the conversions eventhough we have. an explicit conversion (from TString to std::string). Note that this problem is resovled in C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1407
https://github.com/root-project/root/pull/1407:328,reliability,doe,does,328,Use a helper class (TStringView) to resolve string/string_view ambiguity. [v6-08]; This solves the ambiguity of conversion from TString to std::string_view while preserving the conversion from. TString to std::string at the cost of requiring overload of function taking a std::string_view. This is necessary. as C++11 and C++14 does not have the proper semantic for properly resolving the conversions eventhough we have. an explicit conversion (from TString to std::string). Note that this problem is resovled in C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1407
https://github.com/root-project/root/pull/1407:6,usability,help,helper,6,Use a helper class (TStringView) to resolve string/string_view ambiguity. [v6-08]; This solves the ambiguity of conversion from TString to std::string_view while preserving the conversion from. TString to std::string at the cost of requiring overload of function taking a std::string_view. This is necessary. as C++11 and C++14 does not have the proper semantic for properly resolving the conversions eventhough we have. an explicit conversion (from TString to std::string). Note that this problem is resovled in C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1407
https://github.com/root-project/root/pull/1408:120,performance,lock,lock,120,Improve StreamerInfo's Streamer; Avoid modification of StreamerInfo during their streaming and thus remove the need for lock acquisition there.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1408
https://github.com/root-project/root/pull/1408:33,safety,Avoid,Avoid,33,Improve StreamerInfo's Streamer; Avoid modification of StreamerInfo during their streaming and thus remove the need for lock acquisition there.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1408
https://github.com/root-project/root/pull/1408:39,security,modif,modification,39,Improve StreamerInfo's Streamer; Avoid modification of StreamerInfo during their streaming and thus remove the need for lock acquisition there.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1408
https://github.com/root-project/root/pull/1408:120,security,lock,lock,120,Improve StreamerInfo's Streamer; Avoid modification of StreamerInfo during their streaming and thus remove the need for lock acquisition there.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1408
https://github.com/root-project/root/pull/1409:13,energy efficiency,Reduc,Reduce,13,[cxxmodules] Reduce extra deserializations.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1409
https://github.com/root-project/root/pull/1411:109,availability,failur,failure,109,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1411:109,deployability,fail,failure,109,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1411:212,deployability,build,build,212,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1411:96,modifiability,interm,intermittent,96,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1411:109,performance,failur,failure,109,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1411:109,reliability,fail,failure,109,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1411:47,safety,safe,safe,47,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1411:224,safety,test,testReport,224,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1411:224,testability,test,testReport,224,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…; …ve use. This might fix intermittent failure in roottest_root_multicore_tp_process_imt. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/11911/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/. shows crash in:,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1411
https://github.com/root-project/root/pull/1412:1,deployability,modul,modules,1,[modules][cxxmodules] Improve the layering of our special modules.; kTRUE and kFALSE were moved in RtypesCore.h which makes the move possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1412
https://github.com/root-project/root/pull/1412:58,deployability,modul,modules,58,[modules][cxxmodules] Improve the layering of our special modules.; kTRUE and kFALSE were moved in RtypesCore.h which makes the move possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1412
https://github.com/root-project/root/pull/1412:1,modifiability,modul,modules,1,[modules][cxxmodules] Improve the layering of our special modules.; kTRUE and kFALSE were moved in RtypesCore.h which makes the move possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1412
https://github.com/root-project/root/pull/1412:34,modifiability,layer,layering,34,[modules][cxxmodules] Improve the layering of our special modules.; kTRUE and kFALSE were moved in RtypesCore.h which makes the move possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1412
https://github.com/root-project/root/pull/1412:58,modifiability,modul,modules,58,[modules][cxxmodules] Improve the layering of our special modules.; kTRUE and kFALSE were moved in RtypesCore.h which makes the move possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1412
https://github.com/root-project/root/pull/1412:1,safety,modul,modules,1,[modules][cxxmodules] Improve the layering of our special modules.; kTRUE and kFALSE were moved in RtypesCore.h which makes the move possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1412
https://github.com/root-project/root/pull/1412:58,safety,modul,modules,58,[modules][cxxmodules] Improve the layering of our special modules.; kTRUE and kFALSE were moved in RtypesCore.h which makes the move possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1412
https://github.com/root-project/root/pull/1413:1,deployability,modul,modules,1,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:39,deployability,modul,module,39,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:124,deployability,modul,module,124,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:214,deployability,build,build,214,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:1,modifiability,modul,modules,1,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:39,modifiability,modul,module,39,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:124,modifiability,modul,module,124,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:1,safety,modul,modules,1,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:39,safety,modul,module,39,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:124,safety,modul,module,124,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1413:160,testability,context,context,160,[modules][cxxmodules] Move TIsAProxy.h module to ROOT_Core_Config_C; There is no reason for T*IsAProxy.h to be a standalone module. It is. included in the same context as the ones in ROOT_Core_Config_C. @phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1413
https://github.com/root-project/root/pull/1414:1,deployability,modul,modules,1,[modules] Hooray RWrap_libcpp_string_view.h is dead.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1414
https://github.com/root-project/root/pull/1414:1,modifiability,modul,modules,1,[modules] Hooray RWrap_libcpp_string_view.h is dead.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1414
https://github.com/root-project/root/pull/1414:1,safety,modul,modules,1,[modules] Hooray RWrap_libcpp_string_view.h is dead.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1414
https://github.com/root-project/root/pull/1415:1,deployability,modul,modules,1,[modules] Enable cxxmodules for LLVM and libstdc++.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1415
https://github.com/root-project/root/pull/1415:1,modifiability,modul,modules,1,[modules] Enable cxxmodules for LLVM and libstdc++.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1415
https://github.com/root-project/root/pull/1415:1,safety,modul,modules,1,[modules] Enable cxxmodules for LLVM and libstdc++.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1415
https://github.com/root-project/root/pull/1418:15,energy efficiency,draw,drawing,15,Fix of 3d axis drawing at theta=90;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1418
https://github.com/root-project/root/pull/1419:42,integrability,messag,messages,42,Fix type deduction bug; Please see commit messages for more information. This probably also fixes [ROOT-9139](https://sft.its.cern.ch/jira/browse/ROOT-9139).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1419
https://github.com/root-project/root/pull/1419:42,interoperability,messag,messages,42,Fix type deduction bug; Please see commit messages for more information. This probably also fixes [ROOT-9139](https://sft.its.cern.ch/jira/browse/ROOT-9139).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1419
https://github.com/root-project/root/pull/1420:256,deployability,version,versions,256,"[rootcp] Write out keys only if cycle number increases; Fixes https://sft.its.cern.ch/jira/browse/ROOT-8528. *Note:* keys appear in the list of keys in decreasing cycle order. Therefore, if an object has been written more than once, we should skip the old versions, and that's what this commit does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1420
https://github.com/root-project/root/pull/1420:256,integrability,version,versions,256,"[rootcp] Write out keys only if cycle number increases; Fixes https://sft.its.cern.ch/jira/browse/ROOT-8528. *Note:* keys appear in the list of keys in decreasing cycle order. Therefore, if an object has been written more than once, we should skip the old versions, and that's what this commit does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1420
https://github.com/root-project/root/pull/1420:256,modifiability,version,versions,256,"[rootcp] Write out keys only if cycle number increases; Fixes https://sft.its.cern.ch/jira/browse/ROOT-8528. *Note:* keys appear in the list of keys in decreasing cycle order. Therefore, if an object has been written more than once, we should skip the old versions, and that's what this commit does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1420
https://github.com/root-project/root/pull/1420:294,reliability,doe,does,294,"[rootcp] Write out keys only if cycle number increases; Fixes https://sft.its.cern.ch/jira/browse/ROOT-8528. *Note:* keys appear in the list of keys in decreasing cycle order. Therefore, if an object has been written more than once, we should skip the old versions, and that's what this commit does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1420
https://github.com/root-project/root/pull/1422:29,availability,error,errors,29,RooMCMarkovChain; I hope all errors could be resolved.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1422
https://github.com/root-project/root/pull/1422:29,performance,error,errors,29,RooMCMarkovChain; I hope all errors could be resolved.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1422
https://github.com/root-project/root/pull/1422:29,safety,error,errors,29,RooMCMarkovChain; I hope all errors could be resolved.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1422
https://github.com/root-project/root/pull/1422:29,usability,error,errors,29,RooMCMarkovChain; I hope all errors could be resolved.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1422
https://github.com/root-project/root/pull/1423:35,safety,reme,remember,35,Claim #include <auto-parse-hdr> to remember the full path (ROOT-8863).;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1423
https://github.com/root-project/root/pull/1426:21,performance,lock,lock,21,"Remove TBufferMerger lock around PartialMerge(); The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1426
https://github.com/root-project/root/pull/1426:100,performance,time,times,100,"Remove TBufferMerger lock around PartialMerge(); The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1426
https://github.com/root-project/root/pull/1426:63,safety,test,test,63,"Remove TBufferMerger lock around PartialMerge(); The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1426
https://github.com/root-project/root/pull/1426:139,safety,safe,safe,139,"Remove TBufferMerger lock around PartialMerge(); The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1426
https://github.com/root-project/root/pull/1426:21,security,lock,lock,21,"Remove TBufferMerger lock around PartialMerge(); The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1426
https://github.com/root-project/root/pull/1426:63,testability,test,test,63,"Remove TBufferMerger lock around PartialMerge(); The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1426
https://github.com/root-project/root/pull/1427:10,performance,Lock,Lock,10,ReadWrite Lock performance;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1427
https://github.com/root-project/root/pull/1427:15,performance,perform,performance,15,ReadWrite Lock performance;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1427
https://github.com/root-project/root/pull/1427:10,security,Lock,Lock,10,ReadWrite Lock performance;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1427
https://github.com/root-project/root/pull/1427:15,usability,perform,performance,15,ReadWrite Lock performance;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1427
https://github.com/root-project/root/pull/1429:8,safety,Prevent,Prevent,8,"[cmake] Prevent constantly rebuilding LLVM; This was already fixed 4940aea49fa30eb8fdc0e169640158fc8ec5b768. and is fixed in LLVM upstream, however the fix only landed after. the 5.0 branch and we therefore need to reland our hack.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1429
https://github.com/root-project/root/pull/1429:8,security,Preven,Prevent,8,"[cmake] Prevent constantly rebuilding LLVM; This was already fixed 4940aea49fa30eb8fdc0e169640158fc8ec5b768. and is fixed in LLVM upstream, however the fix only landed after. the 5.0 branch and we therefore need to reland our hack.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1429
https://github.com/root-project/root/pull/1429:226,security,hack,hack,226,"[cmake] Prevent constantly rebuilding LLVM; This was already fixed 4940aea49fa30eb8fdc0e169640158fc8ec5b768. and is fixed in LLVM upstream, however the fix only landed after. the 5.0 branch and we therefore need to reland our hack.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1429
https://github.com/root-project/root/pull/1430:1,deployability,modul,modular,1,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:130,deployability,modul,modularization,130,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:94,energy efficiency,load,loading,94,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:1,integrability,modular,modular,1,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:130,integrability,modular,modularization,130,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:1,modifiability,modul,modular,1,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:130,modifiability,modul,modularization,130,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:94,performance,load,loading,94,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:159,reliability,doe,doesn,159,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:1,safety,modul,modular,1,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:130,safety,modul,modularization,130,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:1,testability,modula,modular,1,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:130,testability,modula,modularization,130,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1430:192,usability,minim,minimal,192,"[modular.] Don't autoload MathCore; We move to cling, this should now work without explicitly loading. it. This also unblocks the modularization project which doesn't. include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1430
https://github.com/root-project/root/pull/1431:33,deployability,version,version,33,Add normalDist example in PyROOT version;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1431
https://github.com/root-project/root/pull/1431:33,integrability,version,version,33,Add normalDist example in PyROOT version;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1431
https://github.com/root-project/root/pull/1431:33,modifiability,version,version,33,Add normalDist example in PyROOT version;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1431
https://github.com/root-project/root/pull/1432:364,interoperability,standard,standard,364,"Allow compilation of ROOT on Linux with clang-5.0 + libc++ and C++17 enabled; This gets rid of some deprecated things that are actually removed in libc++, such as `std::pointer_to_unary_function` and `std::mem_fun`. However, it is not yet enough to compile all of ROOT with C++17 enabled with libc++, after linking `rootcling_stage1`, there is a confusion between standard library headers in `rootcling` that will need to be addressed by further changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1432
https://github.com/root-project/root/pull/1434:21,availability,consist,consistently,21,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:89,deployability,contain,containing,89,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:140,deployability,patch,patch,140,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:399,integrability,compon,components,399,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:399,interoperability,compon,components,399,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:399,modifiability,compon,components,399,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:140,safety,patch,patch,140,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:263,safety,detect,detector,263,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:358,safety,avoid,avoid,358,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:140,security,patch,patch,140,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:263,security,detect,detector,263,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:346,security,modif,modified,346,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1434:21,usability,consist,consistently,21,"Added possibility to consistently import/export gdml geometry from/to…; … separate files containing different volumes. (Markus Frank). This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1434
https://github.com/root-project/root/pull/1435:68,availability,error,error,68,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:187,availability,error,error,187,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:329,availability,error,error,329,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:443,availability,error,error,443,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:546,availability,error,error,546,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:649,availability,error,error,649,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:964,availability,state,statement,964,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:29,energy efficiency,core,core,29,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:964,integrability,state,statement,964,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:3286,modifiability,Variab,VariableGaussTransform,3286,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:68,performance,error,error,68,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:187,performance,error,error,187,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:329,performance,error,error,329,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:443,performance,error,error,443,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:546,performance,error,error,546,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:649,performance,error,error,649,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:68,safety,error,error,68,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:187,safety,error,error,187,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:329,safety,error,error,329,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:443,safety,error,error,443,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:546,safety,error,error,546,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:649,safety,error,error,649,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1079,safety,except,exception,1079,"umber of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1124,safety,except,exception,1124,"defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by re",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1220,safety,except,exception,1220," when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1265,safety,except,exception,1265,"ICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactory",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1362,safety,except,exception,1362," when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFacto",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1407,safety,except,exception,1407,"graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1504,safety,except,exception,1504,"nds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1549,safety,except,exception,1549,"rray 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1607,safety,Except,Exception,1607,"nds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1704,safety,Except,Exception,1704,of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should b,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1801,safety,Except,Exception,1801, check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1899,safety,Except,Exception,1899,e. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:1998,safety,Except,Exception,1998,oofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2097,safety,Except,Exception,2097,throwing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by refe,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2196,safety,Except,Exception,2196,copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2295,safety,Except,Exception,2295,idirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussT,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2394,safety,Except,Exception,2394,riginal exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2493,safety,Except,Exception,2493,"aught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second conditi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2592,safety,Except,Exception,2592,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2691,safety,Except,Exception,2691,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2790,safety,Except,Exception,2790,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2888,safety,Except,Exception,2888,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:2986,safety,Except,Exception,2986,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:3068,safety,Except,Exception,3068,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:3149,safety,Except,Exception,3149,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:3230,safety,Except,Exception,3230,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:3327,safety,Except,Exception,3327,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:468,security,access,accessed,468,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:571,security,access,accessed,571,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:674,security,access,accessed,674,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:974,security,modif,modifies,974,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:3454,security,Ident,Identical,3454,"stead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:484]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:526]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:568]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:588]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:629]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:642]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:681]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:859]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:131]: (style) Exception should be caught by reference. [tmva/tmva/src/CostComplexityPruneTool.cxx:142]: (style) Exception should be caught by reference. [tmva/tmva/src/DataSet.cxx:173]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:636]: (style) Exception should be caught by reference. [tmva/tmva/src/Reader.cxx:702]: (style) Exception should be caught by reference. [tmva/tmva/src/VariableGaussTransform.cxx:751]: (style) Exception should be caught by reference. [io/sql/src/TSQLStructure.cxx:1931] -> [io/sql/src/TSQLStructure.cxx:1933]: (warning) Identical condition 'len==0', second condition is always false",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:957,testability,Assert,Assert,957,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:68,usability,error,error,68,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:187,usability,error,error,187,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:329,usability,error,error,329,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:443,usability,error,error,443,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:546,usability,error,error,546,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1435:649,usability,error,error,649,"cppcheck: fix some reports; [core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'. [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'. [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds. [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds. [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference. [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference. [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1435
https://github.com/root-project/root/pull/1438:9,deployability,patch,patches,9,V6 12 00 patches: Fix misnamed variable in RooRandomizeParamMCSModule;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1438
https://github.com/root-project/root/pull/1438:31,modifiability,variab,variable,31,V6 12 00 patches: Fix misnamed variable in RooRandomizeParamMCSModule;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1438
https://github.com/root-project/root/pull/1438:9,safety,patch,patches,9,V6 12 00 patches: Fix misnamed variable in RooRandomizeParamMCSModule;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1438
https://github.com/root-project/root/pull/1438:9,security,patch,patches,9,V6 12 00 patches: Fix misnamed variable in RooRandomizeParamMCSModule;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1438
https://github.com/root-project/root/pull/1439:58,integrability,event,event-loop,58,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1439
https://github.com/root-project/root/pull/1439:129,integrability,event,event-loop,129,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1439
https://github.com/root-project/root/pull/1439:185,integrability,filter,filters,185,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1439
https://github.com/root-project/root/pull/1439:39,modifiability,variab,variable,39,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1439
https://github.com/root-project/root/pull/1439:197,usability,custom,custom,197,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1439
https://github.com/root-project/root/pull/1440:58,integrability,event,event-loop,58,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1440
https://github.com/root-project/root/pull/1440:129,integrability,event,event-loop,129,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1440
https://github.com/root-project/root/pull/1440:185,integrability,filter,filters,185,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1440
https://github.com/root-project/root/pull/1440:39,modifiability,variab,variable,39,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1440
https://github.com/root-project/root/pull/1440:197,usability,custom,custom,197,"[TDF] Fix missing re-initialization of variable on second event-loop; `fLastCheckedEntry` was not re-initialized after the first event-loop. of a data-frame, providing wrong results in filters and custom columns. rare occasions. This should fix ROOT-9136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1440
https://github.com/root-project/root/pull/1441:85,performance,lock,lock,85,TContext dtor; The race condition could lead to the TContext indirectly spinning the lock indefinitively,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1441
https://github.com/root-project/root/pull/1441:85,security,lock,lock,85,TContext dtor; The race condition could lead to the TContext indirectly spinning the lock indefinitively,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1441
https://github.com/root-project/root/pull/1442:589,availability,down,down,589,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:416,deployability,version,version,416,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:453,deployability,version,version,453,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:646,deployability,version,version,646,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:416,integrability,version,version,416,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:453,integrability,version,version,453,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:646,integrability,version,version,646,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:416,modifiability,version,version,416,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:453,modifiability,version,version,453,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:646,modifiability,version,version,646,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:800,security,modif,modified,800,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:841,security,modif,modified,841,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:882,security,modif,modified,882,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:925,security,modif,modified,925,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1442:318,usability,behavi,behavior,318,"New GeoCad Features; Added new features to GeoCad library. - New features are used to export partial geometries to STEP files. - Added 3 new member functions TGeoToStep::CreatePartialGeometry taking. different arguments. - The first takes a file_name and a max_level, and defaults to the. previous (default arguments) behavior. The max_level sets the node depth. that will be exported in the STEP file. - The second version, in addition to the previous version, has a part_name argument. This is the name of a volume that is associated with a level 1 node. Only this node and its children down to max_level will be exported. - Similarly, a third version takes a map of part_name/max_level key/value pairs. This allows the multiple level 1 nodes to be selected and exported to. different max_levels. 	modified: geom/geocad/inc/TGeoToStep.h. 	modified: geom/geocad/inc/TOCCToStep.h. 	modified: geom/geocad/src/TGeoToStep.cxx. 	modified: geom/geocad/src/TOCCToStep.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1442
https://github.com/root-project/root/pull/1443:91,performance,lock,lock,91,TCcontext dtor v612; The race condition could lead to the TContext indirectly spinning the lock indefinitively,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1443
https://github.com/root-project/root/pull/1443:91,security,lock,lock,91,TCcontext dtor v612; The race condition could lead to the TContext indirectly spinning the lock indefinitively,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1443
https://github.com/root-project/root/pull/1444:67,security,ident,identical,67,Merge help text from TApplication and rootx.; They are meant to be identical but diverged.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1444
https://github.com/root-project/root/pull/1444:6,usability,help,help,6,Merge help text from TApplication and rootx.; They are meant to be identical but diverged.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1444
https://github.com/root-project/root/pull/1445:52,deployability,patch,patch,52,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:311,integrability,compon,components,311,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:311,interoperability,compon,components,311,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:311,modifiability,compon,components,311,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:52,safety,patch,patch,52,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:175,safety,detect,detector,175,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:270,safety,avoid,avoid,270,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:52,security,patch,patch,52,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:175,security,detect,detector,175,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1445:258,security,modif,modified,258,"Added import/export for parts of the geometry; This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1445
https://github.com/root-project/root/pull/1447:0,deployability,Updat,Update,0,Update JSROOT release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1447
https://github.com/root-project/root/pull/1447:14,deployability,releas,release,14,Update JSROOT release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1447
https://github.com/root-project/root/pull/1447:0,safety,Updat,Update,0,Update JSROOT release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1447
https://github.com/root-project/root/pull/1447:0,security,Updat,Update,0,Update JSROOT release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1447
https://github.com/root-project/root/pull/1448:36,deployability,releas,release,36,[DOC] Add more TDF tutorials to the release notes; @dpiparo can you please check whether I forgot something important?,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1448
https://github.com/root-project/root/pull/1449:0,energy efficiency,Adapt,Adapt,0,Adapt TMVA::RandomGenerator for use with std::shuffle();,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1449
https://github.com/root-project/root/pull/1449:0,integrability,Adapt,Adapt,0,Adapt TMVA::RandomGenerator for use with std::shuffle();,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1449
https://github.com/root-project/root/pull/1449:0,interoperability,Adapt,Adapt,0,Adapt TMVA::RandomGenerator for use with std::shuffle();,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1449
https://github.com/root-project/root/pull/1449:0,modifiability,Adapt,Adapt,0,Adapt TMVA::RandomGenerator for use with std::shuffle();,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1449
https://github.com/root-project/root/pull/1450:36,deployability,releas,release,36,[DOC] Add more TDF tutorials to the release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1450
https://github.com/root-project/root/pull/1451:14,usability,document,documentation,14,"Improving the documentation in sql sample; See [1], I add some lines to improve the comprehension of the tutorial. . [1] https://root.cern.ch/root/html534/tutorials/sql/index.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1451
https://github.com/root-project/root/pull/1452:0,deployability,Updat,Update,0,Update credits.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1452
https://github.com/root-project/root/pull/1452:0,safety,Updat,Update,0,Update credits.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1452
https://github.com/root-project/root/pull/1452:0,security,Updat,Update,0,Update credits.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1452
https://github.com/root-project/root/pull/1453:42,energy efficiency,Reduc,Reduce,42,[NFC] Better documentation of TDataFrame::Reduce;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1453
https://github.com/root-project/root/pull/1453:13,usability,document,documentation,13,[NFC] Better documentation of TDataFrame::Reduce;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1453
https://github.com/root-project/root/pull/1454:57,energy efficiency,Reduc,Reduce,57,"[TDF] Add Accumulate action; This is a generalization of Reduce that takes two lambdas:. - the accumulator lambda has signature `U(U,T)` or `void(U&,T)` where. U is the type of the accumulator, and T is the type of the column. to be accumulated into U. - the merge lambda has signature `U(U,U)` and ""puts together"" the. accumulators of each thread",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1454
https://github.com/root-project/root/pull/1454:118,security,sign,signature,118,"[TDF] Add Accumulate action; This is a generalization of Reduce that takes two lambdas:. - the accumulator lambda has signature `U(U,T)` or `void(U&,T)` where. U is the type of the accumulator, and T is the type of the column. to be accumulated into U. - the merge lambda has signature `U(U,U)` and ""puts together"" the. accumulators of each thread",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1454
https://github.com/root-project/root/pull/1454:276,security,sign,signature,276,"[TDF] Add Accumulate action; This is a generalization of Reduce that takes two lambdas:. - the accumulator lambda has signature `U(U,T)` or `void(U&,T)` where. U is the type of the accumulator, and T is the type of the column. to be accumulated into U. - the merge lambda has signature `U(U,U)` and ""puts together"" the. accumulators of each thread",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1454
https://github.com/root-project/root/pull/1455:213,safety,Test,Testing,213,"Revert ""Add include directories for externals to ROOT_INCLUDE_DIRS""; This reverts commit e5299b1f790f1450c1545659f4cc869de7ebef70. We still have to copy headers to the binary directory, so this is. not necessary. Testing before merging.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1455
https://github.com/root-project/root/pull/1455:213,testability,Test,Testing,213,"Revert ""Add include directories for externals to ROOT_INCLUDE_DIRS""; This reverts commit e5299b1f790f1450c1545659f4cc869de7ebef70. We still have to copy headers to the binary directory, so this is. not necessary. Testing before merging.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1455
https://github.com/root-project/root/pull/1456:642,deployability,depend,depend,642,"fix -Woverride warnings in TMVA MLP codegen; this is a backport of. https://gitlab.cern.ch/lhcb/Rec/commit/6103563cc0fc537d8920a2918117b27a48823772#5c0090c3eee645cadb8dd97f9faf43e9664403ce_191_190. There are actually two changes:. - add an override in MethodBase generated code. - remove trailing whitespaces in the code of a MLP w/ normalise variable transformation. discussion points:. - one could also remove trailing whitespaces in other files (`grep -- ' "" << std::endl;'`). - the whitespaces are a bit on the boarder of history noise vs. useful. - the override will make the generated code for all code generated methods (not only MLP) depend on c++11 (which to my knowledge is the case for MLP already, but not for the other methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1456
https://github.com/root-project/root/pull/1456:352,integrability,transform,transformation,352,"fix -Woverride warnings in TMVA MLP codegen; this is a backport of. https://gitlab.cern.ch/lhcb/Rec/commit/6103563cc0fc537d8920a2918117b27a48823772#5c0090c3eee645cadb8dd97f9faf43e9664403ce_191_190. There are actually two changes:. - add an override in MethodBase generated code. - remove trailing whitespaces in the code of a MLP w/ normalise variable transformation. discussion points:. - one could also remove trailing whitespaces in other files (`grep -- ' "" << std::endl;'`). - the whitespaces are a bit on the boarder of history noise vs. useful. - the override will make the generated code for all code generated methods (not only MLP) depend on c++11 (which to my knowledge is the case for MLP already, but not for the other methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1456
https://github.com/root-project/root/pull/1456:642,integrability,depend,depend,642,"fix -Woverride warnings in TMVA MLP codegen; this is a backport of. https://gitlab.cern.ch/lhcb/Rec/commit/6103563cc0fc537d8920a2918117b27a48823772#5c0090c3eee645cadb8dd97f9faf43e9664403ce_191_190. There are actually two changes:. - add an override in MethodBase generated code. - remove trailing whitespaces in the code of a MLP w/ normalise variable transformation. discussion points:. - one could also remove trailing whitespaces in other files (`grep -- ' "" << std::endl;'`). - the whitespaces are a bit on the boarder of history noise vs. useful. - the override will make the generated code for all code generated methods (not only MLP) depend on c++11 (which to my knowledge is the case for MLP already, but not for the other methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1456
https://github.com/root-project/root/pull/1456:352,interoperability,transform,transformation,352,"fix -Woverride warnings in TMVA MLP codegen; this is a backport of. https://gitlab.cern.ch/lhcb/Rec/commit/6103563cc0fc537d8920a2918117b27a48823772#5c0090c3eee645cadb8dd97f9faf43e9664403ce_191_190. There are actually two changes:. - add an override in MethodBase generated code. - remove trailing whitespaces in the code of a MLP w/ normalise variable transformation. discussion points:. - one could also remove trailing whitespaces in other files (`grep -- ' "" << std::endl;'`). - the whitespaces are a bit on the boarder of history noise vs. useful. - the override will make the generated code for all code generated methods (not only MLP) depend on c++11 (which to my knowledge is the case for MLP already, but not for the other methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1456
https://github.com/root-project/root/pull/1456:343,modifiability,variab,variable,343,"fix -Woverride warnings in TMVA MLP codegen; this is a backport of. https://gitlab.cern.ch/lhcb/Rec/commit/6103563cc0fc537d8920a2918117b27a48823772#5c0090c3eee645cadb8dd97f9faf43e9664403ce_191_190. There are actually two changes:. - add an override in MethodBase generated code. - remove trailing whitespaces in the code of a MLP w/ normalise variable transformation. discussion points:. - one could also remove trailing whitespaces in other files (`grep -- ' "" << std::endl;'`). - the whitespaces are a bit on the boarder of history noise vs. useful. - the override will make the generated code for all code generated methods (not only MLP) depend on c++11 (which to my knowledge is the case for MLP already, but not for the other methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1456
https://github.com/root-project/root/pull/1456:642,modifiability,depend,depend,642,"fix -Woverride warnings in TMVA MLP codegen; this is a backport of. https://gitlab.cern.ch/lhcb/Rec/commit/6103563cc0fc537d8920a2918117b27a48823772#5c0090c3eee645cadb8dd97f9faf43e9664403ce_191_190. There are actually two changes:. - add an override in MethodBase generated code. - remove trailing whitespaces in the code of a MLP w/ normalise variable transformation. discussion points:. - one could also remove trailing whitespaces in other files (`grep -- ' "" << std::endl;'`). - the whitespaces are a bit on the boarder of history noise vs. useful. - the override will make the generated code for all code generated methods (not only MLP) depend on c++11 (which to my knowledge is the case for MLP already, but not for the other methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1456
https://github.com/root-project/root/pull/1456:642,safety,depend,depend,642,"fix -Woverride warnings in TMVA MLP codegen; this is a backport of. https://gitlab.cern.ch/lhcb/Rec/commit/6103563cc0fc537d8920a2918117b27a48823772#5c0090c3eee645cadb8dd97f9faf43e9664403ce_191_190. There are actually two changes:. - add an override in MethodBase generated code. - remove trailing whitespaces in the code of a MLP w/ normalise variable transformation. discussion points:. - one could also remove trailing whitespaces in other files (`grep -- ' "" << std::endl;'`). - the whitespaces are a bit on the boarder of history noise vs. useful. - the override will make the generated code for all code generated methods (not only MLP) depend on c++11 (which to my knowledge is the case for MLP already, but not for the other methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1456
https://github.com/root-project/root/pull/1456:642,testability,depend,depend,642,"fix -Woverride warnings in TMVA MLP codegen; this is a backport of. https://gitlab.cern.ch/lhcb/Rec/commit/6103563cc0fc537d8920a2918117b27a48823772#5c0090c3eee645cadb8dd97f9faf43e9664403ce_191_190. There are actually two changes:. - add an override in MethodBase generated code. - remove trailing whitespaces in the code of a MLP w/ normalise variable transformation. discussion points:. - one could also remove trailing whitespaces in other files (`grep -- ' "" << std::endl;'`). - the whitespaces are a bit on the boarder of history noise vs. useful. - the override will make the generated code for all code generated methods (not only MLP) depend on c++11 (which to my knowledge is the case for MLP already, but not for the other methods).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1456
https://github.com/root-project/root/pull/1457:32,deployability,modul,modules,32,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:76,deployability,modul,modules,76,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:145,deployability,contain,contain,145,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:279,deployability,build,build,279,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:474,deployability,modul,module,474,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:589,deployability,modul,module,589,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:324,interoperability,specif,specific,324,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:449,interoperability,specif,specified,449,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:564,interoperability,specif,specified,564,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:32,modifiability,modul,modules,32,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:76,modifiability,modul,modules,76,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:474,modifiability,modul,module,474,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:589,modifiability,modul,module,589,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:349,reliability,doe,doesn,349,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:32,safety,modul,modules,32,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:76,safety,modul,modules,76,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:474,safety,modul,module,474,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1457:589,safety,modul,module,589,[cxxmodules] Don't generate C++ modules for clingutil STL dicts.; These C++ modules serve no purpose as we. 1. already have an STL dict. 2. they contain just interpreter clutter therefore. 3. care only about the generated IO information. Let's disable them to get rid of all the build warning. when rootcling can't find the specific STL header that doesn't. exist inside ROOT:. ```. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module listDict:. list. Warning in <GenerateModule>: warning: Couldn't find the following specified headers in the module multisetDict:. set. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1457
https://github.com/root-project/root/pull/1458:38,deployability,modul,modules,38,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:91,deployability,integr,integrity,91,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:188,deployability,modul,modulemap,188,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:224,deployability,fail,fails,224,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:329,deployability,modul,modules,329,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:360,deployability,modul,module,360,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:453,deployability,modul,module,453,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:469,deployability,modul,module,469,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:646,deployability,integr,integrity,646,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:885,deployability,modul,module,885,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:1050,deployability,modul,modules,1050,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:1115,deployability,modul,modules,1115,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:214,energy efficiency,current,currently,214,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:261,energy efficiency,Core,Core,261,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:352,energy efficiency,current,current,352,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:782,energy efficiency,Core,Core,782,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:91,integrability,integr,integrity,91,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:619,integrability,sub,submodules,619,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:646,integrability,integr,integrity,646,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:91,interoperability,integr,integrity,91,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:646,interoperability,integr,integrity,646,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:38,modifiability,modul,modules,38,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:91,modifiability,integr,integrity,91,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:188,modifiability,modul,modulemap,188,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:329,modifiability,modul,modules,329,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:360,modifiability,modul,module,360,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:453,modifiability,modul,module,453,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:469,modifiability,modul,module,469,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:545,modifiability,reu,reuse,545,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:646,modifiability,integr,integrity,646,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:885,modifiability,modul,module,885,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:1050,modifiability,modul,modules,1050,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:1115,modifiability,modul,modules,1115,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:79,performance,perform,performs,79,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:91,reliability,integr,integrity,91,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:224,reliability,fail,fails,224,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:646,reliability,integr,integrity,646,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:825,reliability,doe,doesn,825,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:38,safety,modul,modules,38,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:188,safety,modul,modulemap,188,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:329,safety,modul,modules,329,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:360,safety,modul,module,360,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:453,safety,modul,module,453,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:469,safety,modul,module,469,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:885,safety,modul,module,885,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:1050,safety,modul,modules,1050,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:1115,safety,modul,modules,1115,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:91,security,integr,integrity,91,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:282,security,sign,signal,282,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:408,security,sign,signalling,408,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:646,security,integr,integrity,646,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:91,testability,integr,integrity,91,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:646,testability,integr,integrity,646,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:79,usability,perform,performs,79,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1458:147,usability,command,command,147,"[cxxmodules] Also traverse 'used' C++ modules for the header check.; rootcling performs an integrity check on the headers that are passed. via the command line and the ones we have in the modulemap. As this. check currently fails because we had to split up the Core and Thread,. we signal with a `use` directive that these other modules belong to. the current module. The `use` directive is usually only for signalling that we intend. to use this other module from our module, but as we anyway don't. use `-fmodules-decluse` in ROOT we can just reuse this for telling. rootcling that it should also check the split out submodules when. doing the integrity check for the headers. To give a concrete example: `ThreadLocalStorage` had to split. out of `Thread` to fix a cycle between `Core` and `Thread`. However, rootcling now doesn't see the ThreadLocalStorage headers. in the `Thread` module but we pass them to the rootcling invocation. for `Thread`. This adds a `use ThreadLocalStorage` to Thread and. lets rootcling also iterate all `use`'d other modules when doing. this check, so we again have the full set of modules here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1458
https://github.com/root-project/root/pull/1459:304,availability,error,errors,304,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:50,deployability,modul,module,50,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:201,deployability,modul,modules,201,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:268,deployability,modul,module,268,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:358,deployability,patch,patch,358,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:504,deployability,modul,module,504,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:668,deployability,contain,contain,668,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:41,energy efficiency,Core,Core,41,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:494,energy efficiency,Core,Core,494,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:215,integrability,sub,submodule,215,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:50,modifiability,modul,module,50,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:201,modifiability,modul,modules,201,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:268,modifiability,modul,module,268,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:504,modifiability,modul,module,504,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:304,performance,error,errors,304,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:164,reliability,doe,doesn,164,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:50,safety,modul,module,50,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:201,safety,modul,modules,201,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:268,safety,modul,module,268,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:304,safety,error,errors,304,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:358,safety,patch,patch,358,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:442,safety,prevent,prevents,442,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:504,safety,modul,module,504,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:358,security,patch,patch,358,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:442,security,preven,prevents,442,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:236,testability,simul,simulate,236,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:183,usability,support,supported,183,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1459:304,usability,error,errors,304,"[cxxmodules] Remove TVersionCheck.h from Core C++ module blacklist; This header is directly included by TObject.h and directly including. it from some other header doesn't seem to be supported. As C++ modules. with submodule visibility simulate directl including each module header,. we seem to get some errors according to the comments in this header. This patch removes it from the argument list of the. ROOT_GENERATE_DICTIONARY call which prevents it from getting directly. included in the `Core` C++ module. We can also remove it from the header. blacklist after this change. The normal dictionary won't be affected by this. This header is anyway. not supposed to contain TVersionCheck.h but only TObject.h which will. still provide it in the right way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1459
https://github.com/root-project/root/pull/1460:13,availability,Error,Error,13,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:24,deployability,build,building,24,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:89,deployability,build,build,89,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:97,deployability,modul,module,97,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:151,deployability,modul,module,151,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:308,deployability,modul,modules,308,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:497,deployability,build,build,497,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:536,deployability,modul,module,536,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:570,deployability,modul,module,570,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:633,deployability,build,building,633,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:649,deployability,modul,modules,649,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:835,deployability,modul,module,835,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:842,deployability,build,builds,842,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:875,deployability,build,build,875,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:178,integrability,transform,transformations,178,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:366,integrability,transform,transformations,366,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:178,interoperability,transform,transformations,178,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:366,interoperability,transform,transformations,366,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:97,modifiability,modul,module,97,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:151,modifiability,modul,module,151,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:308,modifiability,modul,modules,308,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:536,modifiability,modul,module,536,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:570,modifiability,modul,module,570,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:649,modifiability,modul,modules,649,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:835,modifiability,modul,module,835,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:13,performance,Error,Error,13,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:449,reliability,diagno,diagnostic,449,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:693,reliability,doe,doesn,693,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:754,reliability,diagno,diagnose,754,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:13,safety,Error,Error,13,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:97,safety,modul,module,97,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:151,safety,modul,module,151,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:308,safety,modul,modules,308,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:536,safety,modul,module,536,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:570,safety,modul,module,570,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:649,safety,modul,modules,649,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:667,safety,isol,isolated,667,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:835,safety,modul,module,835,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:667,security,iso,isolated,667,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:449,testability,diagno,diagnostic,449,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:516,testability,verif,verifies,516,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:667,testability,isol,isolated,667,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:754,testability,diagno,diagnose,754,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:13,usability,Error,Error,13,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:397,usability,user,user,397,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1460:779,usability,support,supported,779,[cxxmodules] Error when building ROOT dict implicitly; rootcling should never implicitly build a module that is associated. with a ROOT dict as such a module needs the rootcling transformations. (e.g. to preserve the source code comments for class member as. annotated attributes). The only implicitly built modules should be. system libraries that don't need those transformations. To inform the user that this shouldn't happen we add a new clang. diagnostic client that listens for the -Rmodule-build remarks and. verifies that every module built this way is a system module. The reason for choosing a diag client is that clang is building. those modules in a very isolated environment that doesn't leak any. other information out that we could use to diagnose this. The only. supported way clang is informing clients about implicit module builds. seems to be the -Rmodule-build remarks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1460
https://github.com/root-project/root/pull/1461:92,deployability,updat,updated,92,"[cxxmodules] Remove unused function declareModuleMap; This code is outdated and needs to be updated. But we anyway don't use or. test this code in any way, so let's send it to the git history were dead. code belongs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1461
https://github.com/root-project/root/pull/1461:92,safety,updat,updated,92,"[cxxmodules] Remove unused function declareModuleMap; This code is outdated and needs to be updated. But we anyway don't use or. test this code in any way, so let's send it to the git history were dead. code belongs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1461
https://github.com/root-project/root/pull/1461:129,safety,test,test,129,"[cxxmodules] Remove unused function declareModuleMap; This code is outdated and needs to be updated. But we anyway don't use or. test this code in any way, so let's send it to the git history were dead. code belongs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1461
https://github.com/root-project/root/pull/1461:92,security,updat,updated,92,"[cxxmodules] Remove unused function declareModuleMap; This code is outdated and needs to be updated. But we anyway don't use or. test this code in any way, so let's send it to the git history were dead. code belongs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1461
https://github.com/root-project/root/pull/1461:129,testability,test,test,129,"[cxxmodules] Remove unused function declareModuleMap; This code is outdated and needs to be updated. But we anyway don't use or. test this code in any way, so let's send it to the git history were dead. code belongs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1461
https://github.com/root-project/root/pull/1462:455,integrability,sub,submitted,455,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1462:426,performance,I/O,I/O,426,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1462:310,reliability,Doe,Does,310,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1462:416,safety,test,test,416,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1462:437,safety,test,testcases,437,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1462:416,testability,test,test,416,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1462:437,testability,test,testcases,437,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1462:63,usability,support,supported,63,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1462:145,usability,support,supported,145,"JSON: implement reading of objects data; All kinds of classes, supported for writing, now also can be read from JSON. Also compressed arrays are supported. Use https://github.com/nlohmann/json parser for extract data from JSON. For the moment it made private, later one can put it in ROOT include directories. Does not work with gcc 4.8.x - replaced by dummy class. With the reading capability now is much easier to test JSON I/O. . New testcases will be submitted to roottest soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1462
https://github.com/root-project/root/pull/1463:248,deployability,patch,patch,248,"[cxxmodules] Move away from environment variable; Beside the general aversion against using an environment variable. for this setting, it also turns out that we can't easily set an. environment variable for a rootcling invocation in roottest. This patch adds the -cxxmodule flag to rootcling to allow activating. this feature without the old environment variable. For backwards. compability, we keep the ROOT_MODULES support around (for now).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1463
https://github.com/root-project/root/pull/1463:40,modifiability,variab,variable,40,"[cxxmodules] Move away from environment variable; Beside the general aversion against using an environment variable. for this setting, it also turns out that we can't easily set an. environment variable for a rootcling invocation in roottest. This patch adds the -cxxmodule flag to rootcling to allow activating. this feature without the old environment variable. For backwards. compability, we keep the ROOT_MODULES support around (for now).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1463
https://github.com/root-project/root/pull/1463:107,modifiability,variab,variable,107,"[cxxmodules] Move away from environment variable; Beside the general aversion against using an environment variable. for this setting, it also turns out that we can't easily set an. environment variable for a rootcling invocation in roottest. This patch adds the -cxxmodule flag to rootcling to allow activating. this feature without the old environment variable. For backwards. compability, we keep the ROOT_MODULES support around (for now).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1463
https://github.com/root-project/root/pull/1463:194,modifiability,variab,variable,194,"[cxxmodules] Move away from environment variable; Beside the general aversion against using an environment variable. for this setting, it also turns out that we can't easily set an. environment variable for a rootcling invocation in roottest. This patch adds the -cxxmodule flag to rootcling to allow activating. this feature without the old environment variable. For backwards. compability, we keep the ROOT_MODULES support around (for now).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1463
https://github.com/root-project/root/pull/1463:354,modifiability,variab,variable,354,"[cxxmodules] Move away from environment variable; Beside the general aversion against using an environment variable. for this setting, it also turns out that we can't easily set an. environment variable for a rootcling invocation in roottest. This patch adds the -cxxmodule flag to rootcling to allow activating. this feature without the old environment variable. For backwards. compability, we keep the ROOT_MODULES support around (for now).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1463
https://github.com/root-project/root/pull/1463:248,safety,patch,patch,248,"[cxxmodules] Move away from environment variable; Beside the general aversion against using an environment variable. for this setting, it also turns out that we can't easily set an. environment variable for a rootcling invocation in roottest. This patch adds the -cxxmodule flag to rootcling to allow activating. this feature without the old environment variable. For backwards. compability, we keep the ROOT_MODULES support around (for now).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1463
https://github.com/root-project/root/pull/1463:248,security,patch,patch,248,"[cxxmodules] Move away from environment variable; Beside the general aversion against using an environment variable. for this setting, it also turns out that we can't easily set an. environment variable for a rootcling invocation in roottest. This patch adds the -cxxmodule flag to rootcling to allow activating. this feature without the old environment variable. For backwards. compability, we keep the ROOT_MODULES support around (for now).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1463
https://github.com/root-project/root/pull/1463:417,usability,support,support,417,"[cxxmodules] Move away from environment variable; Beside the general aversion against using an environment variable. for this setting, it also turns out that we can't easily set an. environment variable for a rootcling invocation in roottest. This patch adds the -cxxmodule flag to rootcling to allow activating. this feature without the old environment variable. For backwards. compability, we keep the ROOT_MODULES support around (for now).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1463
https://github.com/root-project/root/pull/1465:4,integrability,translat,translation,4,Add translation of sql samples;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1465
https://github.com/root-project/root/pull/1465:4,interoperability,translat,translation,4,Add translation of sql samples;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1465
https://github.com/root-project/root/pull/1466:192,availability,down,downstream,192,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:174,deployability,configurat,configuration,174,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:488,deployability,build,build,488,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:1330,deployability,automat,automatically,1330,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:1401,deployability,updat,update,1401,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:458,energy efficiency,Core,Core,458,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:174,integrability,configur,configuration,174,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:45,interoperability,share,shared,45,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:1076,interoperability,standard,standard,1076,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:1188,interoperability,standard,standard,1188,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:174,modifiability,configur,configuration,174,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:404,safety,test,test,404,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:500,safety,compl,complain,500,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:551,safety,test,test,551,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:1401,safety,updat,update,1401,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:174,security,configur,configuration,174,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:500,security,compl,complain,500,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:1401,security,updat,update,1401,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:404,testability,test,test,404,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:551,testability,test,test,551,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1466:1330,testability,automat,automatically,1330,"Adding an include directory for all exported shared libraries, master branch (2017.12.14.); Hi,. This has been bugging me for a while now. 😛. ROOT has been exporting a CMake configuration for downstream projects (using ROOT) for a while now. But the exported/imported library targets at the moment can't be used with code like:. ```cmake. find_package( ROOT 6.10 REQUIRED ). add_executable( MyExecutable test.cxx ). target_link_libraries( MyExecutable ROOT::Core ). ```. In this case the build would complain that it can't find the ROOT headers that `test.cxx` may want to use. Even though the expectation against imported targets **is** that they would carry all information with them to compile any client code correctly. While the latter sentiment can take us quite far, as one could even argue that imported libraries should carry whatever compiler definitions/options the client may need with themselves, unfortunately this is not super easy to do with CMake at the moment. (For instance I don't know of a good way in which the imported library could impose the same C++ standard on the client project that ROOT was built with. While allowing the client project to use an even newer standard if needed.). So for now I'll just be satisfied making sure that at least the include directory needed by the ROOT libraries would be automatically propagated to clients wanting to link against them. This update takes care of that. Cheers,. Attila",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1466
https://github.com/root-project/root/pull/1467:56,security,secur,security,56,rootd: do not use popen() to expand path names; Address security threat reported by S. Luders. Using the same technology used in TSystem::ExpandFileName. This is a backport of commit 88ccff152604e0f1012653a596d802ff7ede3145. This is a fix for [CVE-2017-1000203](https://nvd.nist.gov/vuln/detail/CVE-2017-1000203).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1467
https://github.com/root-project/root/pull/1467:65,security,threat,threat,65,rootd: do not use popen() to expand path names; Address security threat reported by S. Luders. Using the same technology used in TSystem::ExpandFileName. This is a backport of commit 88ccff152604e0f1012653a596d802ff7ede3145. This is a fix for [CVE-2017-1000203](https://nvd.nist.gov/vuln/detail/CVE-2017-1000203).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1467
https://github.com/root-project/root/pull/1467:244,security,CVE,CVE-,244,rootd: do not use popen() to expand path names; Address security threat reported by S. Luders. Using the same technology used in TSystem::ExpandFileName. This is a backport of commit 88ccff152604e0f1012653a596d802ff7ede3145. This is a fix for [CVE-2017-1000203](https://nvd.nist.gov/vuln/detail/CVE-2017-1000203).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1467
https://github.com/root-project/root/pull/1467:274,security,nist,nist,274,rootd: do not use popen() to expand path names; Address security threat reported by S. Luders. Using the same technology used in TSystem::ExpandFileName. This is a backport of commit 88ccff152604e0f1012653a596d802ff7ede3145. This is a fix for [CVE-2017-1000203](https://nvd.nist.gov/vuln/detail/CVE-2017-1000203).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1467
https://github.com/root-project/root/pull/1467:295,security,CVE,CVE-,295,rootd: do not use popen() to expand path names; Address security threat reported by S. Luders. Using the same technology used in TSystem::ExpandFileName. This is a backport of commit 88ccff152604e0f1012653a596d802ff7ede3145. This is a fix for [CVE-2017-1000203](https://nvd.nist.gov/vuln/detail/CVE-2017-1000203).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1467
https://github.com/root-project/root/pull/1468:29,integrability,sub,sub-branches,29,"[WIP] Parallelise reading of sub-branches in TBranchElement; Re-utilise the technique used by TTree::GetEntry in order to increase the phase-space for parallelisation relying on the support of nested parallelism of TBB. These changes could allow to parallelise the reading, therewith the decompression, of trees with a single, but sophisticated, split, branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1468
https://github.com/root-project/root/pull/1468:288,modifiability,deco,decompression,288,"[WIP] Parallelise reading of sub-branches in TBranchElement; Re-utilise the technique used by TTree::GetEntry in order to increase the phase-space for parallelisation relying on the support of nested parallelism of TBB. These changes could allow to parallelise the reading, therewith the decompression, of trees with a single, but sophisticated, split, branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1468
https://github.com/root-project/root/pull/1468:6,performance,Parallel,Parallelise,6,"[WIP] Parallelise reading of sub-branches in TBranchElement; Re-utilise the technique used by TTree::GetEntry in order to increase the phase-space for parallelisation relying on the support of nested parallelism of TBB. These changes could allow to parallelise the reading, therewith the decompression, of trees with a single, but sophisticated, split, branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1468
https://github.com/root-project/root/pull/1468:151,performance,parallel,parallelisation,151,"[WIP] Parallelise reading of sub-branches in TBranchElement; Re-utilise the technique used by TTree::GetEntry in order to increase the phase-space for parallelisation relying on the support of nested parallelism of TBB. These changes could allow to parallelise the reading, therewith the decompression, of trees with a single, but sophisticated, split, branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1468
https://github.com/root-project/root/pull/1468:200,performance,parallel,parallelism,200,"[WIP] Parallelise reading of sub-branches in TBranchElement; Re-utilise the technique used by TTree::GetEntry in order to increase the phase-space for parallelisation relying on the support of nested parallelism of TBB. These changes could allow to parallelise the reading, therewith the decompression, of trees with a single, but sophisticated, split, branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1468
https://github.com/root-project/root/pull/1468:249,performance,parallel,parallelise,249,"[WIP] Parallelise reading of sub-branches in TBranchElement; Re-utilise the technique used by TTree::GetEntry in order to increase the phase-space for parallelisation relying on the support of nested parallelism of TBB. These changes could allow to parallelise the reading, therewith the decompression, of trees with a single, but sophisticated, split, branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1468
https://github.com/root-project/root/pull/1468:182,usability,support,support,182,"[WIP] Parallelise reading of sub-branches in TBranchElement; Re-utilise the technique used by TTree::GetEntry in order to increase the phase-space for parallelisation relying on the support of nested parallelism of TBB. These changes could allow to parallelise the reading, therewith the decompression, of trees with a single, but sophisticated, split, branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1468
https://github.com/root-project/root/pull/1470:24,performance,parallel,parallel,24,TTree: flush baskets in parallel if IMT is on and the tree accepts parallelism; instead of checking only if the tree accepts parallelism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1470
https://github.com/root-project/root/pull/1470:67,performance,parallel,parallelism,67,TTree: flush baskets in parallel if IMT is on and the tree accepts parallelism; instead of checking only if the tree accepts parallelism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1470
https://github.com/root-project/root/pull/1470:125,performance,parallel,parallelism,125,TTree: flush baskets in parallel if IMT is on and the tree accepts parallelism; instead of checking only if the tree accepts parallelism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1470
https://github.com/root-project/root/pull/1471:29,deployability,version,version,29,Fix FindOracle.cmake to find version 12.x;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1471
https://github.com/root-project/root/pull/1471:29,integrability,version,version,29,Fix FindOracle.cmake to find version 12.x;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1471
https://github.com/root-project/root/pull/1471:29,modifiability,version,version,29,Fix FindOracle.cmake to find version 12.x;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1471
https://github.com/root-project/root/pull/1472:28,deployability,version,version,28,"Use currently active Python version to enable Python support; If a different Python should be used, the user should pass, e.g,. `-DPYTHON_EXECUTABLE=$(which python3)` to CMake. The option python3. is no longer necessary when using Python 3.x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1472
https://github.com/root-project/root/pull/1472:4,energy efficiency,current,currently,4,"Use currently active Python version to enable Python support; If a different Python should be used, the user should pass, e.g,. `-DPYTHON_EXECUTABLE=$(which python3)` to CMake. The option python3. is no longer necessary when using Python 3.x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1472
https://github.com/root-project/root/pull/1472:28,integrability,version,version,28,"Use currently active Python version to enable Python support; If a different Python should be used, the user should pass, e.g,. `-DPYTHON_EXECUTABLE=$(which python3)` to CMake. The option python3. is no longer necessary when using Python 3.x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1472
https://github.com/root-project/root/pull/1472:28,modifiability,version,version,28,"Use currently active Python version to enable Python support; If a different Python should be used, the user should pass, e.g,. `-DPYTHON_EXECUTABLE=$(which python3)` to CMake. The option python3. is no longer necessary when using Python 3.x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1472
https://github.com/root-project/root/pull/1472:53,usability,support,support,53,"Use currently active Python version to enable Python support; If a different Python should be used, the user should pass, e.g,. `-DPYTHON_EXECUTABLE=$(which python3)` to CMake. The option python3. is no longer necessary when using Python 3.x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1472
https://github.com/root-project/root/pull/1472:104,usability,user,user,104,"Use currently active Python version to enable Python support; If a different Python should be used, the user should pass, e.g,. `-DPYTHON_EXECUTABLE=$(which python3)` to CMake. The option python3. is no longer necessary when using Python 3.x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1472
https://github.com/root-project/root/pull/1473:23,energy efficiency,Reduc,Reduce,23,"[TDF] Remove ambiguous Reduce overload; `Reduce(F f, const T &redIdentity)`. and. `Reduce(F f, std::string_view column)`. can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1473
https://github.com/root-project/root/pull/1473:41,energy efficiency,Reduc,Reduce,41,"[TDF] Remove ambiguous Reduce overload; `Reduce(F f, const T &redIdentity)`. and. `Reduce(F f, std::string_view column)`. can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1473
https://github.com/root-project/root/pull/1473:83,energy efficiency,Reduc,Reduce,83,"[TDF] Remove ambiguous Reduce overload; `Reduce(F f, const T &redIdentity)`. and. `Reduce(F f, std::string_view column)`. can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1473
https://github.com/root-project/root/pull/1473:144,energy efficiency,Reduc,Reduce,144,"[TDF] Remove ambiguous Reduce overload; `Reduce(F f, const T &redIdentity)`. and. `Reduce(F f, std::string_view column)`. can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1473
https://github.com/root-project/root/pull/1473:228,energy efficiency,adapt,adapting,228,"[TDF] Remove ambiguous Reduce overload; `Reduce(F f, const T &redIdentity)`. and. `Reduce(F f, std::string_view column)`. can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1473
https://github.com/root-project/root/pull/1473:228,integrability,adapt,adapting,228,"[TDF] Remove ambiguous Reduce overload; `Reduce(F f, const T &redIdentity)`. and. `Reduce(F f, std::string_view column)`. can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1473
https://github.com/root-project/root/pull/1473:228,interoperability,adapt,adapting,228,"[TDF] Remove ambiguous Reduce overload; `Reduce(F f, const T &redIdentity)`. and. `Reduce(F f, std::string_view column)`. can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1473
https://github.com/root-project/root/pull/1473:228,modifiability,adapt,adapting,228,"[TDF] Remove ambiguous Reduce overload; `Reduce(F f, const T &redIdentity)`. and. `Reduce(F f, std::string_view column)`. can clash. The first `Reduce` overload has been removed. A separate PR to roottest fixes `test_reduce` by adapting to this change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1473
https://github.com/root-project/root/pull/1474:40,integrability,Sub,Substitute,40,[TDF] Refactor dataframe_simple gtests; Substitute #defines and repeated #includes of the same code snippets. with fixtures and googletest's value parametrized tests. No functional change is intended.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1474
https://github.com/root-project/root/pull/1474:6,modifiability,Refact,Refactor,6,[TDF] Refactor dataframe_simple gtests; Substitute #defines and repeated #includes of the same code snippets. with fixtures and googletest's value parametrized tests. No functional change is intended.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1474
https://github.com/root-project/root/pull/1474:147,modifiability,paramet,parametrized,147,[TDF] Refactor dataframe_simple gtests; Substitute #defines and repeated #includes of the same code snippets. with fixtures and googletest's value parametrized tests. No functional change is intended.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1474
https://github.com/root-project/root/pull/1474:6,performance,Refactor,Refactor,6,[TDF] Refactor dataframe_simple gtests; Substitute #defines and repeated #includes of the same code snippets. with fixtures and googletest's value parametrized tests. No functional change is intended.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1474
https://github.com/root-project/root/pull/1474:160,safety,test,tests,160,[TDF] Refactor dataframe_simple gtests; Substitute #defines and repeated #includes of the same code snippets. with fixtures and googletest's value parametrized tests. No functional change is intended.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1474
https://github.com/root-project/root/pull/1474:160,testability,test,tests,160,[TDF] Refactor dataframe_simple gtests; Substitute #defines and repeated #includes of the same code snippets. with fixtures and googletest's value parametrized tests. No functional change is intended.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1474
https://github.com/root-project/root/pull/1475:4,availability,error,error,4,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1475:20,deployability,version,version,20,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1475:20,integrability,version,version,20,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1475:20,modifiability,version,version,20,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1475:4,performance,error,error,4,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1475:63,performance,time,time,63,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1475:4,safety,error,error,4,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1475:4,usability,error,error,4,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1475:42,usability,Clear,Clear,42,Fix error in python version of principal; Clear data row every time add a row to principal,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1475
https://github.com/root-project/root/pull/1476:4,usability,minim,minimal,4,Add minimal example for TMVA binary Classification;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1476
https://github.com/root-project/root/pull/1477:160,integrability,filter,filter,160,"Fix ROOT-9116; ""TDF: bad interaction between multi-thread execution and separate output TFile"". See [jira ticket](https://sft.its.cern.ch/jira/browse/ROOT-9116?filter=-1) for more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1477
https://github.com/root-project/root/pull/1477:45,performance,multi-thread,multi-thread,45,"Fix ROOT-9116; ""TDF: bad interaction between multi-thread execution and separate output TFile"". See [jira ticket](https://sft.its.cern.ch/jira/browse/ROOT-9116?filter=-1) for more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1477
https://github.com/root-project/root/pull/1477:25,usability,interact,interaction,25,"Fix ROOT-9116; ""TDF: bad interaction between multi-thread execution and separate output TFile"". See [jira ticket](https://sft.its.cern.ch/jira/browse/ROOT-9116?filter=-1) for more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1477
https://github.com/root-project/root/pull/1478:138,interoperability,convers,conversion,138,"Enchancement in TBufferXML; - replace all C++ macros with template parameters. - introduce ToXML/FromXML template methods to ease objects conversion. - clang-format TBufferXML code. Now TBufferXML and TBufferJSON has similar code structure. As next step, one should try to derive TBufferXML from TBuffer. If it works, one could provide common basic class for XML and JSON.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1478
https://github.com/root-project/root/pull/1478:158,interoperability,format,format,158,"Enchancement in TBufferXML; - replace all C++ macros with template parameters. - introduce ToXML/FromXML template methods to ease objects conversion. - clang-format TBufferXML code. Now TBufferXML and TBufferJSON has similar code structure. As next step, one should try to derive TBufferXML from TBuffer. If it works, one could provide common basic class for XML and JSON.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1478
https://github.com/root-project/root/pull/1478:359,interoperability,XML,XML,359,"Enchancement in TBufferXML; - replace all C++ macros with template parameters. - introduce ToXML/FromXML template methods to ease objects conversion. - clang-format TBufferXML code. Now TBufferXML and TBufferJSON has similar code structure. As next step, one should try to derive TBufferXML from TBuffer. If it works, one could provide common basic class for XML and JSON.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1478
https://github.com/root-project/root/pull/1478:67,modifiability,paramet,parameters,67,"Enchancement in TBufferXML; - replace all C++ macros with template parameters. - introduce ToXML/FromXML template methods to ease objects conversion. - clang-format TBufferXML code. Now TBufferXML and TBufferJSON has similar code structure. As next step, one should try to derive TBufferXML from TBuffer. If it works, one could provide common basic class for XML and JSON.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1478
https://github.com/root-project/root/pull/1480:84,deployability,patch,patch,84,[TDF] Throw exception if we could not deduce the type of a tree branch; Before this patch `ColumnName2ColumnTypeName` would silently return an empty string for the TTree branch type if it did not belong to one of the known listed categories (this what e.g. the cause of [ROOT-9130](ROOT-9130)).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1480
https://github.com/root-project/root/pull/1480:12,safety,except,exception,12,[TDF] Throw exception if we could not deduce the type of a tree branch; Before this patch `ColumnName2ColumnTypeName` would silently return an empty string for the TTree branch type if it did not belong to one of the known listed categories (this what e.g. the cause of [ROOT-9130](ROOT-9130)).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1480
https://github.com/root-project/root/pull/1480:84,safety,patch,patch,84,[TDF] Throw exception if we could not deduce the type of a tree branch; Before this patch `ColumnName2ColumnTypeName` would silently return an empty string for the TTree branch type if it did not belong to one of the known listed categories (this what e.g. the cause of [ROOT-9130](ROOT-9130)).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1480
https://github.com/root-project/root/pull/1480:84,security,patch,patch,84,[TDF] Throw exception if we could not deduce the type of a tree branch; Before this patch `ColumnName2ColumnTypeName` would silently return an empty string for the TTree branch type if it did not belong to one of the known listed categories (this what e.g. the cause of [ROOT-9130](ROOT-9130)).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1480
https://github.com/root-project/root/pull/1481:39,deployability,depend,dependency,39,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:144,deployability,version,version,144,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:39,integrability,depend,dependency,39,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:144,integrability,version,version,144,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:168,interoperability,compatib,compatible,168,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:193,interoperability,XML,XML,193,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:276,interoperability,XML,XML,276,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:313,interoperability,share,shared,313,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:356,interoperability,XML,XML,356,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:436,interoperability,incompatib,incompatible,436,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:460,interoperability,XML,XML,460,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:464,interoperability,format,format,464,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:39,modifiability,depend,dependency,39,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:144,modifiability,version,version,144,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:197,performance,I/O,I/O,197,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:39,safety,depend,dependency,39,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:39,testability,depend,dependency,39,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:72,testability,simpl,simply,72,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1481:72,usability,simpl,simply,72,"Derive TBufferXML from TBuffer; Remove dependency from TBufferFile. Now simply duplicate some code from TBufferFile in TBufferXML. This is last version, which is fully compatible with previous XML I/O. Next steps - introduce TBufferText class, which will be base for JSON and XML classes. Several methods will be shared between these two classes. And both XML and JSON will use text actions for objects streaming, . which may lead into incompatible changes in XML format. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1481
https://github.com/root-project/root/pull/1482:43,integrability,interfac,interface,43,[TDF] Misc fixes for the documentation and interface; This also addresses [ROOT-9124](https://sft.its.cern.ch/jira/browse/ROOT-9124),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1482
https://github.com/root-project/root/pull/1482:43,interoperability,interfac,interface,43,[TDF] Misc fixes for the documentation and interface; This also addresses [ROOT-9124](https://sft.its.cern.ch/jira/browse/ROOT-9124),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1482
https://github.com/root-project/root/pull/1482:43,modifiability,interfac,interface,43,[TDF] Misc fixes for the documentation and interface; This also addresses [ROOT-9124](https://sft.its.cern.ch/jira/browse/ROOT-9124),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1482
https://github.com/root-project/root/pull/1482:25,usability,document,documentation,25,[TDF] Misc fixes for the documentation and interface; This also addresses [ROOT-9124](https://sft.its.cern.ch/jira/browse/ROOT-9124),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1482
https://github.com/root-project/root/pull/1484:250,availability,error,error-when-running-interactively,250,Fix ROOT-9030; Tutorial scripts uses 'rand' and 'random' keywords as a name for variables which causes many online notebooks to fail. Fixes ROOT-9030. Details:. * https://root-forum.cern.ch/t/declaration-of-trandom-object-as-rand-causes-redefinition-error-when-running-interactively/26363. * https://root.cern/doc/v610/group__tutorial__hist.html. * https://sft.its.cern.ch/jira/browse/ROOT-9030,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1484
https://github.com/root-project/root/pull/1484:128,deployability,fail,fail,128,Fix ROOT-9030; Tutorial scripts uses 'rand' and 'random' keywords as a name for variables which causes many online notebooks to fail. Fixes ROOT-9030. Details:. * https://root-forum.cern.ch/t/declaration-of-trandom-object-as-rand-causes-redefinition-error-when-running-interactively/26363. * https://root.cern/doc/v610/group__tutorial__hist.html. * https://sft.its.cern.ch/jira/browse/ROOT-9030,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1484
https://github.com/root-project/root/pull/1484:80,modifiability,variab,variables,80,Fix ROOT-9030; Tutorial scripts uses 'rand' and 'random' keywords as a name for variables which causes many online notebooks to fail. Fixes ROOT-9030. Details:. * https://root-forum.cern.ch/t/declaration-of-trandom-object-as-rand-causes-redefinition-error-when-running-interactively/26363. * https://root.cern/doc/v610/group__tutorial__hist.html. * https://sft.its.cern.ch/jira/browse/ROOT-9030,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1484
https://github.com/root-project/root/pull/1484:250,performance,error,error-when-running-interactively,250,Fix ROOT-9030; Tutorial scripts uses 'rand' and 'random' keywords as a name for variables which causes many online notebooks to fail. Fixes ROOT-9030. Details:. * https://root-forum.cern.ch/t/declaration-of-trandom-object-as-rand-causes-redefinition-error-when-running-interactively/26363. * https://root.cern/doc/v610/group__tutorial__hist.html. * https://sft.its.cern.ch/jira/browse/ROOT-9030,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1484
https://github.com/root-project/root/pull/1484:128,reliability,fail,fail,128,Fix ROOT-9030; Tutorial scripts uses 'rand' and 'random' keywords as a name for variables which causes many online notebooks to fail. Fixes ROOT-9030. Details:. * https://root-forum.cern.ch/t/declaration-of-trandom-object-as-rand-causes-redefinition-error-when-running-interactively/26363. * https://root.cern/doc/v610/group__tutorial__hist.html. * https://sft.its.cern.ch/jira/browse/ROOT-9030,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1484
https://github.com/root-project/root/pull/1484:250,safety,error,error-when-running-interactively,250,Fix ROOT-9030; Tutorial scripts uses 'rand' and 'random' keywords as a name for variables which causes many online notebooks to fail. Fixes ROOT-9030. Details:. * https://root-forum.cern.ch/t/declaration-of-trandom-object-as-rand-causes-redefinition-error-when-running-interactively/26363. * https://root.cern/doc/v610/group__tutorial__hist.html. * https://sft.its.cern.ch/jira/browse/ROOT-9030,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1484
https://github.com/root-project/root/pull/1484:250,usability,error,error-when-running-interactively,250,Fix ROOT-9030; Tutorial scripts uses 'rand' and 'random' keywords as a name for variables which causes many online notebooks to fail. Fixes ROOT-9030. Details:. * https://root-forum.cern.ch/t/declaration-of-trandom-object-as-rand-causes-redefinition-error-when-running-interactively/26363. * https://root.cern/doc/v610/group__tutorial__hist.html. * https://sft.its.cern.ch/jira/browse/ROOT-9030,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1484
https://github.com/root-project/root/pull/1485:52,availability,error,errors,52,Fix for ROOT-9030 - Several notebook tutorials show errors; about `rand` redefinition,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1485
https://github.com/root-project/root/pull/1485:52,performance,error,errors,52,Fix for ROOT-9030 - Several notebook tutorials show errors; about `rand` redefinition,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1485
https://github.com/root-project/root/pull/1485:52,safety,error,errors,52,Fix for ROOT-9030 - Several notebook tutorials show errors; about `rand` redefinition,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1485
https://github.com/root-project/root/pull/1485:52,usability,error,errors,52,Fix for ROOT-9030 - Several notebook tutorials show errors; about `rand` redefinition,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1485
https://github.com/root-project/root/pull/1487:11,deployability,updat,update,11,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:300,deployability,updat,updated,300,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:322,deployability,updat,updated,322,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:119,energy efficiency,current,current,119,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:369,energy efficiency,adapt,adapting,369,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:132,integrability,messag,messages,132,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:369,integrability,adapt,adapting,369,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:132,interoperability,messag,messages,132,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:369,interoperability,adapt,adapting,369,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:0,modifiability,exten,extend,0,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:144,modifiability,exten,extended,144,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:369,modifiability,adapt,adapting,369,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:11,safety,updat,update,11,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:300,safety,updat,updated,300,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:322,safety,updat,updated,322,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:11,security,updat,update,11,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:300,security,updat,updated,300,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:322,security,updat,updated,322,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:127,usability,help,help,127,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1487:503,usability,document,documentation,503,"extend and update man pages; * replace ROOTSYS by $ROOTSYS. * import new options for `root` and `root-config` from the current help messages. * extended the explanation of `root` for macro compilation (`+`, `+O`, ...), combinations of macro and data files, combinations of macros with expressions. * updated a few URLs. * updated root-config explanation for Makefiles (adapting to built-in rules). Please check, especially the third point is based my on my regular usage of root and not on the official documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1487
https://github.com/root-project/root/pull/1488:215,interoperability,format,formats,215,"io: introduce TBufferText class; This is base class for all text-based streamers like TBufferJSON, TBufferXML and TBufferSQL2. For all these classes dedicated list of I/O actions used for object streaming. All data formats are preserved till now - all correspondent tests from roottest are working. Main motivation - decouple basic functionality from TBufferFile. . For the moment no changes done in TBufferFile, but as next step one can introduce intermediate TBufferImpl class, which will be base class for TBufferFile and TBufferText. There are many methods, which are similar and can be shared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1488
https://github.com/root-project/root/pull/1488:591,interoperability,share,shared,591,"io: introduce TBufferText class; This is base class for all text-based streamers like TBufferJSON, TBufferXML and TBufferSQL2. For all these classes dedicated list of I/O actions used for object streaming. All data formats are preserved till now - all correspondent tests from roottest are working. Main motivation - decouple basic functionality from TBufferFile. . For the moment no changes done in TBufferFile, but as next step one can introduce intermediate TBufferImpl class, which will be base class for TBufferFile and TBufferText. There are many methods, which are similar and can be shared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1488
https://github.com/root-project/root/pull/1488:317,modifiability,deco,decouple,317,"io: introduce TBufferText class; This is base class for all text-based streamers like TBufferJSON, TBufferXML and TBufferSQL2. For all these classes dedicated list of I/O actions used for object streaming. All data formats are preserved till now - all correspondent tests from roottest are working. Main motivation - decouple basic functionality from TBufferFile. . For the moment no changes done in TBufferFile, but as next step one can introduce intermediate TBufferImpl class, which will be base class for TBufferFile and TBufferText. There are many methods, which are similar and can be shared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1488
https://github.com/root-project/root/pull/1488:448,modifiability,interm,intermediate,448,"io: introduce TBufferText class; This is base class for all text-based streamers like TBufferJSON, TBufferXML and TBufferSQL2. For all these classes dedicated list of I/O actions used for object streaming. All data formats are preserved till now - all correspondent tests from roottest are working. Main motivation - decouple basic functionality from TBufferFile. . For the moment no changes done in TBufferFile, but as next step one can introduce intermediate TBufferImpl class, which will be base class for TBufferFile and TBufferText. There are many methods, which are similar and can be shared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1488
https://github.com/root-project/root/pull/1488:167,performance,I/O,I/O,167,"io: introduce TBufferText class; This is base class for all text-based streamers like TBufferJSON, TBufferXML and TBufferSQL2. For all these classes dedicated list of I/O actions used for object streaming. All data formats are preserved till now - all correspondent tests from roottest are working. Main motivation - decouple basic functionality from TBufferFile. . For the moment no changes done in TBufferFile, but as next step one can introduce intermediate TBufferImpl class, which will be base class for TBufferFile and TBufferText. There are many methods, which are similar and can be shared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1488
https://github.com/root-project/root/pull/1488:266,safety,test,tests,266,"io: introduce TBufferText class; This is base class for all text-based streamers like TBufferJSON, TBufferXML and TBufferSQL2. For all these classes dedicated list of I/O actions used for object streaming. All data formats are preserved till now - all correspondent tests from roottest are working. Main motivation - decouple basic functionality from TBufferFile. . For the moment no changes done in TBufferFile, but as next step one can introduce intermediate TBufferImpl class, which will be base class for TBufferFile and TBufferText. There are many methods, which are similar and can be shared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1488
https://github.com/root-project/root/pull/1488:266,testability,test,tests,266,"io: introduce TBufferText class; This is base class for all text-based streamers like TBufferJSON, TBufferXML and TBufferSQL2. For all these classes dedicated list of I/O actions used for object streaming. All data formats are preserved till now - all correspondent tests from roottest are working. Main motivation - decouple basic functionality from TBufferFile. . For the moment no changes done in TBufferFile, but as next step one can introduce intermediate TBufferImpl class, which will be base class for TBufferFile and TBufferText. There are many methods, which are similar and can be shared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1488
https://github.com/root-project/root/pull/1491:4,availability,Error,Error,4,Fix Error Descriptor; Fix Error Descriptor in `TTreeReaderValue::Get()` Function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1491
https://github.com/root-project/root/pull/1491:26,availability,Error,Error,26,Fix Error Descriptor; Fix Error Descriptor in `TTreeReaderValue::Get()` Function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1491
https://github.com/root-project/root/pull/1491:4,performance,Error,Error,4,Fix Error Descriptor; Fix Error Descriptor in `TTreeReaderValue::Get()` Function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1491
https://github.com/root-project/root/pull/1491:26,performance,Error,Error,26,Fix Error Descriptor; Fix Error Descriptor in `TTreeReaderValue::Get()` Function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1491
https://github.com/root-project/root/pull/1491:4,safety,Error,Error,4,Fix Error Descriptor; Fix Error Descriptor in `TTreeReaderValue::Get()` Function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1491
https://github.com/root-project/root/pull/1491:26,safety,Error,Error,26,Fix Error Descriptor; Fix Error Descriptor in `TTreeReaderValue::Get()` Function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1491
https://github.com/root-project/root/pull/1491:4,usability,Error,Error,4,Fix Error Descriptor; Fix Error Descriptor in `TTreeReaderValue::Get()` Function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1491
https://github.com/root-project/root/pull/1491:26,usability,Error,Error,26,Fix Error Descriptor; Fix Error Descriptor in `TTreeReaderValue::Get()` Function,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1491
https://github.com/root-project/root/pull/1493:839,deployability,releas,release,839,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1493:89,interoperability,socket,socket,89,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1493:431,performance,time,time,431,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1493:520,reliability,doe,does,520,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1493:89,security,soc,socket,89,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1493:387,usability,minim,minimal,387,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1493:557,usability,User,User,557,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1493:694,usability,minim,minimal,694,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1493:818,usability,close,close,818,"Improve websockets handling, let embed TWebWindow; 1. Fix several problems with longpoll socket handler. * correctly reject connection. * re-use client request to send data back from server. * if no other applied, send dummy reply to client. 2. On JavaScript side correctly handle re-connect to TWebWindow. * correctly produce URL for ws:// or http://server/root.longpoll handle. * show minimal info when connection takes too long time. 3. Add TWebWindow::GetUrl() method, which create all necessary http handlers,. but does not show window in the browser. User now can copy and paste produced URL . in any other browser - or use such URL to embed TWebWindow in any other frameowrk. 4. Provide minimal docu about TWebWindow class. 5. Provide latest JSROOT code - required for correct work of TWebWindow and longpoll,. close to final 5.4.0 release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1493
https://github.com/root-project/root/pull/1494:41,deployability,build,building,41,ROOT-7417; Check for OPENGL_LIBRARIES if building on OSX without Cocoa,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1494
https://github.com/root-project/root/pull/1495:21,deployability,build,build,21,Added 'test-periodic-build' test; implements ROOT-6884,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1495
https://github.com/root-project/root/pull/1495:7,safety,test,test-periodic-build,7,Added 'test-periodic-build' test; implements ROOT-6884,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1495
https://github.com/root-project/root/pull/1495:28,safety,test,test,28,Added 'test-periodic-build' test; implements ROOT-6884,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1495
https://github.com/root-project/root/pull/1495:7,testability,test,test-periodic-build,7,Added 'test-periodic-build' test; implements ROOT-6884,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1495
https://github.com/root-project/root/pull/1495:28,testability,test,test,28,Added 'test-periodic-build' test; implements ROOT-6884,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1495
https://github.com/root-project/root/pull/1496:4,availability,Error,Error,4,Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph; Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1496
https://github.com/root-project/root/pull/1496:66,availability,Error,Error,66,Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph; Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1496
https://github.com/root-project/root/pull/1496:4,performance,Error,Error,4,Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph; Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1496
https://github.com/root-project/root/pull/1496:66,performance,Error,Error,66,Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph; Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1496
https://github.com/root-project/root/pull/1496:4,safety,Error,Error,4,Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph; Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1496
https://github.com/root-project/root/pull/1496:66,safety,Error,Error,66,Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph; Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1496
https://github.com/root-project/root/pull/1496:4,usability,Error,Error,4,Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph; Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1496
https://github.com/root-project/root/pull/1496:66,usability,Error,Error,66,Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph; Fix Error/Info/Warning Descriptors on TGraph/TH1/TMultiGraph,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1496
https://github.com/root-project/root/pull/1497:81,energy efficiency,adapt,adapt,81,"[TDF] Fix ROOT-9122: if the regex does not match any column, throw; in addition, adapt tests accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1497
https://github.com/root-project/root/pull/1497:81,integrability,adapt,adapt,81,"[TDF] Fix ROOT-9122: if the regex does not match any column, throw; in addition, adapt tests accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1497
https://github.com/root-project/root/pull/1497:81,interoperability,adapt,adapt,81,"[TDF] Fix ROOT-9122: if the regex does not match any column, throw; in addition, adapt tests accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1497
https://github.com/root-project/root/pull/1497:81,modifiability,adapt,adapt,81,"[TDF] Fix ROOT-9122: if the regex does not match any column, throw; in addition, adapt tests accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1497
https://github.com/root-project/root/pull/1497:34,reliability,doe,does,34,"[TDF] Fix ROOT-9122: if the regex does not match any column, throw; in addition, adapt tests accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1497
https://github.com/root-project/root/pull/1497:87,safety,test,tests,87,"[TDF] Fix ROOT-9122: if the regex does not match any column, throw; in addition, adapt tests accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1497
https://github.com/root-project/root/pull/1497:87,testability,test,tests,87,"[TDF] Fix ROOT-9122: if the regex does not match any column, throw; in addition, adapt tests accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1497
https://github.com/root-project/root/pull/1498:29,usability,help,helpful,29,gfal2 really needs glib2. Be helpful to users by REQUIRE-ing it.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1498
https://github.com/root-project/root/pull/1498:40,usability,user,users,40,gfal2 really needs glib2. Be helpful to users by REQUIRE-ing it.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1498
https://github.com/root-project/root/pull/1499:320,availability,avail,available,320,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:199,deployability,build,build,199,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:269,reliability,doe,doesn,269,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:320,reliability,availab,available,320,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:320,safety,avail,available,320,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:247,security,checksum,checksums,247,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:320,security,availab,available,320,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:142,testability,simpl,simply,142,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:45,usability,support,supported,45,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1499:142,usability,simpl,simply,142,"Use HTTPS for lcgpackages; HTTPS seems to be supported just fine for this domain, but there's no 301/302 redirect from HTTP, so as-is this is simply enforcing plaintext on everyone who uses CMake to build, which is... not ideal. The use of SHA256 checksums is a 👍, but doesn't nullify every benefit of using HTTPS where available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1499
https://github.com/root-project/root/pull/1500:24,integrability,compon,components,24,Fix for ROOT-9180; If R components Rcpp and RInside are missing the 'r' option should be disabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1500
https://github.com/root-project/root/pull/1500:24,interoperability,compon,components,24,Fix for ROOT-9180; If R components Rcpp and RInside are missing the 'r' option should be disabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1500
https://github.com/root-project/root/pull/1500:24,modifiability,compon,components,24,Fix for ROOT-9180; If R components Rcpp and RInside are missing the 'r' option should be disabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1500
https://github.com/root-project/root/pull/1501:85,availability,slo,slow,85,[JupyROOT] Optimise the regexes used by the ROOT kernel; since the previous ones are slow to match in presence of long-ish strings. (about 20 characters). Thanks Enric and Enrico!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1501
https://github.com/root-project/root/pull/1501:11,energy efficiency,Optim,Optimise,11,[JupyROOT] Optimise the regexes used by the ROOT kernel; since the previous ones are slow to match in presence of long-ish strings. (about 20 characters). Thanks Enric and Enrico!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1501
https://github.com/root-project/root/pull/1501:85,reliability,slo,slow,85,[JupyROOT] Optimise the regexes used by the ROOT kernel; since the previous ones are slow to match in presence of long-ish strings. (about 20 characters). Thanks Enric and Enrico!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1501
https://github.com/root-project/root/pull/1502:249,availability,Error,Error,249,"Changing file's source code encoding to UTF-8; ```. oksana@oksana-ThinkPad-E470:~/CERN_sources/root$ file graf3d/eve/src/TEveTrans.cxx . graf3d/eve/src/TEveTrans.cxx: C source, ISO-8859 text. ```. Tiny fix for sending coverage data to coveralls.io (Error: ""source sequence is illegal/malformed utf-8""): https://github.com/okkez/coveralls-lcov/issues/12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1502
https://github.com/root-project/root/pull/1502:249,performance,Error,Error,249,"Changing file's source code encoding to UTF-8; ```. oksana@oksana-ThinkPad-E470:~/CERN_sources/root$ file graf3d/eve/src/TEveTrans.cxx . graf3d/eve/src/TEveTrans.cxx: C source, ISO-8859 text. ```. Tiny fix for sending coverage data to coveralls.io (Error: ""source sequence is illegal/malformed utf-8""): https://github.com/okkez/coveralls-lcov/issues/12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1502
https://github.com/root-project/root/pull/1502:249,safety,Error,Error,249,"Changing file's source code encoding to UTF-8; ```. oksana@oksana-ThinkPad-E470:~/CERN_sources/root$ file graf3d/eve/src/TEveTrans.cxx . graf3d/eve/src/TEveTrans.cxx: C source, ISO-8859 text. ```. Tiny fix for sending coverage data to coveralls.io (Error: ""source sequence is illegal/malformed utf-8""): https://github.com/okkez/coveralls-lcov/issues/12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1502
https://github.com/root-project/root/pull/1502:177,security,ISO,ISO-,177,"Changing file's source code encoding to UTF-8; ```. oksana@oksana-ThinkPad-E470:~/CERN_sources/root$ file graf3d/eve/src/TEveTrans.cxx . graf3d/eve/src/TEveTrans.cxx: C source, ISO-8859 text. ```. Tiny fix for sending coverage data to coveralls.io (Error: ""source sequence is illegal/malformed utf-8""): https://github.com/okkez/coveralls-lcov/issues/12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1502
https://github.com/root-project/root/pull/1502:218,testability,coverag,coverage,218,"Changing file's source code encoding to UTF-8; ```. oksana@oksana-ThinkPad-E470:~/CERN_sources/root$ file graf3d/eve/src/TEveTrans.cxx . graf3d/eve/src/TEveTrans.cxx: C source, ISO-8859 text. ```. Tiny fix for sending coverage data to coveralls.io (Error: ""source sequence is illegal/malformed utf-8""): https://github.com/okkez/coveralls-lcov/issues/12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1502
https://github.com/root-project/root/pull/1502:249,usability,Error,Error,249,"Changing file's source code encoding to UTF-8; ```. oksana@oksana-ThinkPad-E470:~/CERN_sources/root$ file graf3d/eve/src/TEveTrans.cxx . graf3d/eve/src/TEveTrans.cxx: C source, ISO-8859 text. ```. Tiny fix for sending coverage data to coveralls.io (Error: ""source sequence is illegal/malformed utf-8""): https://github.com/okkez/coveralls-lcov/issues/12.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1502
https://github.com/root-project/root/pull/1503:761,deployability,version,version,761,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1503:761,integrability,version,version,761,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1503:632,modifiability,inherit,inherited,632,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1503:761,modifiability,version,version,761,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1503:567,performance,time,time,567,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1503:85,safety,prevent,prevent,85,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1503:85,security,preven,prevent,85,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1503:110,usability,behavi,behaviours,110,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1503:248,usability,behavi,behaviour,248,"Fix ROOT-9173: add per object flag for the statsoverflow; This change is required to prevent non reproducible behaviours in a multithreaded environments. For example, if several threads change the TH1::fgStatOverflows flag and fill histograms, the behaviour. will be undefined. A getter and a setter were added to the TH1 class: TH1::GetStatOverflows and TH1::SetStatOverflows. The act on a persistent flag, fStatOverflows, which is a property of the histogram object. The flag of a object is set to the value of the global value TH1::fgStatOverflows at construction time. Every check done on the TH1::fgStatOverflows flag (also on inherited classes, namely TH1K, TH2, TH3, TProfile,. TProfile2/3D) has been replaced with one done on the data member. The class version has been increased to 8.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1503
https://github.com/root-project/root/pull/1504:4,availability,Error,Error,4,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:30,availability,Error,Error,30,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:36,availability,State,Statements,36,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:36,integrability,State,Statements,36,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:4,performance,Error,Error,4,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:30,performance,Error,Error,30,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:4,safety,Error,Error,4,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:30,safety,Error,Error,30,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:4,usability,Error,Error,4,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1504:30,usability,Error,Error,30,Fix Error Location on TH1.cxx Error Statements; New PR as discussed here (https://github.com/root-project/root/pull/1496),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1504
https://github.com/root-project/root/pull/1506:86,availability,Restor,Restore,86,Various fixes related to the change made for the RW Lock; - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash . - Add 'details' option to THashTable::Print,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1506
https://github.com/root-project/root/pull/1506:52,performance,Lock,Lock,52,Various fixes related to the change made for the RW Lock; - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash . - Add 'details' option to THashTable::Print,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1506
https://github.com/root-project/root/pull/1506:86,reliability,Restor,Restore,86,Various fixes related to the change made for the RW Lock; - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash . - Add 'details' option to THashTable::Print,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1506
https://github.com/root-project/root/pull/1506:52,security,Lock,Lock,52,Various fixes related to the change made for the RW Lock; - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash . - Add 'details' option to THashTable::Print,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1506
https://github.com/root-project/root/pull/1506:97,testability,Assert,Assert,97,Various fixes related to the change made for the RW Lock; - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash . - Add 'details' option to THashTable::Print,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1506
https://github.com/root-project/root/pull/1507:89,availability,Restor,Restore,89,Various fixes related to the change made for the RW Lock ; . - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash. - Add 'details' option to THashTable::Print.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1507
https://github.com/root-project/root/pull/1507:52,performance,Lock,Lock,52,Various fixes related to the change made for the RW Lock ; . - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash. - Add 'details' option to THashTable::Print.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1507
https://github.com/root-project/root/pull/1507:89,reliability,Restor,Restore,89,Various fixes related to the change made for the RW Lock ; . - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash. - Add 'details' option to THashTable::Print.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1507
https://github.com/root-project/root/pull/1507:52,security,Lock,Lock,52,Various fixes related to the change made for the RW Lock ; . - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash. - Add 'details' option to THashTable::Print.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1507
https://github.com/root-project/root/pull/1507:100,testability,Assert,Assert,100,Various fixes related to the change made for the RW Lock ; . - Correct TReentrantRWLock::Restore. - Assert on Add during THashTable::Rehash. - Add 'details' option to THashTable::Print.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1507
https://github.com/root-project/root/pull/1508:49,usability,document,documentation,49,[TDF] Add an image of a TDF graph to the doxygen documentation; Fix ROOT-9049 adding an image of a TDF tree to the doc,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1508
https://github.com/root-project/root/pull/1509:18,availability,error,error,18,Print instructive error message if builtin_llvm=off; Fixes bug [ROOT-9186](https://sft.its.cern.ch/jira/browse/ROOT-9186).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1509
https://github.com/root-project/root/pull/1509:24,integrability,messag,message,24,Print instructive error message if builtin_llvm=off; Fixes bug [ROOT-9186](https://sft.its.cern.ch/jira/browse/ROOT-9186).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1509
https://github.com/root-project/root/pull/1509:24,interoperability,messag,message,24,Print instructive error message if builtin_llvm=off; Fixes bug [ROOT-9186](https://sft.its.cern.ch/jira/browse/ROOT-9186).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1509
https://github.com/root-project/root/pull/1509:18,performance,error,error,18,Print instructive error message if builtin_llvm=off; Fixes bug [ROOT-9186](https://sft.its.cern.ch/jira/browse/ROOT-9186).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1509
https://github.com/root-project/root/pull/1509:18,safety,error,error,18,Print instructive error message if builtin_llvm=off; Fixes bug [ROOT-9186](https://sft.its.cern.ch/jira/browse/ROOT-9186).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1509
https://github.com/root-project/root/pull/1509:18,usability,error,error,18,Print instructive error message if builtin_llvm=off; Fixes bug [ROOT-9186](https://sft.its.cern.ch/jira/browse/ROOT-9186).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1509
https://github.com/root-project/root/pull/1510:256,deployability,API,API,256,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1510:294,deployability,version,version,294,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1510:302,deployability,updat,update,302,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1510:256,integrability,API,API,256,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1510:294,integrability,version,version,294,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1510:256,interoperability,API,API,256,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1510:294,modifiability,version,version,294,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1510:302,safety,updat,update,302,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1510:302,security,updat,update,302,"Add String Concatenation for All Integer/Float Types; In several ROOT scripts, I was having to cast to `Long_t` or to create several temporary `TString` objects to account for lack of overloads. This adds all of the missing methods. Since this adds to the API it might need to wait for a major version update.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1510
https://github.com/root-project/root/pull/1511:212,availability,reliab,reliable,212,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:23,deployability,modul,modules,23,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:92,deployability,modul,module,92,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:170,deployability,modul,module,170,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:238,deployability,fail,fail,238,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:260,deployability,modul,module,260,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:336,deployability,modul,module,336,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:18,energy efficiency,load,load,18,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:247,energy efficiency,load,load,247,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:23,modifiability,modul,modules,23,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:92,modifiability,modul,module,92,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:170,modifiability,modul,module,170,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:260,modifiability,modul,module,260,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:336,modifiability,modul,module,336,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:18,performance,load,load,18,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:247,performance,load,load,247,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:212,reliability,reliab,reliable,212,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:238,reliability,fail,fail,238,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:23,safety,modul,modules,23,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:92,safety,modul,module,92,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:170,safety,modul,module,170,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:260,safety,modul,module,260,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1511:336,safety,modul,module,336,[cxxmodules] Only load modules if one was generated; If we generate a dictionary with a C++ module with rootcling we. should write in the payload that we generated a C++ module. This way we can actually print a *reliable* warning when we fail. to load the C++ module during runtime. Without this we can only. speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1511
https://github.com/root-project/root/pull/1512:395,integrability,buffer,buffer,395,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:24,performance,memor,memory,24,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:106,performance,memor,memory,106,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:417,performance,content,content,417,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:452,reliability,doe,does,452,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:41,security,access,accessing,41,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:123,security,access,accessing,123,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:237,security,access,access,237,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:277,security,access,accessing,277,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:24,usability,memor,memory,24,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1512:106,usability,memor,memory,106,"[PyROOT] ROOT-9025: Fix memory leak when accessing an array branch; As reported in ROOT-9025, there was a memory leak when accessing a branch of a TTree in Python, that branch being of type array. The leak was actually not in the branch access itself via __getattr__, but when accessing one element of the array. This commit fixes the leak that happened when trying to retrieve a pointer to the buffer with the array content as a linear char array. It does so by adding a missing reference decrement for the array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1512
https://github.com/root-project/root/pull/1513:16,availability,state,state,16,"don't mix fUsed state between threads if fgUseStaticMinuit is false; in TMinuitMinimizer, if fgUseStaticMinuit is set to false, assignments from fgUsed (static) to fUsed (local) can mix the state between different instances. This bug was introduced 7 years ago when the USE_STATIC_TMINUIT ifdefs were removed, without conditioning all the cases on the value of fgUseStaticMinuit. This is believed to be at least partially responsible for crashes CMS is seeing at https://github.com/cms-sw/cmssw/issues/21769",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1513
https://github.com/root-project/root/pull/1513:190,availability,state,state,190,"don't mix fUsed state between threads if fgUseStaticMinuit is false; in TMinuitMinimizer, if fgUseStaticMinuit is set to false, assignments from fgUsed (static) to fUsed (local) can mix the state between different instances. This bug was introduced 7 years ago when the USE_STATIC_TMINUIT ifdefs were removed, without conditioning all the cases on the value of fgUseStaticMinuit. This is believed to be at least partially responsible for crashes CMS is seeing at https://github.com/cms-sw/cmssw/issues/21769",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1513
https://github.com/root-project/root/pull/1513:16,integrability,state,state,16,"don't mix fUsed state between threads if fgUseStaticMinuit is false; in TMinuitMinimizer, if fgUseStaticMinuit is set to false, assignments from fgUsed (static) to fUsed (local) can mix the state between different instances. This bug was introduced 7 years ago when the USE_STATIC_TMINUIT ifdefs were removed, without conditioning all the cases on the value of fgUseStaticMinuit. This is believed to be at least partially responsible for crashes CMS is seeing at https://github.com/cms-sw/cmssw/issues/21769",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1513
https://github.com/root-project/root/pull/1513:190,integrability,state,state,190,"don't mix fUsed state between threads if fgUseStaticMinuit is false; in TMinuitMinimizer, if fgUseStaticMinuit is set to false, assignments from fgUsed (static) to fUsed (local) can mix the state between different instances. This bug was introduced 7 years ago when the USE_STATIC_TMINUIT ifdefs were removed, without conditioning all the cases on the value of fgUseStaticMinuit. This is believed to be at least partially responsible for crashes CMS is seeing at https://github.com/cms-sw/cmssw/issues/21769",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1513
https://github.com/root-project/root/pull/1514:11,safety,valid,validation,11,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1514:39,safety,valid,validation,39,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1514:293,safety,valid,validation,293,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1514:11,security,validat,validation,11,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1514:39,security,validat,validation,39,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1514:293,security,validat,validation,293,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1514:144,usability,user,user-defined,144,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1514:274,usability,support,supported,274,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1514:330,usability,user,user-defined,330,"Tmva cross validation; Expanding cross validation capabilities of TMVA. - Changes default split from using bootstapping to using k-folds with a user-defined splitting criterion. - Generate ROOT files that can be analysed with TMVA Gui, both per-fold output and aggregate is supported. - Cross validation in application. Using the user-defined split function, a set of methods generated with CV can be used in the application phase with new data. This is sometimes referred to as cross evaluation. - Add tutorial for cross evaluation",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1514
https://github.com/root-project/root/pull/1515:314,deployability,instal,installed,314,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1515:342,deployability,instal,install,342,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1515:365,deployability,build,build,365,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1515:50,safety,test,test,50,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1515:77,safety,test,test,77,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1515:261,safety,test,test,261,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1515:50,testability,test,test,50,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1515:77,testability,test,test,77,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1515:261,testability,test,test,261,"Always use ROOT_ADD_TEST_SUBDIRECTORY when adding test directories; Many new test directories have been added using add_subdirectory instead of using ROOT_ADD_TEST_SUBDIRECTORY. This causes problems, since when the directory is added using add_subdirectory the test binaries are treated as normal binaries and get installed when running make install, polluting the build. This pull request changes to using ROOT_ADD_TEST_SUBDIRECTORY where appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1515
https://github.com/root-project/root/pull/1516:367,availability,avail,available,367,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:170,deployability,build,build,170,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:240,deployability,build,build,240,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:432,deployability,depend,dependency,432,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:483,deployability,depend,dependency,483,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:542,deployability,build,building,542,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:637,deployability,depend,dependency,637,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:0,energy efficiency,Reduc,Reduce,0,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:432,integrability,depend,dependency,432,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:483,integrability,depend,dependency,483,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:637,integrability,depend,dependency,637,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:432,modifiability,depend,dependency,432,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:483,modifiability,depend,dependency,483,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:637,modifiability,depend,dependency,637,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:18,performance,memor,memory,18,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:105,performance,memor,memory,105,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:211,performance,time,time,211,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:231,performance,parallel,parallel,231,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:311,performance,memor,memory,311,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:339,performance,parallel,parallel,339,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:377,performance,memor,memory,377,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:577,performance,memor,memory,577,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:617,performance,parallel,parallel,617,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:367,reliability,availab,available,367,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:367,safety,avail,available,367,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:432,safety,depend,dependency,432,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:483,safety,depend,dependency,483,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:559,safety,prevent,prevents,559,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:637,safety,depend,dependency,637,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:367,security,availab,available,367,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:559,security,preven,prevents,559,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:432,testability,depend,dependency,432,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:483,testability,depend,dependency,483,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:637,testability,depend,dependency,637,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:18,usability,memor,memory,18,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:105,usability,memor,memory,105,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:311,usability,memor,memory,311,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:377,usability,memor,memory,377,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1516:577,usability,memor,memory,577,"Reduce the needed memory for compilation; The linking of rootcling_stage1 and libCling requires a lot of memory. Since these are linked from mostly the same objects, the build is ready. to link them at the same time. If you make a parallel build this means. that the two targets that require the most amount of memory are being. linked in parallel. This exhausts the available memory, and the. computer starts swapping. This adds a dependency of one of the targets to the other. The dependency is. not really there since it is not needed for building, but it prevents the. two memory consuming targets to be built in parallel. A similar dependency existed before the code latest code changes. (see commit 2638f6fc7f54b0995f2f9d60363daaf8aae2386e), then between. rootcling and libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1516
https://github.com/root-project/root/pull/1520:721,availability,ERROR,ERROR,721,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1224,availability,ERROR,ERROR,1224,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1389,availability,error,error,1389,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1528,availability,operat,operator,1528,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:366,deployability,build,build,366,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:881,deployability,version,version,881,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1107,deployability,build,build,1107,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1591,deployability,updat,updated,1591,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1699,deployability,version,version,1699,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1740,deployability,updat,updated,1740,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1751,deployability,version,version,1751,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1966,deployability,API,API,1966,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1990,deployability,version,versions,1990,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1653,energy efficiency,load,load,1653,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1691,energy efficiency,current,current,1691,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:881,integrability,version,version,881,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1699,integrability,version,version,1699,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1751,integrability,version,version,1751,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1966,integrability,API,API,1966,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1990,integrability,version,versions,1990,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:907,interoperability,standard,standard,907,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1010,interoperability,incompatib,incompatible,1010,"e Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1966,interoperability,API,API,1966,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:25,modifiability,Pac,Packaging,25,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:79,modifiability,pac,packaging,79,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:299,modifiability,pac,packaging,299,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:358,modifiability,pac,package,358,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:425,modifiability,pac,package,425,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:881,modifiability,version,version,881,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:964,modifiability,paramet,parameters,964,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1099,modifiability,pac,package,1099,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1304,modifiability,paramet,parameters,1304,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1699,modifiability,version,version,1699,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1751,modifiability,version,version,1751,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1990,modifiability,version,versions,1990,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:51,performance,time,time,51,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:721,performance,ERROR,ERROR,721,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1224,performance,ERROR,ERROR,1224,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1389,performance,error,error,1389,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1653,performance,load,load,1653,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:636,safety,compl,complains,636,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:721,safety,ERROR,ERROR,721,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1224,safety,ERROR,ERROR,1224,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1389,safety,error,error,1389,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1591,safety,updat,updated,1591,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1740,safety,updat,updated,1740,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:636,security,compl,complains,636,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1522,security,token,token,1522,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1591,security,updat,updated,1591,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1740,security,updat,updated,1740,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:35,usability,Guid,Guidelines,35,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:402,usability,guid,guidelines,402,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:721,usability,ERROR,ERROR,721,"Jsmva issues; The Fedora Packaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1224,usability,ERROR,ERROR,1224,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1520:1389,usability,error,error,1389,"ackaging Guidelines some time ago added a section on packaging javascript files. This section says that minified scripts should be treated as compiled code. And like for programs written in other languages, pre-compiled code that is part of the sources must not be used in packaging, but must be regenerated from sources during the package build. I recently implemented these guidelines in the root package and found some issues. This pull request has three commits. 1) The word ""default"" is a reserved word in the language, and when used as a key in a dictionary it must be quoted. The yuicompressor minifier complains about this:. ```. $ yuicompressor etc/notebook/JsMVA/js/DecisionTree.js . [ERROR] in etc/notebook/JsMVA/js/DecisionTree.js. 57:24:invalid property id. ```. 2. In one place (and one place only) in the script a construct from a very new version of the javascript standard is used for defining default values to function parameters. This unnecessarily makes the code incompatible with old browsers. It also makes it hard to run the minification during the package build as both yuicompressor and uglufyjs choke on it. ```. $ yuicompressor etc/notebook/JsMVA/js/NeuralNetwork.js . [ERROR] in etc/notebook/JsMVA/js/NeuralNetwork.js. 509:75:missing ) after formal parameters. ```. ```. $ uglifyjs etc/notebook/JsMVA/js/NeuralNetwork.js -c -m. Parse error at etc/notebook/JsMVA/js/NeuralNetwork.js:509,73. = function (divid, netobj, oldStructure=false) {. ^. SyntaxError: Unexpected token operator «=», expected punc «,». ```. 3. The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1520
https://github.com/root-project/root/pull/1521:36,deployability,version,version,36,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:207,deployability,version,version,207,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:360,deployability,version,version,360,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:36,integrability,version,version,36,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:207,integrability,version,version,207,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:360,integrability,version,version,360,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:20,interoperability,specif,specific,20,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:198,interoperability,specif,specific,198,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:318,interoperability,specif,specific,318,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:36,modifiability,version,version,36,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:207,modifiability,version,version,207,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1521:360,modifiability,version,version,360,"Add option to force specific Python version; This is how the new options can be used:. * Use the default Python interpreter:. `-Dpython=ON`. * Search only for Python 3.x:. `-Dpython3=ON`. * Force a specific version of Python from $PATH:. `-Dpython=ON -Dpython_version=2.7`. `-Dpython=ON -Dpython_version=3.5`. * Use a specific Python interpreter, whatever the version:. `-Dpython=ON -DPYTHON_EXECUTABLE=/usr/local/bin/python`. Note: `PYTHON_EXECUTABLE` requires the full path to the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1521
https://github.com/root-project/root/pull/1522:423,deployability,continu,continue,423,"add python implementation of roofit tutorial; These are the translations of the corresponding C scripts as discussed with Enric. More details can be found at https://github.com/clelange/roofit. The scripts have the code in a separate function, which might not be desired, i.e. I can remove. ```. if __name__ == ""__main__"":. rf101_basics(). ```. and the enclosing function so that one could interactively run the script and continue from it e.g. in ipython. Not working (crashing) are:. - rf105. - rf508. Let me know if you would like me too add headers for notebook generation as e.g. in https://github.com/root-project/root/blob/master/tutorials/dataframe/tdf001_introduction.py#L1-L11",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1522
https://github.com/root-project/root/pull/1522:60,integrability,translat,translations,60,"add python implementation of roofit tutorial; These are the translations of the corresponding C scripts as discussed with Enric. More details can be found at https://github.com/clelange/roofit. The scripts have the code in a separate function, which might not be desired, i.e. I can remove. ```. if __name__ == ""__main__"":. rf101_basics(). ```. and the enclosing function so that one could interactively run the script and continue from it e.g. in ipython. Not working (crashing) are:. - rf105. - rf508. Let me know if you would like me too add headers for notebook generation as e.g. in https://github.com/root-project/root/blob/master/tutorials/dataframe/tdf001_introduction.py#L1-L11",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1522
https://github.com/root-project/root/pull/1522:60,interoperability,translat,translations,60,"add python implementation of roofit tutorial; These are the translations of the corresponding C scripts as discussed with Enric. More details can be found at https://github.com/clelange/roofit. The scripts have the code in a separate function, which might not be desired, i.e. I can remove. ```. if __name__ == ""__main__"":. rf101_basics(). ```. and the enclosing function so that one could interactively run the script and continue from it e.g. in ipython. Not working (crashing) are:. - rf105. - rf508. Let me know if you would like me too add headers for notebook generation as e.g. in https://github.com/root-project/root/blob/master/tutorials/dataframe/tdf001_introduction.py#L1-L11",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1522
https://github.com/root-project/root/pull/1522:390,usability,interact,interactively,390,"add python implementation of roofit tutorial; These are the translations of the corresponding C scripts as discussed with Enric. More details can be found at https://github.com/clelange/roofit. The scripts have the code in a separate function, which might not be desired, i.e. I can remove. ```. if __name__ == ""__main__"":. rf101_basics(). ```. and the enclosing function so that one could interactively run the script and continue from it e.g. in ipython. Not working (crashing) are:. - rf105. - rf508. Let me know if you would like me too add headers for notebook generation as e.g. in https://github.com/root-project/root/blob/master/tutorials/dataframe/tdf001_introduction.py#L1-L11",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1522
https://github.com/root-project/root/pull/1523:152,availability,error,error,152,Use real path to source dir when checking for roottest and rootbench (ROOT-8741); Fixes [ROOT-8741](https://sft.its.cern.ch/jira/browse/ROOT-8741). The error happens when the source directory is a symlink.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1523
https://github.com/root-project/root/pull/1523:152,performance,error,error,152,Use real path to source dir when checking for roottest and rootbench (ROOT-8741); Fixes [ROOT-8741](https://sft.its.cern.ch/jira/browse/ROOT-8741). The error happens when the source directory is a symlink.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1523
https://github.com/root-project/root/pull/1523:152,safety,error,error,152,Use real path to source dir when checking for roottest and rootbench (ROOT-8741); Fixes [ROOT-8741](https://sft.its.cern.ch/jira/browse/ROOT-8741). The error happens when the source directory is a symlink.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1523
https://github.com/root-project/root/pull/1523:152,usability,error,error,152,Use real path to source dir when checking for roottest and rootbench (ROOT-8741); Fixes [ROOT-8741](https://sft.its.cern.ch/jira/browse/ROOT-8741). The error happens when the source directory is a symlink.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1523
https://github.com/root-project/root/pull/1524:183,deployability,build,build,183,Allow setting up extra cling flags via EXTRA_CLING_ARGS env variable.; This allows us to pass in flags directly to cling such as:. -Xclang -dump-deserialized-decls or -Xclang Rmodule-build which are very. useful for debugging performance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1524
https://github.com/root-project/root/pull/1524:60,modifiability,variab,variable,60,Allow setting up extra cling flags via EXTRA_CLING_ARGS env variable.; This allows us to pass in flags directly to cling such as:. -Xclang -dump-deserialized-decls or -Xclang Rmodule-build which are very. useful for debugging performance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1524
https://github.com/root-project/root/pull/1524:226,performance,perform,performance,226,Allow setting up extra cling flags via EXTRA_CLING_ARGS env variable.; This allows us to pass in flags directly to cling such as:. -Xclang -dump-deserialized-decls or -Xclang Rmodule-build which are very. useful for debugging performance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1524
https://github.com/root-project/root/pull/1524:226,usability,perform,performance,226,Allow setting up extra cling flags via EXTRA_CLING_ARGS env variable.; This allows us to pass in flags directly to cling such as:. -Xclang -dump-deserialized-decls or -Xclang Rmodule-build which are very. useful for debugging performance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1524
https://github.com/root-project/root/pull/1525:48,interoperability,compatib,compatible,48,"Move RConfig.h to ROOT/; ... and add a backward compatible fwd header. This should fix R headers finding ROOT's headers on mac OS and us not having a way out:. Before, `-IROOT/include -IR/include` didn't work, neither did `-IR/include -IROOT/include`. Now the latter works, if ROOT's is included as `#include <ROOT/RConfig.h>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1525
https://github.com/root-project/root/pull/1526:508,availability,slo,slower,508,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:181,deployability,patch,patch,181,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:544,deployability,modul,modules,544,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:552,deployability,build,builds,552,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:576,deployability,modul,modules,576,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:651,deployability,version,version,651,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:667,deployability,patch,patch,667,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:26,energy efficiency,Reduc,Reduce,26,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:127,energy efficiency,reduc,reduce,127,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:651,integrability,version,version,651,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:544,modifiability,modul,modules,544,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:576,modifiability,modul,modules,576,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:651,modifiability,version,version,651,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:740,modifiability,scenario,scenarios,740,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:201,performance,memor,memory,201,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:266,performance,time,times,266,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:482,performance,time,time,482,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:502,performance,time,times,502,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:508,reliability,slo,slower,508,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:99,safety,review,reviews,99,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:181,safety,patch,patch,181,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:544,safety,modul,modules,544,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:576,safety,modul,modules,576,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:667,safety,patch,patch,667,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:181,security,patch,patch,181,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:667,security,patch,patch,667,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:99,testability,review,reviews,99,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:201,usability,memor,memory,201,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1526:515,usability,clear,clearly,515,"[pch][cxxmodules] D41416: Reduce deserializations template specializations; Apply [D41416](https://reviews.llvm.org/D41416) to reduce template specialization deserializations. This patch decreases the memory footprint of root startup by approx 17%. We deserialize 2 times less record types. See details [here](https://www.diffchecker.com/L2m1FE76). We cannot land D41416 in clang's trunk because in essence it replaces a liner algorithm with a quadratic one. We see the compilation time being approx 2 times slower clearly in one of the Google modules builds with approx 1000 modules with a lot of lazy specializations. While I am working on a better version of this patch, land it in our codebase because we do not have such extreme usage scenarios (yet?).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1526
https://github.com/root-project/root/pull/1527:16,energy efficiency,cloud,cloudflare,16,"Latest zlib cms cloudflare; On x86_64, for zlib 101, 106 is ~30% - ~40% and for 109 it is 4 times better, making it very close to 106! For aarch64 and aarch64+crc32 we have significant improvement ~ arriving close to lz4 rates. Replacement or PR #956 (tested on x86_64, Aarch64, Aarch64+crc32)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1527
https://github.com/root-project/root/pull/1527:92,performance,time,times,92,"Latest zlib cms cloudflare; On x86_64, for zlib 101, 106 is ~30% - ~40% and for 109 it is 4 times better, making it very close to 106! For aarch64 and aarch64+crc32 we have significant improvement ~ arriving close to lz4 rates. Replacement or PR #956 (tested on x86_64, Aarch64, Aarch64+crc32)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1527
https://github.com/root-project/root/pull/1527:252,safety,test,tested,252,"Latest zlib cms cloudflare; On x86_64, for zlib 101, 106 is ~30% - ~40% and for 109 it is 4 times better, making it very close to 106! For aarch64 and aarch64+crc32 we have significant improvement ~ arriving close to lz4 rates. Replacement or PR #956 (tested on x86_64, Aarch64, Aarch64+crc32)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1527
https://github.com/root-project/root/pull/1527:173,security,sign,significant,173,"Latest zlib cms cloudflare; On x86_64, for zlib 101, 106 is ~30% - ~40% and for 109 it is 4 times better, making it very close to 106! For aarch64 and aarch64+crc32 we have significant improvement ~ arriving close to lz4 rates. Replacement or PR #956 (tested on x86_64, Aarch64, Aarch64+crc32)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1527
https://github.com/root-project/root/pull/1527:252,testability,test,tested,252,"Latest zlib cms cloudflare; On x86_64, for zlib 101, 106 is ~30% - ~40% and for 109 it is 4 times better, making it very close to 106! For aarch64 and aarch64+crc32 we have significant improvement ~ arriving close to lz4 rates. Replacement or PR #956 (tested on x86_64, Aarch64, Aarch64+crc32)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1527
https://github.com/root-project/root/pull/1527:121,usability,close,close,121,"Latest zlib cms cloudflare; On x86_64, for zlib 101, 106 is ~30% - ~40% and for 109 it is 4 times better, making it very close to 106! For aarch64 and aarch64+crc32 we have significant improvement ~ arriving close to lz4 rates. Replacement or PR #956 (tested on x86_64, Aarch64, Aarch64+crc32)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1527
https://github.com/root-project/root/pull/1527:208,usability,close,close,208,"Latest zlib cms cloudflare; On x86_64, for zlib 101, 106 is ~30% - ~40% and for 109 it is 4 times better, making it very close to 106! For aarch64 and aarch64+crc32 we have significant improvement ~ arriving close to lz4 rates. Replacement or PR #956 (tested on x86_64, Aarch64, Aarch64+crc32)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1527
https://github.com/root-project/root/pull/1530:34,integrability,complian,compliant,34,Backport std::not_fn with a C++11 compliant implementation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1530
https://github.com/root-project/root/pull/1530:34,safety,compl,compliant,34,Backport std::not_fn with a C++11 compliant implementation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1530
https://github.com/root-project/root/pull/1530:34,security,compl,compliant,34,Backport std::not_fn with a C++11 compliant implementation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1530
https://github.com/root-project/root/pull/1532:138,deployability,log,logic,138,"Fix ROOT-9199: ""TDF: improper handling of branches with leaflists""; This fixes some wrongly handled cases in TDF's runtime type deduction logic. This PR renders #1529 obsolete.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1532
https://github.com/root-project/root/pull/1532:138,safety,log,logic,138,"Fix ROOT-9199: ""TDF: improper handling of branches with leaflists""; This fixes some wrongly handled cases in TDF's runtime type deduction logic. This PR renders #1529 obsolete.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1532
https://github.com/root-project/root/pull/1532:138,security,log,logic,138,"Fix ROOT-9199: ""TDF: improper handling of branches with leaflists""; This fixes some wrongly handled cases in TDF's runtime type deduction logic. This PR renders #1529 obsolete.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1532
https://github.com/root-project/root/pull/1532:138,testability,log,logic,138,"Fix ROOT-9199: ""TDF: improper handling of branches with leaflists""; This fixes some wrongly handled cases in TDF's runtime type deduction logic. This PR renders #1529 obsolete.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1532
https://github.com/root-project/root/pull/1534:83,deployability,updat,update,83,"Tweak documentation in TLeaf.; Based on some confusion in today's ROOT IO meeting, update the documentation in `TLeaf` to clear up `fLen` vs `fNdata` vs `fLeafCount`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1534
https://github.com/root-project/root/pull/1534:83,safety,updat,update,83,"Tweak documentation in TLeaf.; Based on some confusion in today's ROOT IO meeting, update the documentation in `TLeaf` to clear up `fLen` vs `fNdata` vs `fLeafCount`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1534
https://github.com/root-project/root/pull/1534:83,security,updat,update,83,"Tweak documentation in TLeaf.; Based on some confusion in today's ROOT IO meeting, update the documentation in `TLeaf` to clear up `fLen` vs `fNdata` vs `fLeafCount`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1534
https://github.com/root-project/root/pull/1534:6,usability,document,documentation,6,"Tweak documentation in TLeaf.; Based on some confusion in today's ROOT IO meeting, update the documentation in `TLeaf` to clear up `fLen` vs `fNdata` vs `fLeafCount`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1534
https://github.com/root-project/root/pull/1534:94,usability,document,documentation,94,"Tweak documentation in TLeaf.; Based on some confusion in today's ROOT IO meeting, update the documentation in `TLeaf` to clear up `fLen` vs `fNdata` vs `fLeafCount`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1534
https://github.com/root-project/root/pull/1534:122,usability,clear,clear,122,"Tweak documentation in TLeaf.; Based on some confusion in today's ROOT IO meeting, update the documentation in `TLeaf` to clear up `fLen` vs `fNdata` vs `fLeafCount`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1534
https://github.com/root-project/root/pull/1535:34,deployability,infrastructur,infrastructure,34,Add change with no effect to test infrastructure (not meant for merging);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1535
https://github.com/root-project/root/pull/1535:29,safety,test,test,29,Add change with no effect to test infrastructure (not meant for merging);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1535
https://github.com/root-project/root/pull/1535:29,testability,test,test,29,Add change with no effect to test infrastructure (not meant for merging);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1535
https://github.com/root-project/root/pull/1536:96,deployability,build,build,96,"[backport] Backport r323051.; Original message:. ""[cmake] Use CLANG_BINARY_DIR to determine the build directory. The patch puts the ClangConfig.cmake in the expected location when clang is. embedded into a framework.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1536
https://github.com/root-project/root/pull/1536:117,deployability,patch,patch,117,"[backport] Backport r323051.; Original message:. ""[cmake] Use CLANG_BINARY_DIR to determine the build directory. The patch puts the ClangConfig.cmake in the expected location when clang is. embedded into a framework.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1536
https://github.com/root-project/root/pull/1536:39,integrability,messag,message,39,"[backport] Backport r323051.; Original message:. ""[cmake] Use CLANG_BINARY_DIR to determine the build directory. The patch puts the ClangConfig.cmake in the expected location when clang is. embedded into a framework.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1536
https://github.com/root-project/root/pull/1536:39,interoperability,messag,message,39,"[backport] Backport r323051.; Original message:. ""[cmake] Use CLANG_BINARY_DIR to determine the build directory. The patch puts the ClangConfig.cmake in the expected location when clang is. embedded into a framework.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1536
https://github.com/root-project/root/pull/1536:117,safety,patch,patch,117,"[backport] Backport r323051.; Original message:. ""[cmake] Use CLANG_BINARY_DIR to determine the build directory. The patch puts the ClangConfig.cmake in the expected location when clang is. embedded into a framework.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1536
https://github.com/root-project/root/pull/1536:117,security,patch,patch,117,"[backport] Backport r323051.; Original message:. ""[cmake] Use CLANG_BINARY_DIR to determine the build directory. The patch puts the ClangConfig.cmake in the expected location when clang is. embedded into a framework.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1536
https://github.com/root-project/root/pull/1537:19,deployability,updat,updates,19,"[TDF] Backport doc updates to v6.12; @dpiparo feel free to close this PR if you don't think doc updates should be backported. I think it might make it easier to compare the two branches in the future if we keep them as similar as possible, and sometimes people land on the docs for v612 rather than master, and it makes sense to find the same information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1537
https://github.com/root-project/root/pull/1537:96,deployability,updat,updates,96,"[TDF] Backport doc updates to v6.12; @dpiparo feel free to close this PR if you don't think doc updates should be backported. I think it might make it easier to compare the two branches in the future if we keep them as similar as possible, and sometimes people land on the docs for v612 rather than master, and it makes sense to find the same information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1537
https://github.com/root-project/root/pull/1537:19,safety,updat,updates,19,"[TDF] Backport doc updates to v6.12; @dpiparo feel free to close this PR if you don't think doc updates should be backported. I think it might make it easier to compare the two branches in the future if we keep them as similar as possible, and sometimes people land on the docs for v612 rather than master, and it makes sense to find the same information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1537
https://github.com/root-project/root/pull/1537:96,safety,updat,updates,96,"[TDF] Backport doc updates to v6.12; @dpiparo feel free to close this PR if you don't think doc updates should be backported. I think it might make it easier to compare the two branches in the future if we keep them as similar as possible, and sometimes people land on the docs for v612 rather than master, and it makes sense to find the same information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1537
https://github.com/root-project/root/pull/1537:19,security,updat,updates,19,"[TDF] Backport doc updates to v6.12; @dpiparo feel free to close this PR if you don't think doc updates should be backported. I think it might make it easier to compare the two branches in the future if we keep them as similar as possible, and sometimes people land on the docs for v612 rather than master, and it makes sense to find the same information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1537
https://github.com/root-project/root/pull/1537:96,security,updat,updates,96,"[TDF] Backport doc updates to v6.12; @dpiparo feel free to close this PR if you don't think doc updates should be backported. I think it might make it easier to compare the two branches in the future if we keep them as similar as possible, and sometimes people land on the docs for v612 rather than master, and it makes sense to find the same information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1537
https://github.com/root-project/root/pull/1537:59,usability,close,close,59,"[TDF] Backport doc updates to v6.12; @dpiparo feel free to close this PR if you don't think doc updates should be backported. I think it might make it easier to compare the two branches in the future if we keep them as similar as possible, and sometimes people land on the docs for v612 rather than master, and it makes sense to find the same information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1537
https://github.com/root-project/root/pull/1538:26,testability,Simpl,Simple,26,[TDF] Backport tdf fixes; Simple backport of the latest fixes that landed in master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1538
https://github.com/root-project/root/pull/1538:26,usability,Simpl,Simple,26,[TDF] Backport tdf fixes; Simple backport of the latest fixes that landed in master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1538
https://github.com/root-project/root/pull/1539:38,usability,document,documentation,38,[TypeTraits] Fix TakeFirstParameter_t documentation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1539
https://github.com/root-project/root/pull/1540:38,usability,document,documentation,38,[TypeTraits] Fix TakeFirstParameter_t documentation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1540
https://github.com/root-project/root/pull/1541:144,modifiability,variab,variable,144,[TDF] Fix for ROOT-9207; do not sort alphabetically the branches of the tree(s) associated to the. tdf. This can lead to trouble in presence of variable size arrays and. snapshot: the leafcount must always be present when crating a variable. size array branch referring to it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1541
https://github.com/root-project/root/pull/1541:232,modifiability,variab,variable,232,[TDF] Fix for ROOT-9207; do not sort alphabetically the branches of the tree(s) associated to the. tdf. This can lead to trouble in presence of variable size arrays and. snapshot: the leafcount must always be present when crating a variable. size array branch referring to it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1541
https://github.com/root-project/root/pull/1542:37,usability,user,user,37,[DOC] Fix Alias example usage in TDF user guide;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1542
https://github.com/root-project/root/pull/1542:42,usability,guid,guide,42,[DOC] Fix Alias example usage in TDF user guide;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1542
https://github.com/root-project/root/pull/1543:21,safety,valid,validate,21,[TDF] Fix ROOT-9210: validate columns before snapshotting;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1543
https://github.com/root-project/root/pull/1543:21,security,validat,validate,21,[TDF] Fix ROOT-9210: validate columns before snapshotting;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1543
https://github.com/root-project/root/pull/1544:6,availability,Sli,Slim,6,[WIP] Slim down man; This PR is meant to slim down the man pages while feedback from experts is collected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1544
https://github.com/root-project/root/pull/1544:11,availability,down,down,11,[WIP] Slim down man; This PR is meant to slim down the man pages while feedback from experts is collected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1544
https://github.com/root-project/root/pull/1544:41,availability,sli,slim,41,[WIP] Slim down man; This PR is meant to slim down the man pages while feedback from experts is collected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1544
https://github.com/root-project/root/pull/1544:46,availability,down,down,46,[WIP] Slim down man; This PR is meant to slim down the man pages while feedback from experts is collected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1544
https://github.com/root-project/root/pull/1544:6,reliability,Sli,Slim,6,[WIP] Slim down man; This PR is meant to slim down the man pages while feedback from experts is collected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1544
https://github.com/root-project/root/pull/1544:41,reliability,sli,slim,41,[WIP] Slim down man; This PR is meant to slim down the man pages while feedback from experts is collected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1544
https://github.com/root-project/root/pull/1544:71,usability,feedback,feedback,71,[WIP] Slim down man; This PR is meant to slim down the man pages while feedback from experts is collected.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1544
https://github.com/root-project/root/pull/1545:28,usability,document,documentation,28,[DOC] Small improvements to documentation of legacy code;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1545
https://github.com/root-project/root/pull/1546:534,availability,down,down,534,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:715,availability,sli,slight,715,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:514,deployability,version,version,514,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:646,deployability,version,version,646,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:1451,energy efficiency,green,green,1451,"olormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author. [1] https://github.com/fiji/fiji/blob/master/luts/cividis.txt. [2] https://github.com/plotly/plotly.py/pull/883",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:1931,energy efficiency,green,green,1931,"olormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author. [1] https://github.com/fiji/fiji/blob/master/luts/cividis.txt. [2] https://github.com/plotly/plotly.py/pull/883",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:514,integrability,version,version,514,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:646,integrability,version,version,646,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:514,modifiability,version,version,514,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:646,modifiability,version,version,646,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:715,reliability,sli,slight,715,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:1994,security,auth,author,1994,"olormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author. [1] https://github.com/fiji/fiji/blob/master/luts/cividis.txt. [2] https://github.com/plotly/plotly.py/pull/883",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:452,usability,stop,stops,452,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:495,usability,stop,stops,495,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:548,usability,stop,stops,548,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:640,usability,stop,stop,640,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1546:855,usability,stop,stops,855,"Add cividis colormap; This adds **cividis** as 113th colormap to TColor, as well as the palettes tutorial. This colormap aims to solve problems that people with **color vision deficiency** have with the common colormaps. For more details see:. Nuñez J, Anderton C, and Renslow R. _Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data._. https://arxiv.org/abs/1712.01662. The colormap stops have been interpolated from the (256 stops) Fiji/ImageJ version [1] and cut down to the 9 stops that ROOT uses (using the scipy Akima interpolator). Alternatively, the official* (18 stop) version committed to plotly.py [2] could be used, which would mean a slight deviation from the other palettes (see code below). In the plot produced by the palette tutorial the difference between the 9 and 18 stops seems negligible, hence sticking to the ROOT default values seems appropriate. Double_t cstps[18] = {0.0, 0.0588235294118, 0.117647058824, 0.176470588235, 0.235294117647, 0.294117647059, 0.352941176471, 0.411764705882, 0.470588235294, 0.529411764706, 0.588235294118, 0.647058823529, 0.705882352941, 0.764705882353, 0.823529411765, 0.882352941176, 0.941176470588, 1.0};. Double_t red[18] = { 0./255., 0./255., 0./255., 39./255., 60./255., 76./255., 91./255., 104./255., 117./255., 131./255., 146./255., 161./255., 176./255., 192./255., 209./255., 225./255., 243./255., 255./255.};. Double_t green[18] = { 32./255., 42./255., 52./255., 63./255., 74./255., 85./255., 95./255., 106./255., 117./255., 129./255., 140./255., 152./255., 165./255., 177./255., 191./255., 204./255., 219./255., 233./255.};. Double_t blue[18] = { 76./255., 102./255., 110./255., 108./255., 107./255., 107./255., 109./255., 112./255., 117./255., 120./255., 120./255., 118./255., 114./255., 109./255., 102./255., 92./255., 79./255., 69./255.};. Idx = TColor::CreateGradientColorTable(18, cstps, red, green, blue, 255, alpha); . *Meaning committed by the original author",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1546
https://github.com/root-project/root/pull/1547:128,energy efficiency,load,load,128,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:388,energy efficiency,load,load,388,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:541,energy efficiency,load,load,541,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1163,energy efficiency,load,loading,1163,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1538,energy efficiency,load,loading,1538,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:36,integrability,inject,injects,36,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:128,performance,load,load,128,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:388,performance,load,load,388,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:541,performance,load,load,541,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:555,performance,content,contents,555,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1140,performance,perform,performance,1140,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1163,performance,load,loading,1163,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1538,performance,load,loading,1538,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1572,performance,perform,performance,1572,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1058,reliability,pra,practically,1058,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1399,safety,review,reviews,1399,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:36,security,inject,injects,36,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1286,testability,context,context,1286,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1399,testability,review,reviews,1399,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:181,usability,user,users,181,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1140,usability,perform,performance,1140,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1547:1572,usability,perform,performance,1572,"Autoload canonical namespaces; ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,. ```cpp. // rootmap file. namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code. namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3. ```. `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1547
https://github.com/root-project/root/pull/1548:112,availability,error,error-due-to-comment-at-end-of-file,112,xml: fix problem with xml comments at the end of file; Reported here:. https://root-forum.cern.ch/t/gdml-import-error-due-to-comment-at-end-of-file/27671. Can be also applied for 6.12 and 6.10 branches,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1548
https://github.com/root-project/root/pull/1548:0,interoperability,xml,xml,0,xml: fix problem with xml comments at the end of file; Reported here:. https://root-forum.cern.ch/t/gdml-import-error-due-to-comment-at-end-of-file/27671. Can be also applied for 6.12 and 6.10 branches,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1548
https://github.com/root-project/root/pull/1548:22,interoperability,xml,xml,22,xml: fix problem with xml comments at the end of file; Reported here:. https://root-forum.cern.ch/t/gdml-import-error-due-to-comment-at-end-of-file/27671. Can be also applied for 6.12 and 6.10 branches,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1548
https://github.com/root-project/root/pull/1548:112,performance,error,error-due-to-comment-at-end-of-file,112,xml: fix problem with xml comments at the end of file; Reported here:. https://root-forum.cern.ch/t/gdml-import-error-due-to-comment-at-end-of-file/27671. Can be also applied for 6.12 and 6.10 branches,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1548
https://github.com/root-project/root/pull/1548:112,safety,error,error-due-to-comment-at-end-of-file,112,xml: fix problem with xml comments at the end of file; Reported here:. https://root-forum.cern.ch/t/gdml-import-error-due-to-comment-at-end-of-file/27671. Can be also applied for 6.12 and 6.10 branches,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1548
https://github.com/root-project/root/pull/1548:112,usability,error,error-due-to-comment-at-end-of-file,112,xml: fix problem with xml comments at the end of file; Reported here:. https://root-forum.cern.ch/t/gdml-import-error-due-to-comment-at-end-of-file/27671. Can be also applied for 6.12 and 6.10 branches,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1548
https://github.com/root-project/root/pull/1549:0,interoperability,xml,xml,0,xml: comments at the end of the file in 6.12 branch; similar to #1548,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1549
https://github.com/root-project/root/pull/1550:0,interoperability,xml,xml,0,"xml: fix problem with comments at the end of the file in v6.10 branch; While formatting of sources was changed dramatically, pick only bug fix from #1548",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1550
https://github.com/root-project/root/pull/1550:77,interoperability,format,formatting,77,"xml: fix problem with comments at the end of the file in v6.10 branch; While formatting of sources was changed dramatically, pick only bug fix from #1548",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1550
https://github.com/root-project/root/pull/1551:6,usability,Document,Document,6,[TDF] Document TColumnValue::Get (NFC);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1551
https://github.com/root-project/root/pull/1552:22,deployability,patch,patches,22,[TDF] Backport latest patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1552
https://github.com/root-project/root/pull/1552:22,safety,patch,patches,22,[TDF] Backport latest patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1552
https://github.com/root-project/root/pull/1552:22,security,patch,patches,22,[TDF] Backport latest patches;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1552
https://github.com/root-project/root/pull/1555:18,performance,memor,memory,18,"[PyROOT] Backport memory leak fix (ROOT-9025); Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1555
https://github.com/root-project/root/pull/1555:133,performance,memor,memory,133,"[PyROOT] Backport memory leak fix (ROOT-9025); Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1555
https://github.com/root-project/root/pull/1555:52,safety,test,tested,52,"[PyROOT] Backport memory leak fix (ROOT-9025); Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1555
https://github.com/root-project/root/pull/1555:150,security,access,accessing,150,"[PyROOT] Backport memory leak fix (ROOT-9025); Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1555
https://github.com/root-project/root/pull/1555:52,testability,test,tested,52,"[PyROOT] Backport memory leak fix (ROOT-9025); Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1555
https://github.com/root-project/root/pull/1555:18,usability,memor,memory,18,"[PyROOT] Backport memory leak fix (ROOT-9025); Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1555
https://github.com/root-project/root/pull/1555:133,usability,memor,memory,133,"[PyROOT] Backport memory leak fix (ROOT-9025); Once tested with the previous push to master, this backports the fix for ROOT-9025: a memory leak when accessing a branch of a TTree in Python, that branch being of type array.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1555
https://github.com/root-project/root/pull/1557:6,usability,Document,Document,6,[DOC] Document TTreeReaderValue::Get;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1557
https://github.com/root-project/root/pull/1558:98,energy efficiency,optim,optimises,98,[TDF] Fix ROOT-9219; This PR fixes [ROOT-9219](https://sft.its.cern.ch/jira/browse/ROOT-9219) and optimises and streamlines the access to columns. A test was of course added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1558
https://github.com/root-project/root/pull/1558:149,safety,test,test,149,[TDF] Fix ROOT-9219; This PR fixes [ROOT-9219](https://sft.its.cern.ch/jira/browse/ROOT-9219) and optimises and streamlines the access to columns. A test was of course added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1558
https://github.com/root-project/root/pull/1558:128,security,access,access,128,[TDF] Fix ROOT-9219; This PR fixes [ROOT-9219](https://sft.its.cern.ch/jira/browse/ROOT-9219) and optimises and streamlines the access to columns. A test was of course added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1558
https://github.com/root-project/root/pull/1558:149,testability,test,test,149,[TDF] Fix ROOT-9219; This PR fixes [ROOT-9219](https://sft.its.cern.ch/jira/browse/ROOT-9219) and optimises and streamlines the access to columns. A test was of course added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1558
https://github.com/root-project/root/pull/1560:10,safety,test,test,10,[TDF] Add test for Snapshotting of branches with custom titles;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1560
https://github.com/root-project/root/pull/1560:10,testability,test,test,10,[TDF] Add test for Snapshotting of branches with custom titles;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1560
https://github.com/root-project/root/pull/1560:49,usability,custom,custom,49,[TDF] Add test for Snapshotting of branches with custom titles;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1560
https://github.com/root-project/root/pull/1561:10,safety,test,test,10,[TDF] Add test for Snapshotting of branches with custom titles;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1561
https://github.com/root-project/root/pull/1561:10,testability,test,test,10,[TDF] Add test for Snapshotting of branches with custom titles;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1561
https://github.com/root-project/root/pull/1561:49,usability,custom,custom,49,[TDF] Add test for Snapshotting of branches with custom titles;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1561
https://github.com/root-project/root/pull/1562:170,deployability,build,buildid,170,Revert changes to TH1 for setting BarWidth and BarOffset; The changes are backward incompatible (they break [some tutorials](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086)) and also change the class layout in a way that breaks the test [`root/io/filemerger`](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086) in [roottest](https://github.com/root-project/roottest).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1562
https://github.com/root-project/root/pull/1562:318,deployability,build,buildid,318,Revert changes to TH1 for setting BarWidth and BarOffset; The changes are backward incompatible (they break [some tutorials](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086)) and also change the class layout in a way that breaks the test [`root/io/filemerger`](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086) in [roottest](https://github.com/root-project/roottest).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1562
https://github.com/root-project/root/pull/1562:83,interoperability,incompatib,incompatible,83,Revert changes to TH1 for setting BarWidth and BarOffset; The changes are backward incompatible (they break [some tutorials](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086)) and also change the class layout in a way that breaks the test [`root/io/filemerger`](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086) in [roottest](https://github.com/root-project/roottest).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1562
https://github.com/root-project/root/pull/1562:245,safety,test,test,245,Revert changes to TH1 for setting BarWidth and BarOffset; The changes are backward incompatible (they break [some tutorials](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086)) and also change the class layout in a way that breaks the test [`root/io/filemerger`](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086) in [roottest](https://github.com/root-project/roottest).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1562
https://github.com/root-project/root/pull/1562:245,testability,test,test,245,Revert changes to TH1 for setting BarWidth and BarOffset; The changes are backward incompatible (they break [some tutorials](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086)) and also change the class layout in a way that breaks the test [`root/io/filemerger`](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086) in [roottest](https://github.com/root-project/roottest).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1562
https://github.com/root-project/root/pull/1563:0,deployability,Integr,Integrate,0,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:63,deployability,automat,automatic,63,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:0,integrability,Integr,Integrate,0,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:160,integrability,coupl,coupled,160,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:185,integrability,transform,transformation,185,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:0,interoperability,Integr,Integrate,0,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:30,interoperability,plug,plugin,30,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:185,interoperability,transform,transformation,185,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:0,modifiability,Integr,Integrate,0,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:160,modifiability,coupl,coupled,160,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:0,reliability,Integr,Integrate,0,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:0,security,Integr,Integrate,0,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:0,testability,Integr,Integrate,0,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:63,testability,automat,automatic,63,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:160,testability,coupl,coupled,160,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1563:92,usability,user,user-defined,92,"Integrate clad; clad is a C++ plugin for clang that implements automatic differentiation of user-defined functions by employing the chain rule in forward mode, coupled with source code transformation and AST constant fold.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1563
https://github.com/root-project/root/pull/1564:116,performance,lock,lock,116,"Cling unlock depth; Do not reset the mutex to 0 readers, 0 writers, but to wherever the mutex was before entering a lock frame related to user code interpretation (which might in turn trigger a call to the interpreter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1564
https://github.com/root-project/root/pull/1564:116,security,lock,lock,116,"Cling unlock depth; Do not reset the mutex to 0 readers, 0 writers, but to wherever the mutex was before entering a lock frame related to user code interpretation (which might in turn trigger a call to the interpreter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1564
https://github.com/root-project/root/pull/1564:138,usability,user,user,138,"Cling unlock depth; Do not reset the mutex to 0 readers, 0 writers, but to wherever the mutex was before entering a lock frame related to user code interpretation (which might in turn trigger a call to the interpreter).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1564
https://github.com/root-project/root/pull/1566:130,deployability,build,buildid,130,"Drop deprecated register storage class from libAfterImage; Fix for these warnings: http://cdash.cern.ch/viewBuildError.php?type=1&buildid=454389. No functional change otherwise. I still need to test that with external libAfterImage this is not a problem, so please let me merge this myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1566
https://github.com/root-project/root/pull/1566:194,safety,test,test,194,"Drop deprecated register storage class from libAfterImage; Fix for these warnings: http://cdash.cern.ch/viewBuildError.php?type=1&buildid=454389. No functional change otherwise. I still need to test that with external libAfterImage this is not a problem, so please let me merge this myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1566
https://github.com/root-project/root/pull/1566:194,testability,test,test,194,"Drop deprecated register storage class from libAfterImage; Fix for these warnings: http://cdash.cern.ch/viewBuildError.php?type=1&buildid=454389. No functional change otherwise. I still need to test that with external libAfterImage this is not a problem, so please let me merge this myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1566
https://github.com/root-project/root/pull/1567:27,testability,context,context,27,Move C headers in extern C context.; This fixes a few 'deprecated register' warnings.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1567
https://github.com/root-project/root/pull/1568:123,availability,failur,failures,123,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:61,deployability,integr,integrated,61,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:123,deployability,fail,failures,123,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:201,deployability,build,build,201,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:375,deployability,BUILD,BUILDTYPE,375,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:571,deployability,patch,patch,571,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:61,integrability,integr,integrated,61,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:598,integrability,discover,discovered,598,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:61,interoperability,integr,integrated,61,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:598,interoperability,discover,discovered,598,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:61,modifiability,integr,integrated,61,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:34,performance,memor,memory,34,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:123,performance,failur,failures,123,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:61,reliability,integr,integrated,61,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:123,reliability,fail,failures,123,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:5,safety,Test,TestCrossValidationSerialise,5,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:78,safety,valid,validation,78,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:213,safety,test,testReport,213,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:246,safety,test,test,246,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:425,safety,test,testReport,425,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:458,safety,test,test,458,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:571,safety,patch,patch,571,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:61,security,integr,integrated,61,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:78,security,validat,validation,78,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:571,security,patch,patch,571,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:5,testability,Test,TestCrossValidationSerialise,5,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:61,testability,integr,integrated,61,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:213,testability,test,testReport,213,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:246,testability,test,test,246,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:425,testability,test,testReport,425,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:458,testability,test,test,458,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:34,usability,memor,memory,34,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1568:598,usability,discov,discovered,598,"TMVA TestCrossValidationSerialise memory handling; The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1568
https://github.com/root-project/root/pull/1569:89,availability,slo,slow,89,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:412,availability,slo,slowed,412,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:419,availability,down,down,419,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:201,deployability,BUILD,BUILD,201,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:246,deployability,version,version,246,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:278,deployability,version,version,278,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:368,deployability,depend,dependent,368,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:466,deployability,build,builds,466,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:315,energy efficiency,cpu,cpu,315,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:246,integrability,version,version,246,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:278,integrability,version,version,278,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:368,integrability,depend,dependent,368,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:246,modifiability,version,version,246,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:278,modifiability,version,version,278,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:368,modifiability,depend,dependent,368,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:227,performance,time,time,227,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:315,performance,cpu,cpu,315,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:568,performance,cach,cached,568,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:89,reliability,slo,slow,89,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:412,reliability,slo,slowed,412,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:368,safety,depend,dependent,368,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:368,testability,depend,dependent,368,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1569:292,usability,user,user,292,"Improve FindRoot speed; For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash. [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version. 6.13/01. root-config --version 0.24s user 1.06s system 131% cpu 0.989 total. ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1569
https://github.com/root-project/root/pull/1571:418,deployability,automat,automated,418,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:450,deployability,build,build,450,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:587,deployability,automat,automatically,587,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:233,energy efficiency,Current,Currently,233,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:40,modifiability,pac,packages,40,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:117,modifiability,pac,packages,117,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:223,modifiability,pac,packages,223,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:309,performance,time,time,309,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:291,safety,test,testing,291,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:291,testability,test,testing,291,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:418,testability,automat,automated,418,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:587,testability,automat,automatically,587,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1571:0,usability,Prototyp,Prototype,0,"Prototype for new mechanism for builtin packages in ROOT; This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1571
https://github.com/root-project/root/pull/1572:76,safety,avoid,avoid,76,Handle CXXDeductionGuide in ReSubstTemplateArg.; This fixes ROOT-9147. Also avoid future cases of nullptr dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1572
https://github.com/root-project/root/pull/1573:9272,availability,error,error,9272,"00100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9489,availability,error,error,9489,"eter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9623,availability,error,error,9623," Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9800,availability,error,error,9800,"00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThrea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:10174,availability,error,error,10174,"00000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x0000700009f18898) at condition_variable:202. frame #4: 0x0000000100f697b4 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:293,deployability,Updat,Update,293,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:320,deployability,updat,update,320,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:842,deployability,Updat,Update,842,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1479,deployability,Updat,Update,1479,"ing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1589,deployability,Updat,UpdateWindow,1589,"thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1806,deployability,Updat,Update,1806,"e reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x00007ff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9207,deployability,build,build,9207,"92a libCling.so`cling::Interpreter::EvaluateInternal(this=0x0000000100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9424,deployability,build,build,9424,"pp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:4162,energy efficiency,load,load,4162,"is=0x0000000122753a28, __lock=0x00007fff5fbf5cf8, __pred=(anonymous class) @ 0x00007fff5fbf5e08)::'lambda'()) at condition_variable:211. frame #5: 0x0000000100f68857 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock(this=0x00000001227539d8) at TReentrantRWLock.cxx:95. frame #6: 0x0000000100f5c719 libThread.so`ROOT::TRWMutexImp<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock(this=0x00000001227539d0) at TRWMutexImp.cxx:33. frame #7: 0x00000001000f52d1 libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:89. frame #8: 0x00000001000f275d libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:88. frame #9: 0x00000001002fcebf libCore.so`THashTable::FindObject(this=0x0000000100b0e120, name=""TGTextView"") const at THashTable.cxx:242. frame #10: 0x00000001003a67fd libCore.so`TClass::GetClass(name=""TGTextView"", load=true, silent=true) at TClass.cxx:2900. frame #11: 0x00000001003c9e16 libCore.so`TClass::InheritsFrom(this=0x0000000118fe1250, classname=""TGTextView"") const at TClass.cxx:4683. frame #12: 0x000000010024cb6e libCore.so`TObject::InheritsFrom(this=0x0000000126908de0, classname=""TGTextView"") const at TObject.cxx:445. frame #13: 0x000000011c03e47f libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(viewID=116) at QuartzWindow.mm:899. frame #14: 0x000000011c03e518 libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(view=0x0000000126908ee0) at QuartzWindow.mm:907. frame #15: 0x000000011c04706c libGCocoa.so`::-[QuartzView drawRect:](self=0x0000000126908ee0, _cmd=""drawRect:"", dirtyRect=(origin = (x = 0, y = 0), size = (width = 29, height = 21))) at QuartzWindow.mm:2728. frame #16: 0x00007fff934a4f99 AppKit`-[NSView _drawRect:clip:] + 2276. frame #17: 0x00007fff934f4f2f AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 1753. frame #18: 0x00007fff934f539a AppKit`-[NSView _recursiveDispla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:4778,energy efficiency,draw,drawRect,4778,"RWMutex.h:89. frame #8: 0x00000001000f275d libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:88. frame #9: 0x00000001002fcebf libCore.so`THashTable::FindObject(this=0x0000000100b0e120, name=""TGTextView"") const at THashTable.cxx:242. frame #10: 0x00000001003a67fd libCore.so`TClass::GetClass(name=""TGTextView"", load=true, silent=true) at TClass.cxx:2900. frame #11: 0x00000001003c9e16 libCore.so`TClass::InheritsFrom(this=0x0000000118fe1250, classname=""TGTextView"") const at TClass.cxx:4683. frame #12: 0x000000010024cb6e libCore.so`TObject::InheritsFrom(this=0x0000000126908de0, classname=""TGTextView"") const at TObject.cxx:445. frame #13: 0x000000011c03e47f libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(viewID=116) at QuartzWindow.mm:899. frame #14: 0x000000011c03e518 libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(view=0x0000000126908ee0) at QuartzWindow.mm:907. frame #15: 0x000000011c04706c libGCocoa.so`::-[QuartzView drawRect:](self=0x0000000126908ee0, _cmd=""drawRect:"", dirtyRect=(origin = (x = 0, y = 0), size = (width = 29, height = 21))) at QuartzWindow.mm:2728. frame #16: 0x00007fff934a4f99 AppKit`-[NSView _drawRect:clip:] + 2276. frame #17: 0x00007fff934f4f2f AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 1753. frame #18: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #19: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #20: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #21: 0x00007fff934a2ad2 AppKit`-[NSView _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 837. frame #22: 0x00007fff934a22af AppKit`-[NSThemeFrame _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 334. frame #23: 0x00007fff934a06d8 AppKit`-[NSView _displayRectIgnoringOpaci",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:4820,energy efficiency,draw,drawRect,4820," libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:88. frame #9: 0x00000001002fcebf libCore.so`THashTable::FindObject(this=0x0000000100b0e120, name=""TGTextView"") const at THashTable.cxx:242. frame #10: 0x00000001003a67fd libCore.so`TClass::GetClass(name=""TGTextView"", load=true, silent=true) at TClass.cxx:2900. frame #11: 0x00000001003c9e16 libCore.so`TClass::InheritsFrom(this=0x0000000118fe1250, classname=""TGTextView"") const at TClass.cxx:4683. frame #12: 0x000000010024cb6e libCore.so`TObject::InheritsFrom(this=0x0000000126908de0, classname=""TGTextView"") const at TObject.cxx:445. frame #13: 0x000000011c03e47f libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(viewID=116) at QuartzWindow.mm:899. frame #14: 0x000000011c03e518 libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(view=0x0000000126908ee0) at QuartzWindow.mm:907. frame #15: 0x000000011c04706c libGCocoa.so`::-[QuartzView drawRect:](self=0x0000000126908ee0, _cmd=""drawRect:"", dirtyRect=(origin = (x = 0, y = 0), size = (width = 29, height = 21))) at QuartzWindow.mm:2728. frame #16: 0x00007fff934a4f99 AppKit`-[NSView _drawRect:clip:] + 2276. frame #17: 0x00007fff934f4f2f AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 1753. frame #18: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #19: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #20: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #21: 0x00007fff934a2ad2 AppKit`-[NSView _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 837. frame #22: 0x00007fff934a22af AppKit`-[NSThemeFrame _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 334. frame #23: 0x00007fff934a06d8 AppKit`-[NSView _displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:6132,energy efficiency,current,currentDisplayCycle,6132,SView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #19: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #20: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #21: 0x00007fff934a2ad2 AppKit`-[NSView _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 837. frame #22: 0x00007fff934a22af AppKit`-[NSThemeFrame _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 334. frame #23: 0x00007fff934a06d8 AppKit`-[NSView _displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:] + 2452. frame #24: 0x00007fff9349bfca AppKit`-[NSView displayIfNeeded] + 1748. frame #25: 0x00007fff9349b8db AppKit`-[NSWindow displayIfNeeded] + 230. frame #26: 0x00007fff93bfbcb4 AppKit`___NSWindowGetDisplayCycleObserver_block_invoke.6228 + 277. frame #27: 0x00007fff9349b3b9 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke + 454. frame #28: 0x00007fff9b384cc6 QuartzCore`CA::Transaction::run_commit_handlers(CATransactionPhase) + 46. frame #29: 0x00007fff9b48e8ac QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 160. frame #30: 0x00007fff9b3837a1 QuartzCore`CA::Transaction::commit() + 475. frame #31: 0x00007fff9377e8b1 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke.31 + 323. frame #32: 0x00007fff95874d37 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23. frame #33: 0x00007fff95874ca7 CoreFoundation`__CFRunLoopDoObservers + 391. frame #34: 0x00007fff958556d9 CoreFoundation`__CFRunLoopRun + 873. frame #35: 0x00007fff95855114 CoreFoundation`CFRunLoopRunSpecific + 420. frame #36: 0x00007fff94db5ebc HIToolbox`RunCurrentEventLoopInMode + 240. frame #37: 0x00007fff94db5bf9 HIToolbox`ReceiveNextEventCommon + 184. frame #38: 0x00007fff94db5b26 HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71. frame #39: 0x00007fff9334,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:6507,energy efficiency,current,currentDisplayCycle,6507,ectIsVisibleRectForView:topView:] + 837. frame #22: 0x00007fff934a22af AppKit`-[NSThemeFrame _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 334. frame #23: 0x00007fff934a06d8 AppKit`-[NSView _displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:] + 2452. frame #24: 0x00007fff9349bfca AppKit`-[NSView displayIfNeeded] + 1748. frame #25: 0x00007fff9349b8db AppKit`-[NSWindow displayIfNeeded] + 230. frame #26: 0x00007fff93bfbcb4 AppKit`___NSWindowGetDisplayCycleObserver_block_invoke.6228 + 277. frame #27: 0x00007fff9349b3b9 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke + 454. frame #28: 0x00007fff9b384cc6 QuartzCore`CA::Transaction::run_commit_handlers(CATransactionPhase) + 46. frame #29: 0x00007fff9b48e8ac QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 160. frame #30: 0x00007fff9b3837a1 QuartzCore`CA::Transaction::commit() + 475. frame #31: 0x00007fff9377e8b1 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke.31 + 323. frame #32: 0x00007fff95874d37 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23. frame #33: 0x00007fff95874ca7 CoreFoundation`__CFRunLoopDoObservers + 391. frame #34: 0x00007fff958556d9 CoreFoundation`__CFRunLoopRun + 873. frame #35: 0x00007fff95855114 CoreFoundation`CFRunLoopRunSpecific + 420. frame #36: 0x00007fff94db5ebc HIToolbox`RunCurrentEventLoopInMode + 240. frame #37: 0x00007fff94db5bf9 HIToolbox`ReceiveNextEventCommon + 184. frame #38: 0x00007fff94db5b26 HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71. frame #39: 0x00007fff9334ca54 AppKit`_DPSNextEvent + 1120. frame #40: 0x00007fff93ac87ee AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 2796. frame #41: 0x0000000100491031 libCore.so`TMacOSXSystem::ProcessPendingEvents(this=0x0000000100c06d60) at TMacOSXSystem.mm:473. frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x000000010,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:6581,energy efficiency,Core,CoreFoundation,6581,"AppKit`-[NSThemeFrame _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 334. frame #23: 0x00007fff934a06d8 AppKit`-[NSView _displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:] + 2452. frame #24: 0x00007fff9349bfca AppKit`-[NSView displayIfNeeded] + 1748. frame #25: 0x00007fff9349b8db AppKit`-[NSWindow displayIfNeeded] + 230. frame #26: 0x00007fff93bfbcb4 AppKit`___NSWindowGetDisplayCycleObserver_block_invoke.6228 + 277. frame #27: 0x00007fff9349b3b9 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke + 454. frame #28: 0x00007fff9b384cc6 QuartzCore`CA::Transaction::run_commit_handlers(CATransactionPhase) + 46. frame #29: 0x00007fff9b48e8ac QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 160. frame #30: 0x00007fff9b3837a1 QuartzCore`CA::Transaction::commit() + 475. frame #31: 0x00007fff9377e8b1 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke.31 + 323. frame #32: 0x00007fff95874d37 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23. frame #33: 0x00007fff95874ca7 CoreFoundation`__CFRunLoopDoObservers + 391. frame #34: 0x00007fff958556d9 CoreFoundation`__CFRunLoopRun + 873. frame #35: 0x00007fff95855114 CoreFoundation`CFRunLoopRunSpecific + 420. frame #36: 0x00007fff94db5ebc HIToolbox`RunCurrentEventLoopInMode + 240. frame #37: 0x00007fff94db5bf9 HIToolbox`ReceiveNextEventCommon + 184. frame #38: 0x00007fff94db5b26 HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71. frame #39: 0x00007fff9334ca54 AppKit`_DPSNextEvent + 1120. frame #40: 0x00007fff93ac87ee AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 2796. frame #41: 0x0000000100491031 libCore.so`TMacOSXSystem::ProcessPendingEvents(this=0x0000000100c06d60) at TMacOSXSystem.mm:473. frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x0000000100c06d60, pendingOnly=true) at TMacOSXSystem.mm:365. frame #43: 0x000000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:6694,energy efficiency,Core,CoreFoundation,6694,":] + 334. frame #23: 0x00007fff934a06d8 AppKit`-[NSView _displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:] + 2452. frame #24: 0x00007fff9349bfca AppKit`-[NSView displayIfNeeded] + 1748. frame #25: 0x00007fff9349b8db AppKit`-[NSWindow displayIfNeeded] + 230. frame #26: 0x00007fff93bfbcb4 AppKit`___NSWindowGetDisplayCycleObserver_block_invoke.6228 + 277. frame #27: 0x00007fff9349b3b9 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke + 454. frame #28: 0x00007fff9b384cc6 QuartzCore`CA::Transaction::run_commit_handlers(CATransactionPhase) + 46. frame #29: 0x00007fff9b48e8ac QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 160. frame #30: 0x00007fff9b3837a1 QuartzCore`CA::Transaction::commit() + 475. frame #31: 0x00007fff9377e8b1 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke.31 + 323. frame #32: 0x00007fff95874d37 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23. frame #33: 0x00007fff95874ca7 CoreFoundation`__CFRunLoopDoObservers + 391. frame #34: 0x00007fff958556d9 CoreFoundation`__CFRunLoopRun + 873. frame #35: 0x00007fff95855114 CoreFoundation`CFRunLoopRunSpecific + 420. frame #36: 0x00007fff94db5ebc HIToolbox`RunCurrentEventLoopInMode + 240. frame #37: 0x00007fff94db5bf9 HIToolbox`ReceiveNextEventCommon + 184. frame #38: 0x00007fff94db5b26 HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71. frame #39: 0x00007fff9334ca54 AppKit`_DPSNextEvent + 1120. frame #40: 0x00007fff93ac87ee AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 2796. frame #41: 0x0000000100491031 libCore.so`TMacOSXSystem::ProcessPendingEvents(this=0x0000000100c06d60) at TMacOSXSystem.mm:473. frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x0000000100c06d60, pendingOnly=true) at TMacOSXSystem.mm:365. frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429. frame #44: 0x0000000100",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:6769,energy efficiency,Core,CoreFoundation,6769,"gOpacity:isVisibleRect:rectIsVisibleRectForView:] + 2452. frame #24: 0x00007fff9349bfca AppKit`-[NSView displayIfNeeded] + 1748. frame #25: 0x00007fff9349b8db AppKit`-[NSWindow displayIfNeeded] + 230. frame #26: 0x00007fff93bfbcb4 AppKit`___NSWindowGetDisplayCycleObserver_block_invoke.6228 + 277. frame #27: 0x00007fff9349b3b9 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke + 454. frame #28: 0x00007fff9b384cc6 QuartzCore`CA::Transaction::run_commit_handlers(CATransactionPhase) + 46. frame #29: 0x00007fff9b48e8ac QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 160. frame #30: 0x00007fff9b3837a1 QuartzCore`CA::Transaction::commit() + 475. frame #31: 0x00007fff9377e8b1 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke.31 + 323. frame #32: 0x00007fff95874d37 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23. frame #33: 0x00007fff95874ca7 CoreFoundation`__CFRunLoopDoObservers + 391. frame #34: 0x00007fff958556d9 CoreFoundation`__CFRunLoopRun + 873. frame #35: 0x00007fff95855114 CoreFoundation`CFRunLoopRunSpecific + 420. frame #36: 0x00007fff94db5ebc HIToolbox`RunCurrentEventLoopInMode + 240. frame #37: 0x00007fff94db5bf9 HIToolbox`ReceiveNextEventCommon + 184. frame #38: 0x00007fff94db5b26 HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71. frame #39: 0x00007fff9334ca54 AppKit`_DPSNextEvent + 1120. frame #40: 0x00007fff93ac87ee AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 2796. frame #41: 0x0000000100491031 libCore.so`TMacOSXSystem::ProcessPendingEvents(this=0x0000000100c06d60) at TMacOSXSystem.mm:473. frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x0000000100c06d60, pendingOnly=true) at TMacOSXSystem.mm:365. frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429. frame #44: 0x0000000100fe5844 threadsh2_C.so`threadsh2() at threadsh2.C:196. frame #45: 0x00000001",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:6836,energy efficiency,Core,CoreFoundation,6836,": 0x00007fff9349bfca AppKit`-[NSView displayIfNeeded] + 1748. frame #25: 0x00007fff9349b8db AppKit`-[NSWindow displayIfNeeded] + 230. frame #26: 0x00007fff93bfbcb4 AppKit`___NSWindowGetDisplayCycleObserver_block_invoke.6228 + 277. frame #27: 0x00007fff9349b3b9 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke + 454. frame #28: 0x00007fff9b384cc6 QuartzCore`CA::Transaction::run_commit_handlers(CATransactionPhase) + 46. frame #29: 0x00007fff9b48e8ac QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 160. frame #30: 0x00007fff9b3837a1 QuartzCore`CA::Transaction::commit() + 475. frame #31: 0x00007fff9377e8b1 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke.31 + 323. frame #32: 0x00007fff95874d37 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23. frame #33: 0x00007fff95874ca7 CoreFoundation`__CFRunLoopDoObservers + 391. frame #34: 0x00007fff958556d9 CoreFoundation`__CFRunLoopRun + 873. frame #35: 0x00007fff95855114 CoreFoundation`CFRunLoopRunSpecific + 420. frame #36: 0x00007fff94db5ebc HIToolbox`RunCurrentEventLoopInMode + 240. frame #37: 0x00007fff94db5bf9 HIToolbox`ReceiveNextEventCommon + 184. frame #38: 0x00007fff94db5b26 HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71. frame #39: 0x00007fff9334ca54 AppKit`_DPSNextEvent + 1120. frame #40: 0x00007fff93ac87ee AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 2796. frame #41: 0x0000000100491031 libCore.so`TMacOSXSystem::ProcessPendingEvents(this=0x0000000100c06d60) at TMacOSXSystem.mm:473. frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x0000000100c06d60, pendingOnly=true) at TMacOSXSystem.mm:365. frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429. frame #44: 0x0000000100fe5844 threadsh2_C.so`threadsh2() at threadsh2.C:196. frame #45: 0x0000000100fec06a. frame #46: 0x0000000103d7dc2f libCling.so`cling::Incremen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:2299,integrability,queue,queue,2299,"d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x00007fff5fbf5cf8) at condition_variable:202. frame #4: 0x0000000100f6887e libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex>, ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock()::'lambda'()>(this=0x0000000122753a28, __lock=0x00007fff5fbf5cf8, __pred=(anonymous class) @ 0x00007fff5fbf5e08)::'lambda'()) at condition_variable:211. f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:8397,integrability,wrap,wrapPoint,8397," at TMacOSXSystem.mm:473. frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x0000000100c06d60, pendingOnly=true) at TMacOSXSystem.mm:365. frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429. frame #44: 0x0000000100fe5844 threadsh2_C.so`threadsh2() at threadsh2.C:196. frame #45: 0x0000000100fec06a. frame #46: 0x0000000103d7dc2f libCling.so`cling::IncrementalExecutor::executeWrapper(this=0x0000000100a1d410, function=(Data = ""_Z15__cling_Un1Qu30Pv"", Length = 21), returnValue=0x00007fff5fbfbde0) at IncrementalExecutor.h:196. frame #47: 0x0000000103d7db1f libCling.so`cling::Interpreter::RunFunction(this=0x0000000100a0e3b0, FD=0x000000011780f6b0, res=0x00007fff5fbfbde0) at Interpreter.cpp:980. frame #48: 0x0000000103d7a92a libCling.so`cling::Interpreter::EvaluateInternal(this=0x0000000100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:4255,modifiability,Inherit,InheritsFrom,4255,":'lambda'()) at condition_variable:211. frame #5: 0x0000000100f68857 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock(this=0x00000001227539d8) at TReentrantRWLock.cxx:95. frame #6: 0x0000000100f5c719 libThread.so`ROOT::TRWMutexImp<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock(this=0x00000001227539d0) at TRWMutexImp.cxx:33. frame #7: 0x00000001000f52d1 libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:89. frame #8: 0x00000001000f275d libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:88. frame #9: 0x00000001002fcebf libCore.so`THashTable::FindObject(this=0x0000000100b0e120, name=""TGTextView"") const at THashTable.cxx:242. frame #10: 0x00000001003a67fd libCore.so`TClass::GetClass(name=""TGTextView"", load=true, silent=true) at TClass.cxx:2900. frame #11: 0x00000001003c9e16 libCore.so`TClass::InheritsFrom(this=0x0000000118fe1250, classname=""TGTextView"") const at TClass.cxx:4683. frame #12: 0x000000010024cb6e libCore.so`TObject::InheritsFrom(this=0x0000000126908de0, classname=""TGTextView"") const at TObject.cxx:445. frame #13: 0x000000011c03e47f libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(viewID=116) at QuartzWindow.mm:899. frame #14: 0x000000011c03e518 libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(view=0x0000000126908ee0) at QuartzWindow.mm:907. frame #15: 0x000000011c04706c libGCocoa.so`::-[QuartzView drawRect:](self=0x0000000126908ee0, _cmd=""drawRect:"", dirtyRect=(origin = (x = 0, y = 0), size = (width = 29, height = 21))) at QuartzWindow.mm:2728. frame #16: 0x00007fff934a4f99 AppKit`-[NSView _drawRect:clip:] + 2276. frame #17: 0x00007fff934f4f2f AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 1753. frame #18: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #19: 0x00007fff934f539a AppKit`-[NSView _recursive",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:4393,modifiability,Inherit,InheritsFrom,4393,"RecurseCounts>::ReadLock(this=0x00000001227539d8) at TReentrantRWLock.cxx:95. frame #6: 0x0000000100f5c719 libThread.so`ROOT::TRWMutexImp<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock(this=0x00000001227539d0) at TRWMutexImp.cxx:33. frame #7: 0x00000001000f52d1 libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:89. frame #8: 0x00000001000f275d libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:88. frame #9: 0x00000001002fcebf libCore.so`THashTable::FindObject(this=0x0000000100b0e120, name=""TGTextView"") const at THashTable.cxx:242. frame #10: 0x00000001003a67fd libCore.so`TClass::GetClass(name=""TGTextView"", load=true, silent=true) at TClass.cxx:2900. frame #11: 0x00000001003c9e16 libCore.so`TClass::InheritsFrom(this=0x0000000118fe1250, classname=""TGTextView"") const at TClass.cxx:4683. frame #12: 0x000000010024cb6e libCore.so`TObject::InheritsFrom(this=0x0000000126908de0, classname=""TGTextView"") const at TObject.cxx:445. frame #13: 0x000000011c03e47f libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(viewID=116) at QuartzWindow.mm:899. frame #14: 0x000000011c03e518 libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(view=0x0000000126908ee0) at QuartzWindow.mm:907. frame #15: 0x000000011c04706c libGCocoa.so`::-[QuartzView drawRect:](self=0x0000000126908ee0, _cmd=""drawRect:"", dirtyRect=(origin = (x = 0, y = 0), size = (width = 29, height = 21))) at QuartzWindow.mm:2728. frame #16: 0x00007fff934a4f99 AppKit`-[NSView _drawRect:clip:] + 2276. frame #17: 0x00007fff934f4f2f AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 1753. frame #18: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #19: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #20: 0x00007fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:6,performance,deadlock,deadlock,6,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:52,performance,lock,lock,52,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:117,performance,lock,lock,117,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:167,performance,lock,lock,167,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:216,performance,lock,lock,216,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:252,performance,lock,lock,252,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:378,performance,lock,lock,378,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:469,performance,lock,lock,469,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:531,performance,lock,lock,531,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:569,performance,lock,lock,569,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:648,performance,lock,lock,648,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:717,performance,lock,lock,717,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1073,performance,lock,lockForReadingWithExceptionHandler,1073," is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1248,performance,lock,lockFocusIfCanDraw,1248,"is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:2299,performance,queue,queue,2299,"d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x00007fff5fbf5cf8) at condition_variable:202. frame #4: 0x0000000100f6887e libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex>, ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock()::'lambda'()>(this=0x0000000122753a28, __lock=0x00007fff5fbf5cf8, __pred=(anonymous class) @ 0x00007fff5fbf5e08)::'lambda'()) at condition_variable:211. f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:4162,performance,load,load,4162,"is=0x0000000122753a28, __lock=0x00007fff5fbf5cf8, __pred=(anonymous class) @ 0x00007fff5fbf5e08)::'lambda'()) at condition_variable:211. frame #5: 0x0000000100f68857 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock(this=0x00000001227539d8) at TReentrantRWLock.cxx:95. frame #6: 0x0000000100f5c719 libThread.so`ROOT::TRWMutexImp<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock(this=0x00000001227539d0) at TRWMutexImp.cxx:33. frame #7: 0x00000001000f52d1 libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:89. frame #8: 0x00000001000f275d libCore.so`ROOT::TReadLockGuard::TReadLockGuard(this=0x00007fff5fbf5f48, mutex=0x00000001227539d0) at TVirtualRWMutex.h:88. frame #9: 0x00000001002fcebf libCore.so`THashTable::FindObject(this=0x0000000100b0e120, name=""TGTextView"") const at THashTable.cxx:242. frame #10: 0x00000001003a67fd libCore.so`TClass::GetClass(name=""TGTextView"", load=true, silent=true) at TClass.cxx:2900. frame #11: 0x00000001003c9e16 libCore.so`TClass::InheritsFrom(this=0x0000000118fe1250, classname=""TGTextView"") const at TClass.cxx:4683. frame #12: 0x000000010024cb6e libCore.so`TObject::InheritsFrom(this=0x0000000126908de0, classname=""TGTextView"") const at TObject.cxx:445. frame #13: 0x000000011c03e47f libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(viewID=116) at QuartzWindow.mm:899. frame #14: 0x000000011c03e518 libGCocoa.so`ROOT::MacOSX::X11::ViewIsTextView(view=0x0000000126908ee0) at QuartzWindow.mm:907. frame #15: 0x000000011c04706c libGCocoa.so`::-[QuartzView drawRect:](self=0x0000000126908ee0, _cmd=""drawRect:"", dirtyRect=(origin = (x = 0, y = 0), size = (width = 29, height = 21))) at QuartzWindow.mm:2728. frame #16: 0x00007fff934a4f99 AppKit`-[NSView _drawRect:clip:] + 2276. frame #17: 0x00007fff934f4f2f AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 1753. frame #18: 0x00007fff934f539a AppKit`-[NSView _recursiveDispla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9272,performance,error,error,9272,"00100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9489,performance,error,error,9489,"eter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9623,performance,error,error,9623," Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9800,performance,error,error,9800,"00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThrea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:10174,performance,error,error,10174,"00000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x0000700009f18898) at condition_variable:202. frame #4: 0x0000000100f697b4 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:11838,performance,Lock,Lock,11838,"e_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x0000700009f18898) at condition_variable:202. frame #4: 0x0000000100f697b4 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex>, ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock()::'lambda'()>(this=0x0000000122753a28, __lock=0x0000700009f18898, __pred=(anonymous class) @ 0x0000700009f18a28)::'lambda'()) at condition_variable:211. frame #5: 0x0000000100f69790 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock(this=0x00000001227539d8) at TReentrantRWLock.cxx:175. frame #6: 0x0000000100f5c779 libThread.so`ROOT::TRWMutexImp<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock(this=0x00000001227539d0) at TRWMutexImp.cxx:42. frame #7: 0x0000000100f57df6 libThread.so`ROOT::TVirtualRWMutex::Lock(this=0x00000001227539d0) at TVirtualRWMutex.h:52. frame #8: 0x00000001039b2dd9 libCling.so`TLockGuard::TLockGuard(this=0x0000700009f18b48, mutex=0x00000001227539d0) at TVirtualMutex.h:85. frame #9: 0x000000010397ba8d libCling.so`TLockGuard::TLockGuard(this=0x0000700009f18b48, mutex=0x00000001227539d0) at TVirtualMutex.h:85. frame #10: 0x00000001039aa152 libCling.so`TCling::ClassInfo_Factory(this=0x0000000100a0de40, all=true) const at TCling.cxx:7216. frame #11: 0x00000001004150ba libCore.so`TMethodCall::Init(this=0x0000700009f18d80, cl=0x0000000100af0470, method=""Print"", params="""", objectIsConst=false) at TMethodCall.cxx:259. frame #12: 0x0000000100414ff3 libCore.so`TMethodCall::TMethodCall(this=0x0000700009f18d80, cl=0x0000000100af0470, method=""Print"", params="""") at TMethodCall.cxx:62. frame #13: 0x000000010041519d libCore.so`TMethodCall::TMethodCall(this=0x0000700009f18d80, cl=0x0000000100af0470, method=""Print"", params="""") at TMethodCall.cxx:61. frame #14: 0x0000000100fe471a threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:0,safety,Avoid,Avoid,0,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:293,safety,Updat,Update,293,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:320,safety,updat,update,320,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:842,safety,Updat,Update,842,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1479,safety,Updat,Update,1479,"ing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1589,safety,Updat,UpdateWindow,1589,"thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1806,safety,Updat,Update,1806,"e reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x00007ff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:8288,safety,input,input,8288,"] + 2796. frame #41: 0x0000000100491031 libCore.so`TMacOSXSystem::ProcessPendingEvents(this=0x0000000100c06d60) at TMacOSXSystem.mm:473. frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x0000000100c06d60, pendingOnly=true) at TMacOSXSystem.mm:365. frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429. frame #44: 0x0000000100fe5844 threadsh2_C.so`threadsh2() at threadsh2.C:196. frame #45: 0x0000000100fec06a. frame #46: 0x0000000103d7dc2f libCling.so`cling::IncrementalExecutor::executeWrapper(this=0x0000000100a1d410, function=(Data = ""_Z15__cling_Un1Qu30Pv"", Length = 21), returnValue=0x00007fff5fbfbde0) at IncrementalExecutor.h:196. frame #47: 0x0000000103d7db1f libCling.so`cling::Interpreter::RunFunction(this=0x0000000100a0e3b0, FD=0x000000011780f6b0, res=0x00007fff5fbfbde0) at Interpreter.cpp:980. frame #48: 0x0000000103d7a92a libCling.so`cling::Interpreter::EvaluateInternal(this=0x0000000100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:8531,safety,input,input,8531,"nly=true) at TMacOSXSystem.mm:365. frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429. frame #44: 0x0000000100fe5844 threadsh2_C.so`threadsh2() at threadsh2.C:196. frame #45: 0x0000000100fec06a. frame #46: 0x0000000103d7dc2f libCling.so`cling::IncrementalExecutor::executeWrapper(this=0x0000000100a1d410, function=(Data = ""_Z15__cling_Un1Qu30Pv"", Length = 21), returnValue=0x00007fff5fbfbde0) at IncrementalExecutor.h:196. frame #47: 0x0000000103d7db1f libCling.so`cling::Interpreter::RunFunction(this=0x0000000100a0e3b0, FD=0x000000011780f6b0, res=0x00007fff5fbfbde0) at Interpreter.cpp:980. frame #48: 0x0000000103d7a92a libCling.so`cling::Interpreter::EvaluateInternal(this=0x0000000100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9272,safety,error,error,9272,"00100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9489,safety,error,error,9489,"eter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9623,safety,error,error,9623," Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9800,safety,error,error,9800,"00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThrea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:10174,safety,error,error,10174,"00000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x0000700009f18898) at condition_variable:202. frame #4: 0x0000000100f697b4 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:52,security,lock,lock,52,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:117,security,lock,lock,117,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:167,security,lock,lock,167,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:216,security,lock,lock,216,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:252,security,lock,lock,252,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:293,security,Updat,Update,293,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:320,security,updat,update,320,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:378,security,lock,lock,378,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:469,security,lock,lock,469,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:531,security,lock,lock,531,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:569,security,lock,lock,569,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:648,security,lock,lock,648,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:717,security,lock,lock,717,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:842,security,Updat,Update,842,"Avoid deadlock caused by Cocoa code taking the ROOT lock; In the example below, thread #11 is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1073,security,lock,lockForReadingWithExceptionHandler,1073," is waiting on the ‘AppKit lock’ while thread #1 is waiting on the ROOT read lock and thread #12 is waiting on the ROOT write lock. In thread #11, the ROOT write lock is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1248,security,lock,lockFocusIfCanDraw,1248,"is taken/held by frame #9, TCanvas::Update, to ‘serialize’ the update to the windowing system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1479,security,Updat,Update,1479,"ing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1589,security,Updat,UpdateWindow,1589,"thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1806,security,Updat,Update,1806,"e reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x00007ff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:2346,security,sign,signal,2346,"::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x00007fff5fbf5cf8) at condition_variable:202. frame #4: 0x0000000100f6887e libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex>, ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock()::'lambda'()>(this=0x0000000122753a28, __lock=0x00007fff5fbf5cf8, __pred=(anonymous class) @ 0x00007fff5fbf5e08)::'lambda'()) at condition_variable:211. frame #5: 0x0000000100f68857 libThread.so`ROOT::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:11838,security,Lock,Lock,11838,"e_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x0000700009f18898) at condition_variable:202. frame #4: 0x0000000100f697b4 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex>, ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock()::'lambda'()>(this=0x0000000122753a28, __lock=0x0000700009f18898, __pred=(anonymous class) @ 0x0000700009f18a28)::'lambda'()) at condition_variable:211. frame #5: 0x0000000100f69790 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock(this=0x00000001227539d8) at TReentrantRWLock.cxx:175. frame #6: 0x0000000100f5c779 libThread.so`ROOT::TRWMutexImp<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock(this=0x00000001227539d0) at TRWMutexImp.cxx:42. frame #7: 0x0000000100f57df6 libThread.so`ROOT::TVirtualRWMutex::Lock(this=0x00000001227539d0) at TVirtualRWMutex.h:52. frame #8: 0x00000001039b2dd9 libCling.so`TLockGuard::TLockGuard(this=0x0000700009f18b48, mutex=0x00000001227539d0) at TVirtualMutex.h:85. frame #9: 0x000000010397ba8d libCling.so`TLockGuard::TLockGuard(this=0x0000700009f18b48, mutex=0x00000001227539d0) at TVirtualMutex.h:85. frame #10: 0x00000001039aa152 libCling.so`TCling::ClassInfo_Factory(this=0x0000000100a0de40, all=true) const at TCling.cxx:7216. frame #11: 0x00000001004150ba libCore.so`TMethodCall::Init(this=0x0000700009f18d80, cl=0x0000000100af0470, method=""Print"", params="""", objectIsConst=false) at TMethodCall.cxx:259. frame #12: 0x0000000100414ff3 libCore.so`TMethodCall::TMethodCall(this=0x0000700009f18d80, cl=0x0000000100af0470, method=""Print"", params="""") at TMethodCall.cxx:62. frame #13: 0x000000010041519d libCore.so`TMethodCall::TMethodCall(this=0x0000700009f18d80, cl=0x0000000100af0470, method=""Print"", params="""") at TMethodCall.cxx:61. frame #14: 0x0000000100fe471a threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:6322,testability,Context,Context,6322,fff934f539a AppKit`-[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2884. frame #21: 0x00007fff934a2ad2 AppKit`-[NSView _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 837. frame #22: 0x00007fff934a22af AppKit`-[NSThemeFrame _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 334. frame #23: 0x00007fff934a06d8 AppKit`-[NSView _displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:] + 2452. frame #24: 0x00007fff9349bfca AppKit`-[NSView displayIfNeeded] + 1748. frame #25: 0x00007fff9349b8db AppKit`-[NSWindow displayIfNeeded] + 230. frame #26: 0x00007fff93bfbcb4 AppKit`___NSWindowGetDisplayCycleObserver_block_invoke.6228 + 277. frame #27: 0x00007fff9349b3b9 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke + 454. frame #28: 0x00007fff9b384cc6 QuartzCore`CA::Transaction::run_commit_handlers(CATransactionPhase) + 46. frame #29: 0x00007fff9b48e8ac QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 160. frame #30: 0x00007fff9b3837a1 QuartzCore`CA::Transaction::commit() + 475. frame #31: 0x00007fff9377e8b1 AppKit`__37+[NSDisplayCycle currentDisplayCycle]_block_invoke.31 + 323. frame #32: 0x00007fff95874d37 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23. frame #33: 0x00007fff95874ca7 CoreFoundation`__CFRunLoopDoObservers + 391. frame #34: 0x00007fff958556d9 CoreFoundation`__CFRunLoopRun + 873. frame #35: 0x00007fff95855114 CoreFoundation`CFRunLoopRunSpecific + 420. frame #36: 0x00007fff94db5ebc HIToolbox`RunCurrentEventLoopInMode + 240. frame #37: 0x00007fff94db5bf9 HIToolbox`ReceiveNextEventCommon + 184. frame #38: 0x00007fff94db5b26 HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter + 71. frame #39: 0x00007fff9334ca54 AppKit`_DPSNextEvent + 1120. frame #40: 0x00007fff93ac87ee AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 2796. frame #41: 0x000000010049,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:1336,usability,Command,CommandBuffer,1336," system. In thread #1, the ‘AppKit lock’ is likely taken/held by a frame in the #16 to #40 range. This commit remove the dead lock by removing the unnecessary use of code needing the ROOT lock within code run under the AppKit lock so that in they case thread #1 no longer need to wait for the ROOT (read) lock. In addition it should be investigated whether the ROOT (write) lock should be taken in thread #1, frame 1 (TMacOSXSystem::ProcessPendingEvents) for the same reason it is taken in TCanvas::Update. thread #11. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fff93394e34 AppKit`-[NSViewHierarchyLock lockForReadingWithExceptionHandler:] + 287. frame #3: 0x00007fff934948ae AppKit`-[NSWindow _copyAcquiredViewHierarchyLock] + 126. frame #4: 0x00007fff9349442c AppKit`-[NSView lockFocusIfCanDraw] + 159. frame #5: 0x000000011c09063d libGCocoa.so`ROOT::MacOSX::X11::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:2332,usability,stop,stop,2332,"::CommandBuffer::Flush(this=0x0000000100dbb080, impl=0x0000000100dbb000) at X11Buffer.mm:550. frame #6: 0x000000011c04e9c4 libGCocoa.so`TGCocoa::Update(this=0x0000000100ad1bc0, mode=1) at TGCocoa.mm:536. frame #7: 0x000000011c04ff3e libGCocoa.so`TGCocoa::UpdateWindow(this=0x0000000100ad1bc0, (null)=1) at TGCocoa.mm:776. frame #8: 0x000000011ad70827 libGpad.so`TCanvas::Flush(this=0x000000012274e740) at TCanvas.cxx:1096. frame #9: 0x000000011ad7830f libGpad.so`TCanvas::Update(this=0x000000012274e740) at TCanvas.cxx:2287. frame #10: 0x0000000100fe4e86 threadsh2_C.so`handle2((null)=0x0000000000000001) at threadsh2.C:105. frame #11: 0x0000000100f55680 libThread.so`TThread::Function(ptr=0x0000000122753b00) at TThread.cxx:821. frame #12: 0x00007fffab1f493b libsystem_pthread.dylib`_pthread_body + 180. frame #13: 0x00007fffab1f4887 libsystem_pthread.dylib`_pthread_start + 286. frame #14: 0x00007fffab1f408d libsystem_pthread.dylib`thread_start + 13. thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x00007fff5fbf5cf8) at condition_variable:202. frame #4: 0x0000000100f6887e libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex>, ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::ReadLock()::'lambda'()>(this=0x0000000122753a28, __lock=0x00007fff5fbf5cf8, __pred=(anonymous class) @ 0x00007fff5fbf5e08)::'lambda'()) at condition_variable:211. frame #5: 0x0000000100f68857 libT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:8288,usability,input,input,8288,"] + 2796. frame #41: 0x0000000100491031 libCore.so`TMacOSXSystem::ProcessPendingEvents(this=0x0000000100c06d60) at TMacOSXSystem.mm:473. frame #42: 0x000000010049097d libCore.so`TMacOSXSystem::DispatchOneEvent(this=0x0000000100c06d60, pendingOnly=true) at TMacOSXSystem.mm:365. frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429. frame #44: 0x0000000100fe5844 threadsh2_C.so`threadsh2() at threadsh2.C:196. frame #45: 0x0000000100fec06a. frame #46: 0x0000000103d7dc2f libCling.so`cling::IncrementalExecutor::executeWrapper(this=0x0000000100a1d410, function=(Data = ""_Z15__cling_Un1Qu30Pv"", Length = 21), returnValue=0x00007fff5fbfbde0) at IncrementalExecutor.h:196. frame #47: 0x0000000103d7db1f libCling.so`cling::Interpreter::RunFunction(this=0x0000000100a0e3b0, FD=0x000000011780f6b0, res=0x00007fff5fbfbde0) at Interpreter.cpp:980. frame #48: 0x0000000103d7a92a libCling.so`cling::Interpreter::EvaluateInternal(this=0x0000000100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:8531,usability,input,input,8531,"nly=true) at TMacOSXSystem.mm:365. frame #43: 0x0000000100294f4b libCore.so`TSystem::ProcessEvents(this=0x0000000100c06d60) at TSystem.cxx:429. frame #44: 0x0000000100fe5844 threadsh2_C.so`threadsh2() at threadsh2.C:196. frame #45: 0x0000000100fec06a. frame #46: 0x0000000103d7dc2f libCling.so`cling::IncrementalExecutor::executeWrapper(this=0x0000000100a1d410, function=(Data = ""_Z15__cling_Un1Qu30Pv"", Length = 21), returnValue=0x00007fff5fbfbde0) at IncrementalExecutor.h:196. frame #47: 0x0000000103d7db1f libCling.so`cling::Interpreter::RunFunction(this=0x0000000100a0e3b0, FD=0x000000011780f6b0, res=0x00007fff5fbfbde0) at Interpreter.cpp:980. frame #48: 0x0000000103d7a92a libCling.so`cling::Interpreter::EvaluateInternal(this=0x0000000100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9272,usability,error,error,9272,"00100a0e3b0, input=""threadsh2()"", CO=CompilationOptions @ 0x00007fff5fbfaae8, V=0x00007fff5fbfbde0, T=0x0000000000000000, wrapPoint=44) at Interpreter.cpp:1232. frame #49: 0x0000000103d79e27 libCling.so`cling::Interpreter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9489,usability,error,error,9489,"eter::process(this=0x0000000100a0e3b0, input=""threadsh2()"", V=0x00007fff5fbfbde0, T=0x0000000000000000, disableValuePrinting=false) at Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9623,usability,error,error,9623," Interpreter.cpp:684. frame #50: 0x0000000103e552a5 libCling.so`cling::MetaProcessor::process(this=0x0000000100b65aa0, input_line=(Data = ""threadsh2()"", Length = 11), compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:9800,usability,error,error,9800,"00007fff5fbfb540, result=0x00007fff5fbfbde0, disableValuePrinting=false) at MetaProcessor.cpp:341. frame #51: 0x000000010397bd63 libCling.so`HandleInterpreterException(metaProcessor=0x0000000100b65aa0, input_line=""threadsh2()"", compRes=0x00007fff5fbfb540, result=0x00007fff5fbfbde0) at TCling.cxx:2053. frame #52: 0x000000010397a16e libCling.so`TCling::ProcessLine(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThrea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1573:10174,usability,error,error,10174,"00000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:2170. frame #53: 0x0000000103984436 libCling.so`TCling::ProcessLineSynch(this=0x0000000100a0de40, line="".X /opt/build/root_builds/master.debug/tutorials/thread/./threadsh2.C+"", error=0x00007fff5fbfd694) at TCling.cxx:3044. frame #54: 0x00000001001f3133 libCore.so`TApplication::ExecuteFile(file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1143. frame #55: 0x00000001001f19e0 libCore.so`TApplication::ProcessFile(this=0x0000000100b113e0, file=""threadsh2.C+"", error=0x00007fff5fbfd694, keep=false) at TApplication.cxx:1015. frame #56: 0x00000001001f138f libCore.so`TApplication::ProcessLine(this=0x0000000100b113e0, line="".x threadsh2.C+"", sync=false, err=0x00007fff5fbfd694) at TApplication.cxx:988. frame #57: 0x000000010009878d libRint.so`TRint::ProcessLineNr(this=0x0000000100b113e0, filestem=""ROOT_cli_"", line="".x threadsh2.C+"", error=0x00007fff5fbfd694) at TRint.cxx:756. frame #58: 0x0000000100097daf libRint.so`TRint::Run(this=0x0000000100b113e0, retrn=false) at TRint.cxx:416. frame #59: 0x00000001000027a4 root.exe`main(argc=1, argv=0x00007fff5fbff780) at rmain.cxx:30. frame #60: 0x00007fffaafdb235 libdyld.dylib`start + 1. thread #12. frame #0: 0x00007fffab109bf2 libsystem_kernel.dylib`__psynch_cvwait + 10. frame #1: 0x00007fffab1f57fa libsystem_pthread.dylib`_pthread_cond_wait + 712. frame #2: 0x00007fffa9b734cd libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 47. frame #3: 0x0000000100f76b6f libThread.so`void std::__1::condition_variable_any::wait<std::__1::unique_lock<std::__1::mutex> >(this=0x0000000122753a28, __lock=0x0000700009f18898) at condition_variable:202. frame #4: 0x0000000100f697b4 libThread.so`ROOT::TReentrantRWLock<std::__1::mutex, ROOT::Internal::RecurseCounts>::WriteLock() [inlined] void std::__1::condition_variable_any::wait<std::__1::unique_lock<std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1573
https://github.com/root-project/root/pull/1574:30,safety,test,test,30,"Fix ROOT-9232, add regression test;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1574
https://github.com/root-project/root/pull/1574:19,testability,regress,regression,19,"Fix ROOT-9232, add regression test;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1574
https://github.com/root-project/root/pull/1574:30,testability,test,test,30,"Fix ROOT-9232, add regression test;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1574
https://github.com/root-project/root/pull/1575:40,security,loss,loss,40,Backport fix for ROOT-9232: [TDF] Entry loss when using Range and multiple actions;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1575
https://github.com/root-project/root/pull/1576:168,energy efficiency,current,current,168,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:885,energy efficiency,current,current,885,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:41,modifiability,paramet,parameters,41,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:132,modifiability,paramet,parameters,132,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:205,modifiability,paramet,parameter,205,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:420,modifiability,paramet,parameter,420,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:19,usability,document,documentation,19,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:110,usability,document,documentation,110,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:176,usability,document,documentation,176,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:199,usability,stop,stop,199,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:312,usability,stop,stopping,312,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:341,usability,behavi,behaviour,341,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:395,usability,indicat,indicate,395,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:414,usability,stop,stop,414,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1576:893,usability,document,documentation,893,"[TDF] Fix/rephrase documentation for the parameters of the Range action; This PR proposes a rephrasing of the documentation for the parameters of the Range action. The current documentation for the `stop` parameter of the `Range` action in TDataFrame says: ""Total number of entries that will be processed before stopping"". Nevertheless, the behaviour of TDataFrame when setting a Range seems to indicate that the `stop` parameter is actually the first entry index that will not be processed. Indeed, if we consider the following code:. ```python. import ROOT. fileName = ""https://root.cern/files/teaching/CMS_Open_Dataset.root"". tdf_orig = ROOT.ROOT.Experimental.TDataFrame(""data"", fileName). tdf = tdf_orig.Range(10, 12). pt1_h = tdf.Histo1D(""pt1""). print(""Histo 1: "" + str(pt1_h.GetEntries())). ```. The result is:. ```. Histo 1: 2.0. ```. and not 12 as one could interpret from the current documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1576
https://github.com/root-project/root/pull/1577:0,testability,Simpl,Simplify,0,"Simplify EmptyCollection(). Thanks, Wolf Behrenhoff!;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1577
https://github.com/root-project/root/pull/1577:0,usability,Simpl,Simplify,0,"Simplify EmptyCollection(). Thanks, Wolf Behrenhoff!;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1577
https://github.com/root-project/root/pull/1578:4,performance,memor,memory,4,"Fix memory corruption in reader initialization.; For arrays, CreateProxy() can add to fValues which invalidates iterators. Use stable, index-based iteration instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1578
https://github.com/root-project/root/pull/1578:4,usability,memor,memory,4,"Fix memory corruption in reader initialization.; For arrays, CreateProxy() can add to fValues which invalidates iterators. Use stable, index-based iteration instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1578
https://github.com/root-project/root/pull/1579:82,testability,regress,regression,82,[TMVA] Second round of CV; Externally visible changes:. - Supports multiclass and regression. - Supports booking more than one method. - Supports random splitting for kfolds. - Improvements to tutorials. Internal changes:. - Simplify much of CVSplit and friends.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1579
https://github.com/root-project/root/pull/1579:225,testability,Simpl,Simplify,225,[TMVA] Second round of CV; Externally visible changes:. - Supports multiclass and regression. - Supports booking more than one method. - Supports random splitting for kfolds. - Improvements to tutorials. Internal changes:. - Simplify much of CVSplit and friends.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1579
https://github.com/root-project/root/pull/1579:58,usability,Support,Supports,58,[TMVA] Second round of CV; Externally visible changes:. - Supports multiclass and regression. - Supports booking more than one method. - Supports random splitting for kfolds. - Improvements to tutorials. Internal changes:. - Simplify much of CVSplit and friends.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1579
https://github.com/root-project/root/pull/1579:96,usability,Support,Supports,96,[TMVA] Second round of CV; Externally visible changes:. - Supports multiclass and regression. - Supports booking more than one method. - Supports random splitting for kfolds. - Improvements to tutorials. Internal changes:. - Simplify much of CVSplit and friends.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1579
https://github.com/root-project/root/pull/1579:137,usability,Support,Supports,137,[TMVA] Second round of CV; Externally visible changes:. - Supports multiclass and regression. - Supports booking more than one method. - Supports random splitting for kfolds. - Improvements to tutorials. Internal changes:. - Simplify much of CVSplit and friends.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1579
https://github.com/root-project/root/pull/1579:225,usability,Simpl,Simplify,225,[TMVA] Second round of CV; Externally visible changes:. - Supports multiclass and regression. - Supports booking more than one method. - Supports random splitting for kfolds. - Improvements to tutorials. Internal changes:. - Simplify much of CVSplit and friends.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1579
https://github.com/root-project/root/pull/1580:62,testability,context,context,62,Print a warning in ReSubstTemplateArg in case of unknown decl context…; … kind,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1580
https://github.com/root-project/root/pull/1583:117,deployability,fail,failing,117,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:203,deployability,build,builds,203,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:117,reliability,fail,failing,117,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:11,safety,Prevent,Prevent,11,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:58,safety,Prevent,Prevent,58,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:248,safety,test,test,248,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:261,safety,compl,completion,261,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:11,security,Preven,Prevent,11,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:58,security,Preven,Prevent,58,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:261,security,compl,completion,261,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1583:248,testability,test,test,248,ROOT-9237: Prevent different output in absence of OpenGL; Prevent roottest_python_JupyROOT_cppcompleter_doctest from failing when OpenGL is disabled. . Suggestions for TProfile should be constant in all builds and they will serve the same purpose: test the tab completion mechanism.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1583
https://github.com/root-project/root/pull/1584:0,safety,Avoid,Avoid,0,Avoid nullptr dereference in TDirectoryFile::GetKey.; Fixes ROOT-9238,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1584
https://github.com/root-project/root/pull/1585:349,availability,operat,operator,349,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:203,deployability,patch,patches,203,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:486,deployability,patch,patches,486,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:535,deployability,depend,depend,535,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:458,energy efficiency,optim,optimization,458,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:535,integrability,depend,depend,535,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:535,modifiability,depend,depend,535,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:655,modifiability,variab,variable,655,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:458,performance,optimiz,optimization,458,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:627,performance,time,time,627,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:203,safety,patch,patches,203,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:486,safety,patch,patches,486,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:535,safety,depend,depend,535,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:203,security,patch,patches,203,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:486,security,patch,patches,486,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:535,testability,depend,depend,535,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1585:217,usability,progress,progress,217,"Random improvements found (mainly) by clang-tidy; I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1585
https://github.com/root-project/root/pull/1586:39,deployability,build,build,39,"Remove paths to another, ""active"" ROOT build from env vars.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1586
https://github.com/root-project/root/pull/1587:11,safety,Prevent,Prevent,11,ROOT-9237: Prevent different output in absence of OpenGL; Backport of a previous fix in master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1587
https://github.com/root-project/root/pull/1587:11,security,Preven,Prevent,11,ROOT-9237: Prevent different output in absence of OpenGL; Backport of a previous fix in master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1587
https://github.com/root-project/root/pull/1588:78,energy efficiency,current,current,78,"Work around 'bug' in clang 5 C++17 overload resolution.; Clang 5.0, and hence current Cling, support for explicit conversion is still inadequate even in c++17 mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1588
https://github.com/root-project/root/pull/1588:114,interoperability,convers,conversion,114,"Work around 'bug' in clang 5 C++17 overload resolution.; Clang 5.0, and hence current Cling, support for explicit conversion is still inadequate even in c++17 mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1588
https://github.com/root-project/root/pull/1588:93,usability,support,support,93,"Work around 'bug' in clang 5 C++17 overload resolution.; Clang 5.0, and hence current Cling, support for explicit conversion is still inadequate even in c++17 mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1588
https://github.com/root-project/root/pull/1590:254,availability,error,error,254,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:4,deployability,LOG,LOGICAL,4,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:108,deployability,contain,contained,108,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:135,deployability,LOG,LOGICAL,135,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:237,deployability,fail,failing,237,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:164,energy efficiency,Load,LoadHDU,164,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:164,performance,Load,LoadHDU,164,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:254,performance,error,error,254,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:237,reliability,fail,failing,237,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:4,safety,LOG,LOGICAL,4,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:135,safety,LOG,LOGICAL,135,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:182,safety,test,tests,182,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:254,safety,error,error,254,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:4,security,LOG,LOGICAL,4,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:135,security,LOG,LOGICAL,135,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:4,testability,LOG,LOGICAL,4,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:135,testability,LOG,LOGICAL,135,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:182,testability,test,tests,182,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1590:254,usability,error,error,254,Fix LOGICAL type suport in TFITSIO; Solves a bug in the TFITSIO code when reading a FITS binary table that. contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only. had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1590
https://github.com/root-project/root/pull/1592:77,deployability,fail,fails,77,"Fix for JIT compilation of Formula when reading from a file; Flag when CLING fails to compile the formula. In this case try again when evaluating . the formula. . This should fix the recursive jitting and reading of formula from files. Like: . TFile *_file0 = TFile::Open(""formula.root""). formula->Eval(1.). where formula.root contains a formula with name ""formula"" . It should fix ROOT-7512",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1592
https://github.com/root-project/root/pull/1592:327,deployability,contain,contains,327,"Fix for JIT compilation of Formula when reading from a file; Flag when CLING fails to compile the formula. In this case try again when evaluating . the formula. . This should fix the recursive jitting and reading of formula from files. Like: . TFile *_file0 = TFile::Open(""formula.root""). formula->Eval(1.). where formula.root contains a formula with name ""formula"" . It should fix ROOT-7512",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1592
https://github.com/root-project/root/pull/1592:77,reliability,fail,fails,77,"Fix for JIT compilation of Formula when reading from a file; Flag when CLING fails to compile the formula. In this case try again when evaluating . the formula. . This should fix the recursive jitting and reading of formula from files. Like: . TFile *_file0 = TFile::Open(""formula.root""). formula->Eval(1.). where formula.root contains a formula with name ""formula"" . It should fix ROOT-7512",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1592
https://github.com/root-project/root/pull/1593:105,availability,sli,slight,105,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1593:9,deployability,updat,update,9,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1593:56,deployability,updat,update,56,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1593:105,reliability,sli,slight,105,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1593:9,safety,updat,update,9,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1593:56,safety,updat,update,56,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1593:9,security,updat,update,9,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1593:56,security,updat,update,56,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1593:80,usability,minim,minimiser,80,Add BFGS update as a new algorithm in Minuit2; Add BFGS update as an additional minimiser option. This a slight variation compared to Migrad and it could be useful and work better in some cases.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1593
https://github.com/root-project/root/pull/1594:4,safety,test,test,4,Add test for MixMax random generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1594
https://github.com/root-project/root/pull/1594:4,testability,test,test,4,Add test for MixMax random generators;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1594
https://github.com/root-project/root/pull/1595:123,deployability,updat,updated,123,"New mechanism for handling built-in packages in ROOT; Just testing for now, still need to define how CMake options will be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1595
https://github.com/root-project/root/pull/1595:36,modifiability,pac,packages,36,"New mechanism for handling built-in packages in ROOT; Just testing for now, still need to define how CMake options will be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1595
https://github.com/root-project/root/pull/1595:59,safety,test,testing,59,"New mechanism for handling built-in packages in ROOT; Just testing for now, still need to define how CMake options will be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1595
https://github.com/root-project/root/pull/1595:123,safety,updat,updated,123,"New mechanism for handling built-in packages in ROOT; Just testing for now, still need to define how CMake options will be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1595
https://github.com/root-project/root/pull/1595:123,security,updat,updated,123,"New mechanism for handling built-in packages in ROOT; Just testing for now, still need to define how CMake options will be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1595
https://github.com/root-project/root/pull/1595:59,testability,test,testing,59,"New mechanism for handling built-in packages in ROOT; Just testing for now, still need to define how CMake options will be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1595
https://github.com/root-project/root/pull/1596:42,usability,efficien,efficiencies,42,[TDF] Report returns an object to inspect efficiencies of cuts programmatically;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1596
https://github.com/root-project/root/pull/1599:40,security,sign,signaled,40,"On Linux / MacOS, emit a backtrace when signaled a USR2.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1599
https://github.com/root-project/root/pull/1601:43,safety,test,tests,43,[TDF] ROOT-9227: Implement TLazyDS and its tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1601
https://github.com/root-project/root/pull/1601:43,testability,test,tests,43,[TDF] ROOT-9227: Implement TLazyDS and its tests;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1601
https://github.com/root-project/root/pull/1602:16,availability,error,error,16,Fix compilation error on Windows (sleep is _sleep);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1602
https://github.com/root-project/root/pull/1602:16,performance,error,error,16,Fix compilation error on Windows (sleep is _sleep);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1602
https://github.com/root-project/root/pull/1602:16,safety,error,error,16,Fix compilation error on Windows (sleep is _sleep);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1602
https://github.com/root-project/root/pull/1602:16,usability,error,error,16,Fix compilation error on Windows (sleep is _sleep);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1602
https://github.com/root-project/root/pull/1603:173,deployability,contain,container,173,"[mathcore] Fix potential crash on Windows; On Windows, (as the standard says) calling front() on an empty std::vector causes an undefined behaviour. One must check that the container contains something using empty() before calling front()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1603
https://github.com/root-project/root/pull/1603:183,deployability,contain,contains,183,"[mathcore] Fix potential crash on Windows; On Windows, (as the standard says) calling front() on an empty std::vector causes an undefined behaviour. One must check that the container contains something using empty() before calling front()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1603
https://github.com/root-project/root/pull/1603:63,interoperability,standard,standard,63,"[mathcore] Fix potential crash on Windows; On Windows, (as the standard says) calling front() on an empty std::vector causes an undefined behaviour. One must check that the container contains something using empty() before calling front()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1603
https://github.com/root-project/root/pull/1603:138,usability,behavi,behaviour,138,"[mathcore] Fix potential crash on Windows; On Windows, (as the standard says) calling front() on an empty std::vector causes an undefined behaviour. One must check that the container contains something using empty() before calling front()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1603
https://github.com/root-project/root/pull/1604:17,interoperability,format,formatting,17,"Fix stringstream formatting on Windows; When streaming a hexadecimal value of a pointer in a stringstream on Windows, to prefix its hexadecimal value with '0x', one need to use this syntax:. std::hex << std::showbase << (size_t)pointer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1604
https://github.com/root-project/root/pull/1605:16,integrability,transform,transform,16,On Windows std::transform() needs a proper iterator (thanks Axel);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1605
https://github.com/root-project/root/pull/1605:16,interoperability,transform,transform,16,On Windows std::transform() needs a proper iterator (thanks Axel);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1605
https://github.com/root-project/root/pull/1606:170,deployability,contain,container,170,"Fix another potential crash on Windows; On Windows, (as the standard says) calling front() on an empty std::vector causes an undefined behaviour. One must check that the container contains something using empty() before calling front()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1606
https://github.com/root-project/root/pull/1606:180,deployability,contain,contains,180,"Fix another potential crash on Windows; On Windows, (as the standard says) calling front() on an empty std::vector causes an undefined behaviour. One must check that the container contains something using empty() before calling front()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1606
https://github.com/root-project/root/pull/1606:60,interoperability,standard,standard,60,"Fix another potential crash on Windows; On Windows, (as the standard says) calling front() on an empty std::vector causes an undefined behaviour. One must check that the container contains something using empty() before calling front()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1606
https://github.com/root-project/root/pull/1606:135,usability,behavi,behaviour,135,"Fix another potential crash on Windows; On Windows, (as the standard says) calling front() on an empty std::vector causes an undefined behaviour. One must check that the container contains something using empty() before calling front()",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1606
https://github.com/root-project/root/pull/1607:324,availability,error,error,324,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:330,integrability,messag,messages,330,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:480,integrability,filter,filter,480,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:493,integrability,coupl,couple,493,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:292,interoperability,Platform,PlatformWin,292,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:317,interoperability,format,format,317,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:330,interoperability,messag,messages,330,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:493,modifiability,coupl,couple,493,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:144,performance,time,time,144,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:324,performance,error,error,324,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:100,safety,prevent,prevent,100,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:324,safety,error,error,324,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:467,safety,review,reviewed,467,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:100,security,preven,prevent,100,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:467,testability,review,reviewed,467,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:493,testability,coupl,couple,493,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1607:324,usability,error,error,324,"Several fixes for Windows; in CIFactory:. - Add -fno-threadsafe-statics flag (for Windows only), to prevent potential unresolved symbols at run-time. in MetaProcessor::readInputFromFile:. - add required std::ifstream::binary flag when opening the std::ifstream. - add missing backslashes. in PlatformWin:. - properly format error messages. - in IsDLL(): check and return false if the file size is 0. - fix _CxxThrowException symbol name (not fully understood - to be reviewed). - filter out a couple of system dlls when looking for symbols",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1607
https://github.com/root-project/root/pull/1609:35,availability,sla,slashes,35,Replace all backslashes by forward slashes on Windows + some cleanup;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1609
https://github.com/root-project/root/pull/1609:35,reliability,sla,slashes,35,Replace all backslashes by forward slashes on Windows + some cleanup;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1609
https://github.com/root-project/root/pull/1610:31,availability,operat,operator,31,Fix a bug in TFormulaFunction::operator<;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1610
https://github.com/root-project/root/pull/1611:52,performance,multi-thread,multi-threaded,52,Protect MinimizerOptions::DefaultMinimizerType from multi-threaded calls;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1611
https://github.com/root-project/root/pull/1611:8,usability,Minim,MinimizerOptions,8,Protect MinimizerOptions::DefaultMinimizerType from multi-threaded calls;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1611
https://github.com/root-project/root/pull/1612:19,usability,help,helper,19,[TDF] Add TDF::Not helper and relevant gtest;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1612
https://github.com/root-project/root/pull/1613:91,deployability,releas,releases,91,[VecOps] Add to ROOT the first implementation of VecOps; https://github.com/dpiparo/VecOps/releases/tag/v0.1,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1613
https://github.com/root-project/root/pull/1615:590,deployability,version,versions,590,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1112,deployability,fail,fails,1112,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1142,deployability,fail,failed,1142,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:26,energy efficiency,Model,Models,26,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:93,energy efficiency,model,models,93,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:316,energy efficiency,model,model,316,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:584,energy efficiency,model,model,584,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1071,energy efficiency,current,current,1071,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1194,energy efficiency,model,model,1194,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:590,integrability,version,versions,590,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:590,modifiability,version,versions,590,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1112,reliability,fail,fails,1112,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1142,reliability,fail,failed,1142,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:621,safety,test,tested,621,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1056,safety,test,test,1056,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:26,security,Model,Models,26,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:93,security,model,models,93,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:193,security,hardcod,hardcoded,193,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:316,security,model,model,316,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:584,security,model,model,584,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1194,security,model,model,1194,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:621,testability,test,tested,621,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:1056,testability,test,test,1056,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1615:949,usability,user,user,949,"Fixing some bugs in RMVA; Models trained with RMVA are saved in .Rdata files. For all of the models in . MethodC50.cxx . MethodRSNNS.cxx . MethodRSVM.cxx . MethodRXGB.cxx . name of the file is hardcoded e.g:. TString path = GetWeightFileDir() + ""/RXGBModel.RData"";. so when one books multiple variations of the same model with. factory->BookMethod(dataloader, TMVA::Types::kRXGB, ""kRXGB"", ""!V:NRounds=80:MaxDepth=2:Eta=1"");. TMVA keeps overwriting the same file and at the end reports the same results for all variants (for example, on all plots there is only one curve for different model versions). An easy fix which I tested to be working is to replace the lines like. TString path = GetWeightFileDir() + ""/RXGBModel.RData. with. TString path = GetWeightFileDir() + ""/"" + GetName() + "".RData"";. everywhere in *.cxx files above. This will use a file name based on the method title the same way it is done for the default TMVA methods as long as a user uses unique titles when booking using the line above. Another fix are changes to the example code in /test since the current example uses outdated code which fails to run. Also, that code failed to run because ""Probability"" option for RSVM model was not declared with DeclareOptionRef method inside the source file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1615
https://github.com/root-project/root/pull/1617:128,deployability,build,build,128,"Drop unnecessary workaround, since headers still need to be copied; Since Vc and VecCore headers still need to be copied to the build. directory, it is not necessary to add the specific include paths. to rootcling. Closes: [ROOT-9208](https://sft.its.cern.ch/jira/browse/ROOT-9208)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1617
https://github.com/root-project/root/pull/1617:177,interoperability,specif,specific,177,"Drop unnecessary workaround, since headers still need to be copied; Since Vc and VecCore headers still need to be copied to the build. directory, it is not necessary to add the specific include paths. to rootcling. Closes: [ROOT-9208](https://sft.its.cern.ch/jira/browse/ROOT-9208)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1617
https://github.com/root-project/root/pull/1617:215,usability,Close,Closes,215,"Drop unnecessary workaround, since headers still need to be copied; Since Vc and VecCore headers still need to be copied to the build. directory, it is not necessary to add the specific include paths. to rootcling. Closes: [ROOT-9208](https://sft.its.cern.ch/jira/browse/ROOT-9208)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1617
https://github.com/root-project/root/pull/1618:23,usability,stop,stop,23,Read style files; Next stop: use CSS-style and attribute base. But that's details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1618
https://github.com/root-project/root/pull/1620:0,energy efficiency,Draw,Drawing,0,Drawing opts base;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1620
https://github.com/root-project/root/pull/1621:18,reliability,doe,does,18,Painting v7 THist does not need TH1 anymore!;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1621
https://github.com/root-project/root/pull/1622:49,integrability,event,event,49,v7 graphics needs no Gpad; This solves the Cocoa event loop issue - we really don't care about Cocoa anymore!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1622
https://github.com/root-project/root/pull/1624:21,usability,user,user,21,Introduce vector for user axes.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1624
https://github.com/root-project/root/pull/1625:10,deployability,instal,installation,10,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:134,deployability,build,build,134,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:296,deployability,instal,installation,296,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:785,deployability,updat,update,785,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:625,performance,content,contents,625,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:176,safety,compl,complicated,176,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:760,safety,safe,safer,760,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:785,safety,updat,update,785,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:817,safety,avoid,avoid,817,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:176,security,compl,complicated,176,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:697,security,modif,modified,697,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:785,security,updat,update,785,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:875,testability,simpl,simple,875,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:805,usability,help,help,805,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1625:875,usability,simpl,simple,875,"etc/ file installation fix, master branch (2018.02.13.); This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1625
https://github.com/root-project/root/pull/1628:525,energy efficiency,adapt,adapts,525,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:367,integrability,pub,public,367,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:461,integrability,pub,public,461,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:511,integrability,interfac,interface,511,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:525,integrability,adapt,adapts,525,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:540,integrability,interfac,interfaced,540,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:591,integrability,interfac,interface,591,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:511,interoperability,interfac,interface,511,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:525,interoperability,adapt,adapts,525,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:540,interoperability,interfac,interfaced,540,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:591,interoperability,interfac,interface,591,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:511,modifiability,interfac,interface,511,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:525,modifiability,adapt,adapts,525,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:540,modifiability,interfac,interfaced,540,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:591,modifiability,interfac,interface,591,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:185,safety,test,test,185,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:185,testability,test,test,185,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1628:121,usability,Tool,Tools,121,"[TMVA] Template RandomGenerator; This PR:. - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools. - Replaces use of the old class with the new one. - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`. These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1628
https://github.com/root-project/root/pull/1629:77,availability,error,errors,77,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:110,deployability,updat,update,110,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:140,deployability,API,API,140,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:140,integrability,API,API,140,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:140,interoperability,API,API,140,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:77,performance,error,errors,77,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:77,safety,error,errors,77,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:103,safety,test,tests,103,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:110,safety,updat,update,110,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:110,security,updat,update,110,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:103,testability,test,tests,103,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1629:77,usability,error,errors,77,"[TMVA] Remove useless one-line scripts from PyKeras examples that cau…; …sed errors in the incremental tests, update tutorials to Keras 2.x API",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1629
https://github.com/root-project/root/pull/1630:27,interoperability,registr,registration,27,Attrs: split reference and registration;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1630
https://github.com/root-project/root/pull/1631:0,energy efficiency,Draw,Draw,0,Draw returns shared_ptr and accepts options;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1631
https://github.com/root-project/root/pull/1632:55,deployability,patch,patch,55,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:161,deployability,build,build,161,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:232,deployability,patch,patches,232,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:293,deployability,instal,installed,293,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:326,deployability,build,build,326,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:367,deployability,configurat,configuration,367,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:435,deployability,version,version,435,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:476,deployability,build,build,476,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:508,deployability,depend,dependencies,508,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:601,deployability,instal,installed,601,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:656,deployability,depend,depends,656,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:728,deployability,depend,dependencies,728,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:819,deployability,patch,patch,819,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:911,deployability,build,build,911,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:1192,deployability,instal,installed,1192,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:427,energy efficiency,adapt,adapted,427,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:1128,energy efficiency,reduc,reduce,1128,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:312,integrability,configur,configure,312,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:367,integrability,configur,configuration,367,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:427,integrability,adapt,adapted,427,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:435,integrability,version,version,435,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:508,integrability,depend,dependencies,508,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:656,integrability,depend,depends,656,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:728,integrability,depend,dependencies,728,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:875,integrability,sub,suboptimal,875,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:897,integrability,configur,configure,897,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:93,interoperability,compatib,compatible,93,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:223,interoperability,specif,specific,223,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:427,interoperability,adapt,adapted,427,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:450,interoperability,standard,standard,450,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:620,interoperability,standard,standard,620,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:312,modifiability,configur,configure,312,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:367,modifiability,configur,configuration,367,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:427,modifiability,adapt,adapted,427,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:435,modifiability,version,version,435,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:508,modifiability,depend,dependencies,508,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:634,modifiability,pac,package,634,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:656,modifiability,depend,depends,656,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:728,modifiability,depend,dependencies,728,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:897,modifiability,configur,configure,897,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:1147,performance,time,times,1147,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:55,safety,patch,patch,55,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:232,safety,patch,patches,232,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:508,safety,depend,dependencies,508,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:573,safety,test,testsuite,573,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:656,safety,depend,depends,656,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:711,safety,avoid,avoid,711,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:728,safety,depend,dependencies,728,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:754,safety,compl,complicating,754,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:787,safety,compl,complicated,787,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:819,safety,patch,patch,819,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:55,security,patch,patch,55,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:232,security,patch,patches,232,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:312,security,configur,configure,312,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:367,security,configur,configuration,367,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:754,security,compl,complicating,754,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:787,security,compl,complicated,787,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:819,security,patch,patch,819,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:897,security,configur,configure,897,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:508,testability,depend,dependencies,508,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:573,testability,test,testsuite,573,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:656,testability,depend,depends,656,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:728,testability,depend,dependencies,728,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:703,usability,tool,tool,703,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1632:835,usability,minim,minimal,835,"Use vanilla llvm; Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup. . This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1632
https://github.com/root-project/root/pull/1633:33,deployability,build,build,33,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:192,deployability,stage,stage,192,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:272,deployability,build,build,272,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:75,modifiability,variab,variables,75,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:140,reliability,pra,practice,140,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:168,safety,compl,complicated,168,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:257,safety,prevent,prevents,257,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:168,security,compl,complicated,168,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:257,security,preven,prevents,257,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1633:233,usability,Visual,VisualStudio,233,[cmake] Drop setting the default build type.; Messing up with cmake system variables such as CMAKE_CONFIGURATION_TYPES. is considered a bad practice. It becomes overly complicated for multi-. stage cmake generators such as XCode and VisualStudio. This code prevents us to build against vanilla llvm and as per D33444. we were advised to revisit this code. This PR blocks #1632.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1633
https://github.com/root-project/root/pull/1634:36,performance,memor,memory,36,[TMVA] TestCrossValidationSerialise memory handling; Two dynamic objects were not properly destroyed at program exit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1634
https://github.com/root-project/root/pull/1634:7,safety,Test,TestCrossValidationSerialise,7,[TMVA] TestCrossValidationSerialise memory handling; Two dynamic objects were not properly destroyed at program exit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1634
https://github.com/root-project/root/pull/1634:7,testability,Test,TestCrossValidationSerialise,7,[TMVA] TestCrossValidationSerialise memory handling; Two dynamic objects were not properly destroyed at program exit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1634
https://github.com/root-project/root/pull/1634:36,usability,memor,memory,36,[TMVA] TestCrossValidationSerialise memory handling; Two dynamic objects were not properly destroyed at program exit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1634
https://github.com/root-project/root/pull/1635:68,availability,consist,consistency,68,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:446,availability,down,downsides,446,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:345,deployability,build,build,345,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:385,deployability,build,builds,385,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:551,deployability,updat,update,551,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:559,deployability,build,build,559,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:570,deployability,modul,module,570,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:577,deployability,modul,modulemap,577,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:1,energy efficiency,Core,Core,1,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:283,energy efficiency,core,core,283,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:157,interoperability,compatib,compatibility,157,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:570,modifiability,modul,module,570,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:577,modifiability,modul,modulemap,577,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:626,modifiability,requires chang,requires changes,626,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:551,safety,updat,update,551,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:570,safety,modul,module,570,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:577,safety,modul,modulemap,577,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:551,security,updat,update,551,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:179,testability,simpl,simply,179,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:68,usability,consist,consistency,68,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:179,usability,simpl,simply,179,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1635:474,usability,close,close,474,"[Core] Move RStringView.h to ROOT/RStringView.hxx; This is done for consistency with the other backports. The old header RStringView.h is left for backwards compatibility, and it simply includes ROOT/RStringView.hxx. Due to our cmake rules this change requires a removal of $ROOTSYS/core. (or anyway a regeneration of the cmake rules for it) in build. directories used for incremental builds. I think of this PR as a ""nice to have"", and I see no downsides, but feel free to close it if you are against such a change. @vgvassilev I did not know how to update `build/unix/module.modulemap` so I left it as is, let me know if it requires changes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1635
https://github.com/root-project/root/pull/1636:65,safety,Test,Testing,65,"Upgrate builtins for zlib, lz4, and xxhash with new mechanism; **Testing only, do not merge.**",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1636
https://github.com/root-project/root/pull/1636:65,testability,Test,Testing,65,"Upgrate builtins for zlib, lz4, and xxhash with new mechanism; **Testing only, do not merge.**",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1636
https://github.com/root-project/root/pull/1638:36,deployability,fail,failing,36,Test fixes; Here are some fixes for failing tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1638
https://github.com/root-project/root/pull/1638:36,reliability,fail,failing,36,Test fixes; Here are some fixes for failing tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1638
https://github.com/root-project/root/pull/1638:0,safety,Test,Test,0,Test fixes; Here are some fixes for failing tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1638
https://github.com/root-project/root/pull/1638:44,safety,test,tests,44,Test fixes; Here are some fixes for failing tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1638
https://github.com/root-project/root/pull/1638:0,testability,Test,Test,0,Test fixes; Here are some fixes for failing tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1638
https://github.com/root-project/root/pull/1638:44,testability,test,tests,44,Test fixes; Here are some fixes for failing tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1638
https://github.com/root-project/root/pull/1639:626,safety,test,tests,626,"Protect against out-of-bounds access; I chose to put this issue in a separate PR since there might be a better fix than the one proposed here. The loops that fills the ci1 and c12 vectors are defined as:. for (Int_t i=1; i<=fH1->GetNbinsX();++i) {. while the loop that reads the values back is defined as:. for (Int_t i=0; i<=fH1->GetNbinsX();++i) {. i.e. it has one more iteration (since it starts at 0 instead of 1). So on the last iteration it accesses the vector beyond its last element. This PR just adds a protection and makes sure the out-of-bounds element is not read and replaces it with a zero. While this makes the tests not crash, I am not sure there isn't some other bug here, and that the proper fix is something else. That the code tries to read one more value from the vector than it writes is suspicious.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1639
https://github.com/root-project/root/pull/1639:30,security,access,access,30,"Protect against out-of-bounds access; I chose to put this issue in a separate PR since there might be a better fix than the one proposed here. The loops that fills the ci1 and c12 vectors are defined as:. for (Int_t i=1; i<=fH1->GetNbinsX();++i) {. while the loop that reads the values back is defined as:. for (Int_t i=0; i<=fH1->GetNbinsX();++i) {. i.e. it has one more iteration (since it starts at 0 instead of 1). So on the last iteration it accesses the vector beyond its last element. This PR just adds a protection and makes sure the out-of-bounds element is not read and replaces it with a zero. While this makes the tests not crash, I am not sure there isn't some other bug here, and that the proper fix is something else. That the code tries to read one more value from the vector than it writes is suspicious.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1639
https://github.com/root-project/root/pull/1639:447,security,access,accesses,447,"Protect against out-of-bounds access; I chose to put this issue in a separate PR since there might be a better fix than the one proposed here. The loops that fills the ci1 and c12 vectors are defined as:. for (Int_t i=1; i<=fH1->GetNbinsX();++i) {. while the loop that reads the values back is defined as:. for (Int_t i=0; i<=fH1->GetNbinsX();++i) {. i.e. it has one more iteration (since it starts at 0 instead of 1). So on the last iteration it accesses the vector beyond its last element. This PR just adds a protection and makes sure the out-of-bounds element is not read and replaces it with a zero. While this makes the tests not crash, I am not sure there isn't some other bug here, and that the proper fix is something else. That the code tries to read one more value from the vector than it writes is suspicious.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1639
https://github.com/root-project/root/pull/1639:626,testability,test,tests,626,"Protect against out-of-bounds access; I chose to put this issue in a separate PR since there might be a better fix than the one proposed here. The loops that fills the ci1 and c12 vectors are defined as:. for (Int_t i=1; i<=fH1->GetNbinsX();++i) {. while the loop that reads the values back is defined as:. for (Int_t i=0; i<=fH1->GetNbinsX();++i) {. i.e. it has one more iteration (since it starts at 0 instead of 1). So on the last iteration it accesses the vector beyond its last element. This PR just adds a protection and makes sure the out-of-bounds element is not read and replaces it with a zero. While this makes the tests not crash, I am not sure there isn't some other bug here, and that the proper fix is something else. That the code tries to read one more value from the vector than it writes is suspicious.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1639
https://github.com/root-project/root/pull/1640:207,usability,command,command,207,Fix doxygen ~ alignment; The ~~~ at the start and the end of a code block must align to the same position on the line. Otherwise you get warnings:. warning: reached end of file while inside a ~~~ block! The command that should end the block seems to be missing!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1640
https://github.com/root-project/root/pull/1642:0,energy efficiency,Reduc,Reduce,0,Reduce extra char -> llvm::StringRef conversions.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1642
https://github.com/root-project/root/pull/1642:37,interoperability,convers,conversions,37,Reduce extra char -> llvm::StringRef conversions.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1642
https://github.com/root-project/root/pull/1643:5,deployability,instal,install,5,Make install improvements; Don't install intermediate static libs (mathtext and minicern). Don't add JupyROOT python extension to cmake exports.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1643
https://github.com/root-project/root/pull/1643:33,deployability,instal,install,33,Make install improvements; Don't install intermediate static libs (mathtext and minicern). Don't add JupyROOT python extension to cmake exports.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1643
https://github.com/root-project/root/pull/1643:41,modifiability,interm,intermediate,41,Make install improvements; Don't install intermediate static libs (mathtext and minicern). Don't add JupyROOT python extension to cmake exports.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1643
https://github.com/root-project/root/pull/1643:117,modifiability,extens,extension,117,Make install improvements; Don't install intermediate static libs (mathtext and minicern). Don't add JupyROOT python extension to cmake exports.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1643
https://github.com/root-project/root/pull/1644:0,energy efficiency,Draw,Draw,0,Draw returns options as shared_ptr;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1644
https://github.com/root-project/root/pull/1645:9,energy efficiency,Draw,Drawable,9,TText is Drawable;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1645
https://github.com/root-project/root/pull/1647:313,availability,Repair,Repair,313,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:357,deployability,Updat,Update,357,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:26,energy efficiency,draw,drawing,26,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:60,energy efficiency,Current,Current,60,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:302,energy efficiency,draw,drawables,302,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:35,performance,synch,synchronize,35,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:109,performance,I/O,I/O,109,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:313,reliability,Repair,Repair,313,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:357,safety,Updat,Update,357,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:357,security,Updat,Update,357,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1647:382,usability,support,supports,382,"webgui: adjust v7 classes drawing, synchronize jsroot code; Current v7 canvas cannot be stored in the file - I/O for shared_ptr<> not working. Because of that remove transfer of Pad/Canvas to the clients. Actually, it was not required at all. Also adjust extraction of attributes (line color) from the drawables. Repair all relevant macros in tutorials/v7. Update JSROOT, which now supports LZ4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1647
https://github.com/root-project/root/pull/1648:106,performance,content,content-of-,106,"Implement ""Print"" for TGraph2D and TGraph2DErrors.; As requested here: https://root-forum.cern.ch/t/print-content-of-tgraph2derrors/27972",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1648
https://github.com/root-project/root/pull/1650:29,deployability,updat,update,29,"webgui: adjust pad drawable, update jsroot code, missing dictionaries; Change pad/canvas drawable, that object itself is not included. Now only frame is provided (which is missing anyway). Add many missing dictionary entries for different drawable classes. Fix problem with TObjectDrawable for ROOT6 classes, jsroot code is not fully debugged. Newest JSROOT for v7 classes, including LZ4 support",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1650
https://github.com/root-project/root/pull/1650:19,energy efficiency,draw,drawable,19,"webgui: adjust pad drawable, update jsroot code, missing dictionaries; Change pad/canvas drawable, that object itself is not included. Now only frame is provided (which is missing anyway). Add many missing dictionary entries for different drawable classes. Fix problem with TObjectDrawable for ROOT6 classes, jsroot code is not fully debugged. Newest JSROOT for v7 classes, including LZ4 support",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1650
https://github.com/root-project/root/pull/1650:89,energy efficiency,draw,drawable,89,"webgui: adjust pad drawable, update jsroot code, missing dictionaries; Change pad/canvas drawable, that object itself is not included. Now only frame is provided (which is missing anyway). Add many missing dictionary entries for different drawable classes. Fix problem with TObjectDrawable for ROOT6 classes, jsroot code is not fully debugged. Newest JSROOT for v7 classes, including LZ4 support",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1650
https://github.com/root-project/root/pull/1650:239,energy efficiency,draw,drawable,239,"webgui: adjust pad drawable, update jsroot code, missing dictionaries; Change pad/canvas drawable, that object itself is not included. Now only frame is provided (which is missing anyway). Add many missing dictionary entries for different drawable classes. Fix problem with TObjectDrawable for ROOT6 classes, jsroot code is not fully debugged. Newest JSROOT for v7 classes, including LZ4 support",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1650
https://github.com/root-project/root/pull/1650:29,safety,updat,update,29,"webgui: adjust pad drawable, update jsroot code, missing dictionaries; Change pad/canvas drawable, that object itself is not included. Now only frame is provided (which is missing anyway). Add many missing dictionary entries for different drawable classes. Fix problem with TObjectDrawable for ROOT6 classes, jsroot code is not fully debugged. Newest JSROOT for v7 classes, including LZ4 support",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1650
https://github.com/root-project/root/pull/1650:29,security,updat,update,29,"webgui: adjust pad drawable, update jsroot code, missing dictionaries; Change pad/canvas drawable, that object itself is not included. Now only frame is provided (which is missing anyway). Add many missing dictionary entries for different drawable classes. Fix problem with TObjectDrawable for ROOT6 classes, jsroot code is not fully debugged. Newest JSROOT for v7 classes, including LZ4 support",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1650
https://github.com/root-project/root/pull/1650:388,usability,support,support,388,"webgui: adjust pad drawable, update jsroot code, missing dictionaries; Change pad/canvas drawable, that object itself is not included. Now only frame is provided (which is missing anyway). Add many missing dictionary entries for different drawable classes. Fix problem with TObjectDrawable for ROOT6 classes, jsroot code is not fully debugged. Newest JSROOT for v7 classes, including LZ4 support",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1650
https://github.com/root-project/root/pull/1651:11,modifiability,Refact,Refactor,11,[NFC][TDF] Refactor DeduceAllPODsFromTmpColumns;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1651
https://github.com/root-project/root/pull/1651:11,performance,Refactor,Refactor,11,[NFC][TDF] Refactor DeduceAllPODsFromTmpColumns;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1651
https://github.com/root-project/root/pull/1652:60,integrability,sub,substitutes,60,[TDF] Add a google test for Range; The dataframe_ranges.cxx substitutes the old test in roottest and. the test cases that were present in dataframe_regressions_tests.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1652
https://github.com/root-project/root/pull/1652:19,safety,test,test,19,[TDF] Add a google test for Range; The dataframe_ranges.cxx substitutes the old test in roottest and. the test cases that were present in dataframe_regressions_tests.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1652
https://github.com/root-project/root/pull/1652:80,safety,test,test,80,[TDF] Add a google test for Range; The dataframe_ranges.cxx substitutes the old test in roottest and. the test cases that were present in dataframe_regressions_tests.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1652
https://github.com/root-project/root/pull/1652:106,safety,test,test,106,[TDF] Add a google test for Range; The dataframe_ranges.cxx substitutes the old test in roottest and. the test cases that were present in dataframe_regressions_tests.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1652
https://github.com/root-project/root/pull/1652:19,testability,test,test,19,[TDF] Add a google test for Range; The dataframe_ranges.cxx substitutes the old test in roottest and. the test cases that were present in dataframe_regressions_tests.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1652
https://github.com/root-project/root/pull/1652:80,testability,test,test,80,[TDF] Add a google test for Range; The dataframe_ranges.cxx substitutes the old test in roottest and. the test cases that were present in dataframe_regressions_tests.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1652
https://github.com/root-project/root/pull/1652:106,testability,test,test,106,[TDF] Add a google test for Range; The dataframe_ranges.cxx substitutes the old test in roottest and. the test cases that were present in dataframe_regressions_tests.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1652
https://github.com/root-project/root/pull/1653:262,energy efficiency,draw,drawing,262,"webgui: improve TDisplayItem classes; These classes reflect information, which used in clients for display. Base class only includes displayed object id. It set by canvas itself and used later to identify object in interactive actions. Any additional info (like drawing options) provided in appropriate derived classes. Main change in ``TPadDisplayItem``, which belongs to gpadv7 and uses ``std::vector<std::unique_ptr<TDisplayItem>>`` to claim ownership of temporary-created items for each primitive. Adjust JSROOT code to correctly display ROOT6 objects in ROOT7 canvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1653
https://github.com/root-project/root/pull/1653:196,security,ident,identify,196,"webgui: improve TDisplayItem classes; These classes reflect information, which used in clients for display. Base class only includes displayed object id. It set by canvas itself and used later to identify object in interactive actions. Any additional info (like drawing options) provided in appropriate derived classes. Main change in ``TPadDisplayItem``, which belongs to gpadv7 and uses ``std::vector<std::unique_ptr<TDisplayItem>>`` to claim ownership of temporary-created items for each primitive. Adjust JSROOT code to correctly display ROOT6 objects in ROOT7 canvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1653
https://github.com/root-project/root/pull/1653:215,usability,interact,interactive,215,"webgui: improve TDisplayItem classes; These classes reflect information, which used in clients for display. Base class only includes displayed object id. It set by canvas itself and used later to identify object in interactive actions. Any additional info (like drawing options) provided in appropriate derived classes. Main change in ``TPadDisplayItem``, which belongs to gpadv7 and uses ``std::vector<std::unique_ptr<TDisplayItem>>`` to claim ownership of temporary-created items for each primitive. Adjust JSROOT code to correctly display ROOT6 objects in ROOT7 canvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1653
https://github.com/root-project/root/pull/1655:54,integrability,event,event,54,"[TDF] Fix ROOT-9272, entry loss when running multiple event loops with the same Range node;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1655
https://github.com/root-project/root/pull/1655:27,security,loss,loss,27,"[TDF] Fix ROOT-9272, entry loss when running multiple event loops with the same Range node;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1655
https://github.com/root-project/root/pull/1657:36,availability,restor,restore,36,Revert the range-based for loop and restore multiple ifs (try to fix …; …failing tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1657
https://github.com/root-project/root/pull/1657:73,deployability,fail,failing,73,Revert the range-based for loop and restore multiple ifs (try to fix …; …failing tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1657
https://github.com/root-project/root/pull/1657:36,reliability,restor,restore,36,Revert the range-based for loop and restore multiple ifs (try to fix …; …failing tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1657
https://github.com/root-project/root/pull/1657:73,reliability,fail,failing,73,Revert the range-based for loop and restore multiple ifs (try to fix …; …failing tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1657
https://github.com/root-project/root/pull/1657:81,safety,test,tests,81,Revert the range-based for loop and restore multiple ifs (try to fix …; …failing tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1657
https://github.com/root-project/root/pull/1657:81,testability,test,tests,81,Revert the range-based for loop and restore multiple ifs (try to fix …; …failing tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1657
https://github.com/root-project/root/pull/1658:36,availability,avail,available,36,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:349,availability,sli,slightly,349,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:282,deployability,build,build,282,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:471,energy efficiency,core,core,471,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:244,integrability,wrap,wrapped,244,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:36,reliability,availab,available,36,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:349,reliability,sli,slightly,349,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:569,reliability,doe,does,569,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:36,safety,avail,available,36,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:36,security,availab,available,36,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1658:512,usability,user,user,512,"Fixing requirement that all ROOT be available for Minuit2; This is a very conservative proposed solution to [ROOT-9274](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-9274), where one unneeded `Types.h` usage is removed and one more is wrapped in a protector. This allows a build system to turn off the including of `Types.h` if required. A slightly less conservative one would be to include `RConfigure.h` instead of `Types.h`, then `VecCore/VecCore` if the vec core define is on. It is possible that a user might want the side effects of `Types.h`, and Types does include `vc/vc` before VecCore, and I'm not sure if that's needed on first import, so I left this conservative.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1658
https://github.com/root-project/root/pull/1661:215,integrability,interfac,interface,215,"io: introducing TBufferIO class; It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``. Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:. * ReadClassBuffer. * WriteClassBuffer. * ReadClassEmulated. * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1661
https://github.com/root-project/root/pull/1661:569,integrability,interfac,interface,569,"io: introducing TBufferIO class; It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``. Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:. * ReadClassBuffer. * WriteClassBuffer. * ReadClassEmulated. * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1661
https://github.com/root-project/root/pull/1661:215,interoperability,interfac,interface,215,"io: introducing TBufferIO class; It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``. Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:. * ReadClassBuffer. * WriteClassBuffer. * ReadClassEmulated. * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1661
https://github.com/root-project/root/pull/1661:340,interoperability,format,format,340,"io: introducing TBufferIO class; It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``. Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:. * ReadClassBuffer. * WriteClassBuffer. * ReadClassEmulated. * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1661
https://github.com/root-project/root/pull/1661:569,interoperability,interfac,interface,569,"io: introducing TBufferIO class; It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``. Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:. * ReadClassBuffer. * WriteClassBuffer. * ReadClassEmulated. * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1661
https://github.com/root-project/root/pull/1661:215,modifiability,interfac,interface,215,"io: introducing TBufferIO class; It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``. Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:. * ReadClassBuffer. * WriteClassBuffer. * ReadClassEmulated. * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1661
https://github.com/root-project/root/pull/1661:569,modifiability,interfac,interface,569,"io: introducing TBufferIO class; It is base class for TBufferText and TBufferFile, combining common methods of both. It implements methods to work with objects map and some other virtual methods, defined in TBuffer interface. In TBufferFile **nullptr** replaces 0 (where it make sense) and ``printf()`` replaced with ``Info()``. Also clang format applied to the sources (excluding TBufferFile), use. As a next step, one can put following methods in TBufferIO:. * ReadClassBuffer. * WriteClassBuffer. * ReadClassEmulated. * ApplySequence. But here one need tiny virtual interface to use proper actions list for TBufferText or TBufferFile.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1661
https://github.com/root-project/root/pull/1662:81,availability,error,errors,81,"Add diagnostic counts, suuuper nice for tests!; ""And make sure we didn't see any errors or warnings.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1662
https://github.com/root-project/root/pull/1662:81,performance,error,errors,81,"Add diagnostic counts, suuuper nice for tests!; ""And make sure we didn't see any errors or warnings.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1662
https://github.com/root-project/root/pull/1662:4,reliability,diagno,diagnostic,4,"Add diagnostic counts, suuuper nice for tests!; ""And make sure we didn't see any errors or warnings.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1662
https://github.com/root-project/root/pull/1662:40,safety,test,tests,40,"Add diagnostic counts, suuuper nice for tests!; ""And make sure we didn't see any errors or warnings.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1662
https://github.com/root-project/root/pull/1662:81,safety,error,errors,81,"Add diagnostic counts, suuuper nice for tests!; ""And make sure we didn't see any errors or warnings.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1662
https://github.com/root-project/root/pull/1662:4,testability,diagno,diagnostic,4,"Add diagnostic counts, suuuper nice for tests!; ""And make sure we didn't see any errors or warnings.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1662
https://github.com/root-project/root/pull/1662:40,testability,test,tests,40,"Add diagnostic counts, suuuper nice for tests!; ""And make sure we didn't see any errors or warnings.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1662
https://github.com/root-project/root/pull/1662:81,usability,error,errors,81,"Add diagnostic counts, suuuper nice for tests!; ""And make sure we didn't see any errors or warnings.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1662
https://github.com/root-project/root/pull/1663:0,deployability,Integr,Integration,0,Integration of Qt5Web and CEF Web Displays for ROOT 7; This supercedes #1623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1663
https://github.com/root-project/root/pull/1663:0,integrability,Integr,Integration,0,Integration of Qt5Web and CEF Web Displays for ROOT 7; This supercedes #1623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1663
https://github.com/root-project/root/pull/1663:0,interoperability,Integr,Integration,0,Integration of Qt5Web and CEF Web Displays for ROOT 7; This supercedes #1623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1663
https://github.com/root-project/root/pull/1663:0,modifiability,Integr,Integration,0,Integration of Qt5Web and CEF Web Displays for ROOT 7; This supercedes #1623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1663
https://github.com/root-project/root/pull/1663:0,reliability,Integr,Integration,0,Integration of Qt5Web and CEF Web Displays for ROOT 7; This supercedes #1623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1663
https://github.com/root-project/root/pull/1663:0,security,Integr,Integration,0,Integration of Qt5Web and CEF Web Displays for ROOT 7; This supercedes #1623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1663
https://github.com/root-project/root/pull/1663:0,testability,Integr,Integration,0,Integration of Qt5Web and CEF Web Displays for ROOT 7; This supercedes #1623.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1663
https://github.com/root-project/root/pull/1664:33,deployability,releas,release,33,jsroot 5.4.0; Next stable JSROOT release,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1664
https://github.com/root-project/root/pull/1665:22,energy efficiency,Load,LoadCoreModules,22,[cxxmodules] Refactor LoadCoreModules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1665
https://github.com/root-project/root/pull/1665:13,modifiability,Refact,Refactor,13,[cxxmodules] Refactor LoadCoreModules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1665
https://github.com/root-project/root/pull/1665:13,performance,Refactor,Refactor,13,[cxxmodules] Refactor LoadCoreModules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1665
https://github.com/root-project/root/pull/1665:22,performance,Load,LoadCoreModules,22,[cxxmodules] Refactor LoadCoreModules;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1665
https://github.com/root-project/root/pull/1666:52,availability,error,error,52,Fix Root 9255; and 'fatal' typo leading to valgrind error on 32 bits.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1666
https://github.com/root-project/root/pull/1666:52,performance,error,error,52,Fix Root 9255; and 'fatal' typo leading to valgrind error on 32 bits.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1666
https://github.com/root-project/root/pull/1666:52,safety,error,error,52,Fix Root 9255; and 'fatal' typo leading to valgrind error on 32 bits.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1666
https://github.com/root-project/root/pull/1666:52,usability,error,error,52,Fix Root 9255; and 'fatal' typo leading to valgrind error on 32 bits.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1666
https://github.com/root-project/root/pull/1667:31,usability,minim,minimal,31,Misc fixes for TFormula; A few minimal fixes/improvements to TFormula.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1667
https://github.com/root-project/root/pull/1668:534,deployability,patch,patch,534,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:81,integrability,interfac,interfaces,81,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:753,integrability,interfac,interfaces,753,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:81,interoperability,interfac,interfaces,81,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:753,interoperability,interfac,interfaces,753,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:81,modifiability,interfac,interfaces,81,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:753,modifiability,interfac,interfaces,753,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:498,performance,perform,performs,498,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:470,reliability,doe,does,470,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:534,safety,patch,patch,534,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:534,security,patch,patch,534,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1668:498,usability,perform,performs,498,"Remove TClingClassInfo iteration; Do not set up the iterator in the ctor. . Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang. . In a few cases we still use the pattern:. `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`. where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup. . This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1668
https://github.com/root-project/root/pull/1669:977,availability,error,error,977,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:42,integrability,Transform,TransformationHandler,42,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:317,integrability,messag,message,317,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1396,integrability,messag,message,1396,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:42,interoperability,Transform,TransformationHandler,42,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:317,interoperability,messag,message,317,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1396,interoperability,messag,message,1396,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:0,modifiability,exten,extended,0,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:444,modifiability,variab,variables,444,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:509,modifiability,Variab,Variable,509,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1087,modifiability,variab,variables,1087,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1145,modifiability,Variab,Variable,1145,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1238,modifiability,variab,variable,1238,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1431,modifiability,variab,variable,1431,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1552,modifiability,variab,variables,1552,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:977,performance,error,error,977,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1247,performance,content,content,1247,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1274,reliability,doe,does,1274,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:23,safety,valid,validation,23,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:977,safety,error,error,977,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:23,security,validat,validation,23,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:792,security,sign,signal,792,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:1535,testability,understand,understand,1535,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1669:977,usability,error,error,977,"extended output of rms-validation in tmva/TransformationHandler; - add check if rms is NaN. - output value of rms (zero, negative, or NaN). - set rms to zero if it is NaN (before only done for zero or negative values). → I suspect the training will have problems in that situation anyway but **I think** it makes the message easier to digest:. before:. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <HEADER> TFHandler_Factory : Variable Mean RMS [ Min Max ]. : ------------------------------------------------------------------------------------------------------------------. : LifeTime: 0.0011344 -nan [ 8.5046e-05 0.024133 ]. …. : Some more output. : -nan -nan -nan -nan -nan -nan. <FATAL> : <GetSeparation> signal and background histograms have different or invalid dimensions:. ***> abort program execution. terminate called after throwing an instance of 'std::runtime_error'. what(): FATAL error. ```. after. ```. …. <WARNING> <WARNING> : Dataset[Default] : <GetCorrelationMatrix> Zero variances for variables (0, 2) = -2.14875e-05. …. <WARNING> <WARNING> : Variable ""LifeTime"" has zero, negative, or NaN RMS^2: -nan ==> set to zero. Please check the variable content. ```. I.e. the nan does not appear in the table anymore (where I didn't spot it first) but the abnormal value gets pulled out into a WARNING message. (Where it also comes with variable name, as opposed to the long list of correlation matrix warning, which makes it non-trivial to understand which variables are problematic, if many, and comes w/o human readable names). tbh: I have not yet understood why NaN arrives there (… well a few lines before the √ of a negative number is computed … but I don't yet know why that arrived there. Still investigating, will follow up once I know more).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1669
https://github.com/root-project/root/pull/1670:0,energy efficiency,Draw,Drawing,0,Drawing opts return attr;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1670
https://github.com/root-project/root/pull/1671:161,deployability,contain,container,161,"Use /bin/env instead of /usr/bin/env in shell scripts; This improves portability since /usr/bin/env is not always guaranteed. to be there. This is true for some container images, and some old unix. variants. I found this out trying to build ROOT inside a container myself...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1671
https://github.com/root-project/root/pull/1671:235,deployability,build,build,235,"Use /bin/env instead of /usr/bin/env in shell scripts; This improves portability since /usr/bin/env is not always guaranteed. to be there. This is true for some container images, and some old unix. variants. I found this out trying to build ROOT inside a container myself...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1671
https://github.com/root-project/root/pull/1671:255,deployability,contain,container,255,"Use /bin/env instead of /usr/bin/env in shell scripts; This improves portability since /usr/bin/env is not always guaranteed. to be there. This is true for some container images, and some old unix. variants. I found this out trying to build ROOT inside a container myself...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1671
https://github.com/root-project/root/pull/1671:69,modifiability,portab,portability,69,"Use /bin/env instead of /usr/bin/env in shell scripts; This improves portability since /usr/bin/env is not always guaranteed. to be there. This is true for some container images, and some old unix. variants. I found this out trying to build ROOT inside a container myself...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1671
https://github.com/root-project/root/pull/1674:25,performance,content,contents,25,[TDF] Fix: finish moving contents of TDFInterface.cxx to TDFInterface.cxx to TDFUtils.cxx;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1674
https://github.com/root-project/root/pull/1675:6,deployability,instal,install,6,Don't install intermediate static lib minicern; This change was split off from #1643 since it suggested that it needed to be postponed until 6.14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1675
https://github.com/root-project/root/pull/1675:14,modifiability,interm,intermediate,14,Don't install intermediate static lib minicern; This change was split off from #1643 since it suggested that it needed to be postponed until 6.14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1675
https://github.com/root-project/root/pull/1676:6,deployability,Integr,Integrate,6,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:6,integrability,Integr,Integrate,6,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:6,interoperability,Integr,Integrate,6,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:6,modifiability,Integr,Integrate,6,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:111,performance,memor,memory,111,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:6,reliability,Integr,Integrate,6,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:6,security,Integr,Integrate,6,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:6,testability,Integr,Integrate,6,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:59,usability,user,user,59,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1676:111,usability,memor,memory,111,"[TDF] Integrate TVec with TDF; Leverage TVec to deliver to user collections of data which feature a contiguous memory storage, for example when coming from a TTreeReaderArray.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1676
https://github.com/root-project/root/pull/1677:259,deployability,build,build,259,"Minuit2 fixes; Hi, I am one of the iminuit developers (https://github.com/iminuit/iminuit). We are glad that Minuit2 is still usable as a package separate from ROOT and thank the ROOT developers for that. It makes our life much easier. The iminuit package is build by copying the Minuit2 code in ROOT and building a Cython wrapper around it. Because we compile and use the Minuit2 code outside of the ROOT build environment, we found and fixed some bugs, which we would like to merge upstream in ROOT as well. Each of the two commits in this PR fixes one issue. The first is rather trivial, `MnPrint` is used unconditionally, even though the corresponding header `MnPrint.h` is only included if certain compiler flags are set. The second one is a change in the interface of the `MinimumBuilder` base class. We run Minuit using the `MnMigrad` class. Without this change, there is no way to change the print level in a particular instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1677
https://github.com/root-project/root/pull/1677:305,deployability,build,building,305,"Minuit2 fixes; Hi, I am one of the iminuit developers (https://github.com/iminuit/iminuit). We are glad that Minuit2 is still usable as a package separate from ROOT and thank the ROOT developers for that. It makes our life much easier. The iminuit package is build by copying the Minuit2 code in ROOT and building a Cython wrapper around it. Because we compile and use the Minuit2 code outside of the ROOT build environment, we found and fixed some bugs, which we would like to merge upstream in ROOT as well. Each of the two commits in this PR fixes one issue. The first is rather trivial, `MnPrint` is used unconditionally, even though the corresponding header `MnPrint.h` is only included if certain compiler flags are set. The second one is a change in the interface of the `MinimumBuilder` base class. We run Minuit using the `MnMigrad` class. Without this change, there is no way to change the print level in a particular instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1677
https://github.com/root-project/root/pull/1677:406,deployability,build,build,406,"Minuit2 fixes; Hi, I am one of the iminuit developers (https://github.com/iminuit/iminuit). We are glad that Minuit2 is still usable as a package separate from ROOT and thank the ROOT developers for that. It makes our life much easier. The iminuit package is build by copying the Minuit2 code in ROOT and building a Cython wrapper around it. Because we compile and use the Minuit2 code outside of the ROOT build environment, we found and fixed some bugs, which we would like to merge upstream in ROOT as well. Each of the two commits in this PR fixes one issue. The first is rather trivial, `MnPrint` is used unconditionally, even though the corresponding header `MnPrint.h` is only included if certain compiler flags are set. The second one is a change in the interface of the `MinimumBuilder` base class. We run Minuit using the `MnMigrad` class. Without this change, there is no way to change the print level in a particular instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1677
https://github.com/root-project/root/pull/1677:982,deployability,log,logical,982,"Minuit2 fixes; Hi, I am one of the iminuit developers (https://github.com/iminuit/iminuit). We are glad that Minuit2 is still usable as a package separate from ROOT and thank the ROOT developers for that. It makes our life much easier. The iminuit package is build by copying the Minuit2 code in ROOT and building a Cython wrapper around it. Because we compile and use the Minuit2 code outside of the ROOT build environment, we found and fixed some bugs, which we would like to merge upstream in ROOT as well. Each of the two commits in this PR fixes one issue. The first is rather trivial, `MnPrint` is used unconditionally, even though the corresponding header `MnPrint.h` is only included if certain compiler flags are set. The second one is a change in the interface of the `MinimumBuilder` base class. We run Minuit using the `MnMigrad` class. Without this change, there is no way to change the print level in a particular instance of MnMigrad. The change does not violate the logical constness of MinimumBuilder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/1677
