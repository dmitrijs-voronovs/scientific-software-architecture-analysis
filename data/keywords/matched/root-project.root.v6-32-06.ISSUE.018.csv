id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/4521:146,usability,visual,visualize,146,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4521:642,usability,error,error,642,"Unfold plotting; New PR after rebasing the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4521
https://github.com/root-project/root/pull/4522:16,safety,test,tests,16,Re-add tmva DNN tests ; Re-add tmva test directories were removed by mistake in a previous commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4522
https://github.com/root-project/root/pull/4522:36,safety,test,test,36,Re-add tmva DNN tests ; Re-add tmva test directories were removed by mistake in a previous commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4522
https://github.com/root-project/root/pull/4522:16,testability,test,tests,16,Re-add tmva DNN tests ; Re-add tmva test directories were removed by mistake in a previous commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4522
https://github.com/root-project/root/pull/4522:36,testability,test,test,36,Re-add tmva DNN tests ; Re-add tmva test directories were removed by mistake in a previous commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4522
https://github.com/root-project/root/pull/4523:519,safety,test,tests,519,"[rdrawable] rename setter/getter methods for attributes; Now for each attribute three methods should be used:. 1. const Getter. 2. non-const Setter. 3. Access by reference. ```. const RAttrText &GetAttrText() const { return fAttrText; }. CustomAttrs &SetAttrText(const RAttrText &txt) { fAttrText = txt; return *this; }. RAttrText &AttrText() { return fAttrText; }. ```. Such set of methods allow to clearly separate const and non-const. access. And when setter is used, chain of methods can be called. Add several new tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:152,security,Access,Access,152,"[rdrawable] rename setter/getter methods for attributes; Now for each attribute three methods should be used:. 1. const Getter. 2. non-const Setter. 3. Access by reference. ```. const RAttrText &GetAttrText() const { return fAttrText; }. CustomAttrs &SetAttrText(const RAttrText &txt) { fAttrText = txt; return *this; }. RAttrText &AttrText() { return fAttrText; }. ```. Such set of methods allow to clearly separate const and non-const. access. And when setter is used, chain of methods can be called. Add several new tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:438,security,access,access,438,"[rdrawable] rename setter/getter methods for attributes; Now for each attribute three methods should be used:. 1. const Getter. 2. non-const Setter. 3. Access by reference. ```. const RAttrText &GetAttrText() const { return fAttrText; }. CustomAttrs &SetAttrText(const RAttrText &txt) { fAttrText = txt; return *this; }. RAttrText &AttrText() { return fAttrText; }. ```. Such set of methods allow to clearly separate const and non-const. access. And when setter is used, chain of methods can be called. Add several new tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:519,testability,test,tests,519,"[rdrawable] rename setter/getter methods for attributes; Now for each attribute three methods should be used:. 1. const Getter. 2. non-const Setter. 3. Access by reference. ```. const RAttrText &GetAttrText() const { return fAttrText; }. CustomAttrs &SetAttrText(const RAttrText &txt) { fAttrText = txt; return *this; }. RAttrText &AttrText() { return fAttrText; }. ```. Such set of methods allow to clearly separate const and non-const. access. And when setter is used, chain of methods can be called. Add several new tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:238,usability,Custom,CustomAttrs,238,"[rdrawable] rename setter/getter methods for attributes; Now for each attribute three methods should be used:. 1. const Getter. 2. non-const Setter. 3. Access by reference. ```. const RAttrText &GetAttrText() const { return fAttrText; }. CustomAttrs &SetAttrText(const RAttrText &txt) { fAttrText = txt; return *this; }. RAttrText &AttrText() { return fAttrText; }. ```. Such set of methods allow to clearly separate const and non-const. access. And when setter is used, chain of methods can be called. Add several new tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4523:400,usability,clear,clearly,400,"[rdrawable] rename setter/getter methods for attributes; Now for each attribute three methods should be used:. 1. const Getter. 2. non-const Setter. 3. Access by reference. ```. const RAttrText &GetAttrText() const { return fAttrText; }. CustomAttrs &SetAttrText(const RAttrText &txt) { fAttrText = txt; return *this; }. RAttrText &AttrText() { return fAttrText; }. ```. Such set of methods allow to clearly separate const and non-const. access. And when setter is used, chain of methods can be called. Add several new tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4523
https://github.com/root-project/root/pull/4524:87,availability,state,statements,87,Remove TObjectSpy.h and TBuffer3D.h includes from some GPad sources; Use clear =delete statements in TObjectSpy and TBufer3D classes declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4524
https://github.com/root-project/root/pull/4524:87,integrability,state,statements,87,Remove TObjectSpy.h and TBuffer3D.h includes from some GPad sources; Use clear =delete statements in TObjectSpy and TBufer3D classes declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4524
https://github.com/root-project/root/pull/4524:73,usability,clear,clear,73,Remove TObjectSpy.h and TBuffer3D.h includes from some GPad sources; Use clear =delete statements in TObjectSpy and TBufer3D classes declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4524
https://github.com/root-project/root/pull/4525:15,availability,down,down,15,hadd fast tear down; Significantly speed up the tear down of hadd and its reduce memory use,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4525
https://github.com/root-project/root/pull/4525:53,availability,down,down,53,hadd fast tear down; Significantly speed up the tear down of hadd and its reduce memory use,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4525
https://github.com/root-project/root/pull/4525:74,energy efficiency,reduc,reduce,74,hadd fast tear down; Significantly speed up the tear down of hadd and its reduce memory use,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4525
https://github.com/root-project/root/pull/4525:81,performance,memor,memory,81,hadd fast tear down; Significantly speed up the tear down of hadd and its reduce memory use,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4525
https://github.com/root-project/root/pull/4525:21,security,Sign,Significantly,21,hadd fast tear down; Significantly speed up the tear down of hadd and its reduce memory use,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4525
https://github.com/root-project/root/pull/4525:81,usability,memor,memory,81,hadd fast tear down; Significantly speed up the tear down of hadd and its reduce memory use,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4525
https://github.com/root-project/root/pull/4526:19,availability,error,error,19,[v7 tutorials] fix error in draw_mt.cxx; Multithreaded drawing requires exact knowledge that main thread id is. Now it assigned when RWebWindowManager is created - first thread with RWebWindow. Therefore do it in advance from the main thread. Later one could provide more intelegent solution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4526
https://github.com/root-project/root/pull/4526:55,energy efficiency,draw,drawing,55,[v7 tutorials] fix error in draw_mt.cxx; Multithreaded drawing requires exact knowledge that main thread id is. Now it assigned when RWebWindowManager is created - first thread with RWebWindow. Therefore do it in advance from the main thread. Later one could provide more intelegent solution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4526
https://github.com/root-project/root/pull/4526:19,performance,error,error,19,[v7 tutorials] fix error in draw_mt.cxx; Multithreaded drawing requires exact knowledge that main thread id is. Now it assigned when RWebWindowManager is created - first thread with RWebWindow. Therefore do it in advance from the main thread. Later one could provide more intelegent solution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4526
https://github.com/root-project/root/pull/4526:19,safety,error,error,19,[v7 tutorials] fix error in draw_mt.cxx; Multithreaded drawing requires exact knowledge that main thread id is. Now it assigned when RWebWindowManager is created - first thread with RWebWindow. Therefore do it in advance from the main thread. Later one could provide more intelegent solution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4526
https://github.com/root-project/root/pull/4526:19,usability,error,error,19,[v7 tutorials] fix error in draw_mt.cxx; Multithreaded drawing requires exact knowledge that main thread id is. Now it assigned when RWebWindowManager is created - first thread with RWebWindow. Therefore do it in advance from the main thread. Later one could provide more intelegent solution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4526
https://github.com/root-project/root/pull/4528:101,energy efficiency,draw,draw,101,"[webgui] support Safari on Mac; When running on macOS, one could specify now:. root.exe --web=safari draw.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4528
https://github.com/root-project/root/pull/4528:65,interoperability,specif,specify,65,"[webgui] support Safari on Mac; When running on macOS, one could specify now:. root.exe --web=safari draw.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4528
https://github.com/root-project/root/pull/4528:9,usability,support,support,9,"[webgui] support Safari on Mac; When running on macOS, one could specify now:. root.exe --web=safari draw.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4528
https://github.com/root-project/root/pull/4529:4,usability,help,help,4,Dot help v2; New PR for .help,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4529:25,usability,help,help,25,Dot help v2; New PR for .help,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4529
https://github.com/root-project/root/pull/4531:560,availability,operat,operations,560,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:653,availability,operat,operations,653,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:130,energy efficiency,GPU,GPU,130,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:578,energy efficiency,CPU,CPU,578,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:649,energy efficiency,GPU,GPU,649,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:108,interoperability,architectur,architecture,108,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:582,interoperability,architectur,architecture,582,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:522,modifiability,extens,extension,522,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:130,performance,GPU,GPU,130,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:291,performance,perform,performance,291,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:327,performance,network,networks,327,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:578,performance,CPU,CPU,578,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:649,performance,GPU,GPU,649,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:273,security,sign,significantly,273,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:327,security,network,networks,327,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:11,usability,support,support,11,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4531:291,usability,perform,performance,291,"[TMVA] Add support for using cuDNN in TMVA MethodDL and migrate code to use Tensor class; This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. . This includes the work of Joana Niermann, OpenLab summer stuident 2019. . This accelerates significantly the performance in convolutional neural networks. . See the figure below. [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4531
https://github.com/root-project/root/pull/4532:40,integrability,sub,subfolder,40,Move v7 files one level up excluing v7/ subfolder;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4532
https://github.com/root-project/root/pull/4533:690,availability,error,error,690,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:238,energy efficiency,current,currently,238,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:322,energy efficiency,draw,drawn,322,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:395,energy efficiency,draw,drawn,395,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:716,energy efficiency,draw,draw,716,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:477,performance,time,times,477,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:690,performance,error,error,690,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:690,safety,error,error,690,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:21,usability,Close,Closed,21,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:194,usability,visual,visualize,194,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4533:690,usability,error,error,690,"New unfold plotting; Closed the previously opened MR as I had messed up something with the branch. @cburgard's description of the changes:. The RooFit ""plotOn"" plotting engine is very useful to visualize RooFit objects. However, there is currently a strict separation between ""Data-like"" objects (which can only really be drawn with points) and ""Function-like"" objects (which can only really be drawn as lines and areas). However, in techniques like unfolding, ""data"" is often times corrected data, and hence might actually be a function-type object in RooFit. With this PR, functionality is added to RooAbsReal::plotOn that allows to plot functions ""data-like"", with data points including error bars when using the draw option ""P"", which was previously unusable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4533
https://github.com/root-project/root/pull/4534:0,energy efficiency,Reduc,Reduce,0,"Reduce usage of core/meta includes; Many places in source files the are not used. Class TToggleGroup not used at all in the ROOT. Probably, it can be declared - seems to be it is from some early GUI classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4534
https://github.com/root-project/root/pull/4534:16,energy efficiency,core,core,16,"Reduce usage of core/meta includes; Many places in source files the are not used. Class TToggleGroup not used at all in the ROOT. Probably, it can be declared - seems to be it is from some early GUI classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4534
https://github.com/root-project/root/pull/4535:271,energy efficiency,core,core,271,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:310,energy efficiency,Current,Current,310,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:355,energy efficiency,core,core,355,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:384,energy efficiency,core,core,384,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:426,energy efficiency,core,core,426,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:138,integrability,sub,subclasses,138,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:295,integrability,sub,sub-directory,295,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:115,usability,support,support,115,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:133,usability,user,user,133,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:333,usability,menu,menu,333,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4535:369,usability,menu,menu,369,"Playground for moving TToggle [DO NOT MERGE]; Small attempt to move-out TToggle class. One can do it, but to fully support potential user subclasses, one should use TToggleBase class. Not nice, therefore can be skipped. But as other idea - try to organize GUI-classes in core at least in single sub-directory. Current situation when menu items appears in core/meta and menu itself in core/base is wired. Like making directory core/gui. With mid-term aim - factor-out them into libCoreGui at some point. @pcanal @Axel-Naumann @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4535
https://github.com/root-project/root/pull/4536:36,deployability,depend,depending,36,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:97,deployability,depend,depending,97,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:200,deployability,integr,integrator,200,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:167,energy efficiency,Adapt,AdaptiveGauss,167,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:36,integrability,depend,depending,36,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:97,integrability,depend,depending,97,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:167,integrability,Adapt,AdaptiveGauss,167,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:200,integrability,integr,integrator,200,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:167,interoperability,Adapt,AdaptiveGauss,167,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:200,interoperability,integr,integrator,200,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:36,modifiability,depend,depending,36,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:97,modifiability,depend,depending,97,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:167,modifiability,Adapt,AdaptiveGauss,167,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:200,modifiability,integr,integrator,200,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:200,reliability,integr,integrator,200,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:36,safety,depend,depending,36,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:97,safety,depend,depending,97,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:200,security,integr,integrator,200,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:36,testability,depend,depending,36,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:97,testability,depend,depending,97,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4536:200,testability,integr,integrator,200,"Add libRooFitMore: Move roofit file depending on GSL in a new library ; Move the fRoofit classes depending on GSL in a new library libRooFitMore. The classes are: . - AdaptiveGauss and GausKronrod 1D integrator from Roofitcore. - Legendre, non-central chi2 and SphArmonic pdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4536
https://github.com/root-project/root/pull/4537:494,deployability,modul,module,494,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:552,deployability,modul,module,552,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:653,deployability,modul,module,653,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:677,deployability,patch,patch,677,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:719,deployability,build,building,719,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:494,modifiability,modul,module,494,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:552,modifiability,modul,module,552,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:653,modifiability,modul,module,653,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:494,safety,modul,module,494,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:552,safety,modul,module,552,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:597,safety,compl,complain,597,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:653,safety,modul,module,653,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:677,safety,patch,patch,677,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:597,security,compl,complain,597,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:677,security,patch,patch,677,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4537:12,usability,Support,Support,12,"[rootcling] Support umbrella headers for dictionaries.; When calling rootcling we expect a set of header files and a selection file. In some cases it is more convenient to include all of them in a single header and give it to rootcling. In cases where the header files are so many and exceed the maximum characters allowed by the console the umbrella header is the only way to work it around. In cases where the umbrella header is temporary (such as in cmssw) we cannot add it as a part of the module, however, we have added its direct includes in the module definition. Then rootcling should not complain if the umbrella header file is not part of the module definition. This patch should fix the issues in cmssw when building a dictionary for DataFormats/StdDictionaries. cc: @smuzaffar, @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4537
https://github.com/root-project/root/pull/4539:271,availability,failur,failures,271,Extend -ast-dump for CXXRecordDecl to dump the flags from the Definit…; …ionData. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@313943 91177308-0d34-0410-b5e6-96231b3b80d8. This prints the definition data of the CXXRecordDecls making it easier to debug merging failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4539
https://github.com/root-project/root/pull/4539:271,deployability,fail,failures,271,Extend -ast-dump for CXXRecordDecl to dump the flags from the Definit…; …ionData. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@313943 91177308-0d34-0410-b5e6-96231b3b80d8. This prints the definition data of the CXXRecordDecls making it easier to debug merging failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4539
https://github.com/root-project/root/pull/4539:0,modifiability,Exten,Extend,0,Extend -ast-dump for CXXRecordDecl to dump the flags from the Definit…; …ionData. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@313943 91177308-0d34-0410-b5e6-96231b3b80d8. This prints the definition data of the CXXRecordDecls making it easier to debug merging failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4539
https://github.com/root-project/root/pull/4539:271,performance,failur,failures,271,Extend -ast-dump for CXXRecordDecl to dump the flags from the Definit…; …ionData. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@313943 91177308-0d34-0410-b5e6-96231b3b80d8. This prints the definition data of the CXXRecordDecls making it easier to debug merging failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4539
https://github.com/root-project/root/pull/4539:271,reliability,fail,failures,271,Extend -ast-dump for CXXRecordDecl to dump the flags from the Definit…; …ionData. git-svn-id: https://llvm.org/svn/llvm-project/cfe/trunk@313943 91177308-0d34-0410-b5e6-96231b3b80d8. This prints the definition data of the CXXRecordDecls making it easier to debug merging failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4539
https://github.com/root-project/root/pull/4540:1137,availability,state,state,1137,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:25,deployability,modul,modules,25,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:67,deployability,modul,modules,67,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:98,deployability,modul,modulemap,98,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:114,deployability,modul,module,114,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:131,deployability,modul,modulemap,131,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:204,deployability,modul,module,204,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:254,deployability,artifact,artifacts,254,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:267,deployability,modul,modulemaps,267,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:360,deployability,Modul,Module,360,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:388,deployability,modul,module,388,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:422,deployability,modul,module,422,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:453,deployability,modul,module,453,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:671,deployability,modul,module,671,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:759,deployability,integr,integrity,759,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:961,deployability,modul,module,961,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:980,deployability,patch,patch,980,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1015,deployability,modul,module,1015,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1089,deployability,modul,modules,1089,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:20,energy efficiency,load,load,20,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:942,energy efficiency,load,loading,942,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1129,energy efficiency,current,current,1129,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:239,integrability,discover,discover,239,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:571,integrability,discover,discoverables,571,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:759,integrability,integr,integrity,759,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:780,integrability,filter,filters,780,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1022,integrability,discover,discovery,1022,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1137,integrability,state,state,1137,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:239,interoperability,discover,discover,239,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:304,interoperability,specif,specified,304,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:571,interoperability,discover,discoverables,571,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:759,interoperability,integr,integrity,759,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:818,interoperability,distribut,distribution,818,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1022,interoperability,discover,discovery,1022,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:25,modifiability,modul,modules,25,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:67,modifiability,modul,modules,67,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:98,modifiability,modul,modulemap,98,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:114,modifiability,modul,module,114,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:131,modifiability,modul,modulemap,131,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:204,modifiability,modul,module,204,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:267,modifiability,modul,modulemaps,267,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:360,modifiability,Modul,Module,360,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:388,modifiability,modul,module,388,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:422,modifiability,modul,module,422,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:453,modifiability,modul,module,453,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:553,modifiability,exten,extend,553,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:671,modifiability,modul,module,671,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:759,modifiability,integr,integrity,759,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:961,modifiability,modul,module,961,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1015,modifiability,modul,module,1015,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1089,modifiability,modul,modules,1089,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:20,performance,load,load,20,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:395,performance,cach,cache,395,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:792,performance,content,contents,792,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:942,performance,load,loading,942,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:759,reliability,integr,integrity,759,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:25,safety,modul,modules,25,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:67,safety,modul,modules,67,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:98,safety,modul,modulemap,98,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:114,safety,modul,module,114,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:131,safety,modul,modulemap,131,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:204,safety,modul,module,204,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:267,safety,modul,modulemaps,267,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:360,safety,Modul,Module,360,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:388,safety,modul,module,388,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:422,safety,modul,module,422,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:453,safety,modul,module,453,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:671,safety,modul,module,671,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:883,safety,compl,complementary,883,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:961,safety,modul,module,961,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:980,safety,patch,patch,980,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1015,safety,modul,module,1015,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1089,safety,modul,modules,1089,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:759,security,integr,integrity,759,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:883,security,compl,complementary,883,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:980,security,patch,patch,980,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:759,testability,integr,integrity,759,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:239,usability,discov,discover,239,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:571,usability,discov,discoverables,571,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4540:1022,usability,discov,discovery,1022,"[cxxmodules] Do not load modules from entire LD_LIBRARY_PATH.; C++ modules have two concepts -- a modulemap and a module file. The modulemap gives the mapping between a set of header files present in the module file. Clang has two ways to discover these artifacts -- modulemaps must be either explicitly specified or they have to be on the include paths (-I). Module files must be in the module cache path or the prebuilt module path. ROOT enforces the module files to be next to the library files. In some cases it the LD_LIBRARY_PATH is considered to extend the set of discoverables ROOT libraries. Over the years we have considered the LD_LIBRARY_PATH as the prebuilt module file locations. Relying on it leads to a number of issues. First, the osx system integrity protection filters its contents. Second, the LCG distribution mechanism can set the LD_LIBRARY_PATH to point to a complementary location of ROOT. In this case we will start loading irrelevant module files. This patch disables the LD_LIBRARY_PATH module discovery and relies on ROOT to provide its set of locations where modules should be present. Nowadays the current state of the implementation allows us to enforce this finer granularity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4540
https://github.com/root-project/root/pull/4541:170,availability,cluster,clusters,170,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4541:170,deployability,cluster,clusters,170,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4541:498,interoperability,semant,semantics,498,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4541:1045,interoperability,semant,semantics,1045,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4541:759,modifiability,paramet,parameter,759,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4541:1353,safety,test,tested,1353,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4541:1461,safety,test,tests,1461,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4541:1353,testability,test,tested,1353,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4541:1461,testability,test,tests,1461,"[ntuple] Add feature to chain and befriend ntuples; This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`). 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4541
https://github.com/root-project/root/pull/4542:3,energy efficiency,Draw,DrawEventStatus,3,In DrawEventStatus: Print x AsSQLString if SetTimeDisplay true;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4542
https://github.com/root-project/root/pull/4543:29,energy efficiency,core,core,29,Move gui-related includes to core/gui subdirectory; Main GUI-related classes should be collected in `core/gui` folder. Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:101,energy efficiency,core,core,101,Move gui-related includes to core/gui subdirectory; Main GUI-related classes should be collected in `core/gui` folder. Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:167,energy efficiency,core,core,167,Move gui-related includes to core/gui subdirectory; Main GUI-related classes should be collected in `core/gui` folder. Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:38,integrability,sub,subdirectory,38,Move gui-related includes to core/gui subdirectory; Main GUI-related classes should be collected in `core/gui` folder. Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:178,integrability,sub,subfolder,178,Move gui-related includes to core/gui subdirectory; Main GUI-related classes should be collected in `core/gui` folder. Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4543:119,safety,Avoid,Avoid,119,Move gui-related includes to core/gui subdirectory; Main GUI-related classes should be collected in `core/gui` folder. Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4543
https://github.com/root-project/root/pull/4544:36,usability,STATU,STATUS,36,[cmake] Switching to builtin_tbb is STATUS like for others.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4544
https://github.com/root-project/root/pull/4545:17,availability,redund,redundant,17,[rootcling] Drop redundant function parameter.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4545:17,deployability,redundan,redundant,17,[rootcling] Drop redundant function parameter.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4545:36,modifiability,paramet,parameter,36,[rootcling] Drop redundant function parameter.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4545:17,reliability,redundan,redundant,17,[rootcling] Drop redundant function parameter.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4545:17,safety,redund,redundant,17,[rootcling] Drop redundant function parameter.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4545
https://github.com/root-project/root/pull/4547:813,deployability,modul,modules,813,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:892,deployability,modul,module,892,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:953,deployability,patch,patch,953,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:326,integrability,translat,translation,326,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:397,integrability,translat,translation,397,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:326,interoperability,translat,translation,326,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:397,interoperability,translat,translation,397,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:366,modifiability,variab,variable,366,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:751,modifiability,variab,variable,751,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:813,modifiability,modul,modules,813,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:892,modifiability,modul,module,892,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:771,performance,content,content,771,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:813,safety,modul,modules,813,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:892,safety,modul,module,892,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:953,safety,patch,patch,953,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:1017,safety,compl,completely,1017,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:602,security,access,access,602,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:877,security,control,control,877,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:953,security,patch,patch,953,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:1017,security,compl,completely,1017,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:877,testability,control,control,877,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4547:512,usability,help,helpful,512,"[rootcling] Add a meaning to the -reflex flag.; -reflex was deprecated because the flag was parsed but nothing was done after. Rootcling works in two modes. The first mode is when it is called directly. The second mode is when it was called from genreflex. Genreflex is essentially calling rootcling with the appropriate flag translation and it sets the isGenReflex variable to true. The argument translation mechanism of genreflex has a nice feature which can print the underlying rootcling invocation. This is helpful if we want to move away from reflex to rootcling. This might be reasonable to get access to the finer grained arguments and options rootcling provides. However, we should still call rootcling and set the isGenReflex to true as the variable alters the content of the dictionaries. In cmssw C++ modules IB we use rootcling instead of genreflex to have better control on the module generation provided by the rootcling option set. This patch implements a flag which can turn the rootcling invocation completely to genreflex. Using rootcling -reflex should fix the DataFormats/Provenance dictionary generation for cmssw. cc: @oshadura, @smuzaffar, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4547
https://github.com/root-project/root/pull/4549:13,usability,Document,Document,13,[Tree][Docs] Document TTree::Branch().;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4549
https://github.com/root-project/root/pull/4550:33,safety,valid,validation,33,[6.18] [cxxmodules][pch] Disable validation of transent files; https://sft.its.cern.ch/jira/browse/ROOT-10361,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4550
https://github.com/root-project/root/pull/4550:33,security,validat,validation,33,[6.18] [cxxmodules][pch] Disable validation of transent files; https://sft.its.cern.ch/jira/browse/ROOT-10361,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4550
https://github.com/root-project/root/pull/4551:28,energy efficiency,alloc,allocated,28,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:156,energy efficiency,alloc,allocated,156,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:38,integrability,buffer,buffer,38,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:110,integrability,buffer,buffer,110,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:138,integrability,buffer,buffer,138,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:68,interoperability,format,formatted,68,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:209,performance,memor,memory,209,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:185,safety,avoid,avoid,185,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:17,security,access,access,17,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:219,security,access,accessed,219,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4551:209,usability,memor,memory,209,"TMessage: do not access not-allocated buffer ROOT-10340; When wrong-formatted TMessage is received, length of buffer may be 0. As result, buffer may not be allocated at all. One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4551
https://github.com/root-project/root/pull/4552:33,safety,valid,validation,33,[6.16] [cxxmodules][pch] Disable validation of transent files;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4552
https://github.com/root-project/root/pull/4552:33,security,validat,validation,33,[6.16] [cxxmodules][pch] Disable validation of transent files;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4552
https://github.com/root-project/root/pull/4553:310,availability,error,errors,310,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:40,deployability,modul,modulemaps,40,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:114,deployability,modul,module-maps,114,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:175,deployability,modul,module,175,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:182,deployability,modul,modulemap,182,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:240,deployability,modul,modulemap,240,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:290,deployability,modul,module,290,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:323,deployability,patch,patch,323,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:377,deployability,modul,modulemaps,377,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:405,deployability,modul,module-maps,405,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:516,deployability,modul,modulemap,516,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:585,deployability,patch,patch,585,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:619,deployability,modul,module,619,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:682,deployability,modul,modulemap,682,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:703,deployability,modul,modulemap,703,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:800,deployability,build,build,800,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:526,energy efficiency,load,loading,526,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1065,energy efficiency,core,core,1065,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:630,integrability,discover,discovery,630,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1070,integrability,compon,component,1070,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:367,interoperability,specif,specified,367,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:630,interoperability,discover,discovery,630,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:655,interoperability,specif,specifies,655,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1070,interoperability,compon,component,1070,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:40,modifiability,modul,modulemaps,40,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:114,modifiability,modul,module-maps,114,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:175,modifiability,modul,module,175,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:182,modifiability,modul,modulemap,182,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:240,modifiability,modul,modulemap,240,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:290,modifiability,modul,module,290,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:377,modifiability,modul,modulemaps,377,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:405,modifiability,modul,module-maps,405,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:506,modifiability,reu,reuse,506,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:516,modifiability,modul,modulemap,516,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:619,modifiability,modul,module,619,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:682,modifiability,modul,modulemap,682,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:703,modifiability,modul,modulemap,703,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:1070,modifiability,compon,component,1070,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:310,performance,error,errors,310,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:526,performance,load,loading,526,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:40,safety,modul,modulemaps,40,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:114,safety,modul,module-maps,114,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:175,safety,modul,module,175,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:182,safety,modul,modulemap,182,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:240,safety,modul,modulemap,240,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:290,safety,modul,module,290,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:310,safety,error,errors,310,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:323,safety,patch,patch,323,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:377,safety,modul,modulemaps,377,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:405,safety,modul,module-maps,405,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:516,safety,modul,modulemap,516,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:585,safety,patch,patch,585,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:619,safety,modul,module,619,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:682,safety,modul,modulemap,682,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:703,safety,modul,modulemap,703,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:323,security,patch,patch,323,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:585,security,patch,patch,585,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:310,usability,error,errors,310,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:467,usability,close,closer,467,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4553:630,usability,discov,discovery,630,"[cxxmodules] Teach cling about explicit modulemaps; Move TROOT::Get*Dir to FoundationUtils.; If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4553
https://github.com/root-project/root/pull/4554:3,energy efficiency,Draw,DrawEventStatus,3,"In DrawEventStatus, TimeDisplay: take TimeOffset into account;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4554
https://github.com/root-project/root/pull/4554:20,performance,Time,TimeDisplay,20,"In DrawEventStatus, TimeDisplay: take TimeOffset into account;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4554
https://github.com/root-project/root/pull/4554:38,performance,Time,TimeOffset,38,"In DrawEventStatus, TimeDisplay: take TimeOffset into account;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4554
https://github.com/root-project/root/pull/4555:31,deployability,infrastructur,infrastructure,31,"Introducing RBrowsable classes infrastructure; Idea to have specialized hierarchy of classes to represent main browsing functionality:. - Browsable::RElement - single element in hierarchy. - Browsable::RLevelIter - iterator over childs elements. - Browsable::Provider - factory class to create specialized implementation. - RBrowserItem - short description for clients. - RBrowsable - central class to browse through hierarchy. For now there are support classes for file system and for TFile/TDirectory/TKey are provided. Fully replaces custom code in RBrowser. Later support of all other hierarchical structures, probably including TObject::Browse() functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:446,usability,support,support,446,"Introducing RBrowsable classes infrastructure; Idea to have specialized hierarchy of classes to represent main browsing functionality:. - Browsable::RElement - single element in hierarchy. - Browsable::RLevelIter - iterator over childs elements. - Browsable::Provider - factory class to create specialized implementation. - RBrowserItem - short description for clients. - RBrowsable - central class to browse through hierarchy. For now there are support classes for file system and for TFile/TDirectory/TKey are provided. Fully replaces custom code in RBrowser. Later support of all other hierarchical structures, probably including TObject::Browse() functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:537,usability,custom,custom,537,"Introducing RBrowsable classes infrastructure; Idea to have specialized hierarchy of classes to represent main browsing functionality:. - Browsable::RElement - single element in hierarchy. - Browsable::RLevelIter - iterator over childs elements. - Browsable::Provider - factory class to create specialized implementation. - RBrowserItem - short description for clients. - RBrowsable - central class to browse through hierarchy. For now there are support classes for file system and for TFile/TDirectory/TKey are provided. Fully replaces custom code in RBrowser. Later support of all other hierarchical structures, probably including TObject::Browse() functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4555:568,usability,support,support,568,"Introducing RBrowsable classes infrastructure; Idea to have specialized hierarchy of classes to represent main browsing functionality:. - Browsable::RElement - single element in hierarchy. - Browsable::RLevelIter - iterator over childs elements. - Browsable::Provider - factory class to create specialized implementation. - RBrowserItem - short description for clients. - RBrowsable - central class to browse through hierarchy. For now there are support classes for file system and for TFile/TDirectory/TKey are provided. Fully replaces custom code in RBrowser. Later support of all other hierarchical structures, probably including TObject::Browse() functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4555
https://github.com/root-project/root/pull/4557:745,availability,avail,available,745,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:117,deployability,integr,integrals,117,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:812,deployability,integr,integral,812,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:884,deployability,integr,integrator,884,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:117,integrability,integr,integrals,117,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:812,integrability,integr,integral,812,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:884,integrability,integr,integrator,884,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:117,interoperability,integr,integrals,117,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:337,interoperability,share,shared,337,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:812,interoperability,integr,integral,812,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:884,interoperability,integr,integrator,884,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:117,modifiability,integr,integrals,117,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:812,modifiability,integr,integral,812,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:884,modifiability,integr,integrator,884,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:23,performance,Multi-thread,Multi-threading,23,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:624,performance,multi-thread,multi-thread,624,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:987,performance,multi-thread,multi-threading,987,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:117,reliability,integr,integrals,117,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:745,reliability,availab,available,745,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:812,reliability,integr,integral,812,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:884,reliability,integr,integrator,884,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:423,safety,avoid,avoid,423,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:593,safety,accid,accidentally,593,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:745,safety,avail,available,745,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:912,safety,test,testFit,912,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:948,safety,test,test,948,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:977,safety,test,tests,977,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:117,security,integr,integrals,117,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:745,security,availab,available,745,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:812,security,integr,integral,812,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:884,security,integr,integrator,884,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:117,testability,integr,integrals,117,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:812,testability,integr,integral,812,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:884,testability,integr,integrator,884,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:912,testability,test,testFit,912,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:948,testability,test,test,948,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4557:977,testability,test,tests,977,"Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals; Fixes for bug ROOT-1036 (FitResult::Scan). When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer ! This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. . One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals. Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4557
https://github.com/root-project/root/pull/4558:46,availability,consist,consistent,46,TFractionFitter:: updated documentation to be consistent with code;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4558
https://github.com/root-project/root/pull/4558:18,deployability,updat,updated,18,TFractionFitter:: updated documentation to be consistent with code;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4558
https://github.com/root-project/root/pull/4558:18,safety,updat,updated,18,TFractionFitter:: updated documentation to be consistent with code;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4558
https://github.com/root-project/root/pull/4558:18,security,updat,updated,18,TFractionFitter:: updated documentation to be consistent with code;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4558
https://github.com/root-project/root/pull/4558:26,usability,document,documentation,26,TFractionFitter:: updated documentation to be consistent with code;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4558
https://github.com/root-project/root/pull/4558:46,usability,consist,consistent,46,TFractionFitter:: updated documentation to be consistent with code;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4558
https://github.com/root-project/root/pull/4559:275,deployability,build,builds,275,Backport 6.16: Better enum support in TCling and PyROOT; This PR ports to 6.16 some fixes to get the underlying type of enums in PyROOT. This backport was requested in the ticket:. https://sft.its.cern.ch/jira/browse/ROOT-8935. Please @Axel-Naumann feel free to merge if the builds confirm everything is ok.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4559
https://github.com/root-project/root/pull/4559:27,usability,support,support,27,Backport 6.16: Better enum support in TCling and PyROOT; This PR ports to 6.16 some fixes to get the underlying type of enums in PyROOT. This backport was requested in the ticket:. https://sft.its.cern.ch/jira/browse/ROOT-8935. Please @Axel-Naumann feel free to merge if the builds confirm everything is ok.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4559
https://github.com/root-project/root/pull/4559:282,usability,confirm,confirm,282,Backport 6.16: Better enum support in TCling and PyROOT; This PR ports to 6.16 some fixes to get the underlying type of enums in PyROOT. This backport was requested in the ticket:. https://sft.its.cern.ch/jira/browse/ROOT-8935. Please @Axel-Naumann feel free to merge if the builds confirm everything is ok.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4559
https://github.com/root-project/root/pull/4560:11,deployability,fail,fails,11,Avoid ROOT fails reading objects derived from TH2Poly; This was reported in the Jira ticket ROOT-9741,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4560
https://github.com/root-project/root/pull/4560:11,reliability,fail,fails,11,Avoid ROOT fails reading objects derived from TH2Poly; This was reported in the Jira ticket ROOT-9741,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4560
https://github.com/root-project/root/pull/4560:0,safety,Avoid,Avoid,0,Avoid ROOT fails reading objects derived from TH2Poly; This was reported in the Jira ticket ROOT-9741,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4560
https://github.com/root-project/root/pull/4561:764,availability,error,errors,764,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2625,availability,error,error,2625,")':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2771,availability,Error,Error,2771,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2909,availability,Error,Error,2909,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3049,availability,Error,Error,3049,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3121,availability,Error,Error,3121,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3283,availability,down,down,3283,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3513,availability,avail,available,3513,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:84,deployability,build,build,84,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:237,deployability,build,build,237,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:373,deployability,build,build,373,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2684,deployability,build,build,2684,"omic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2734,deployability,fail,failed,2734,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2857,deployability,fail,failed,2857,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2996,deployability,fail,failed,2996,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3097,deployability,fail,failed,3097,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3531,deployability,build,build,3531,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3665,deployability,build,build,3665,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:168,energy efficiency,model,model-b-plus,168,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3428,energy efficiency,CPU,CPU,3428,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:804,interoperability,share,shared,804,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3417,interoperability,platform,platform,3417,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3596,interoperability,platform,platform,3596,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3712,interoperability,platform,platform,3712,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:764,performance,error,errors,764,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2625,performance,error,error,2625,")':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2771,performance,Error,Error,2771,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2909,performance,Error,Error,2909,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3049,performance,Error,Error,3049,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3121,performance,Error,Error,3121,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3428,performance,CPU,CPU,3428,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2734,reliability,fail,failed,2734,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2857,reliability,fail,failed,2857,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2996,reliability,fail,failed,2996,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3097,reliability,fail,failed,3097,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3513,reliability,availab,available,3513,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:764,safety,error,errors,764,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2625,safety,error,error,2625,")':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2771,safety,Error,Error,2771,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2909,safety,Error,Error,2909,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3049,safety,Error,Error,3049,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3121,safety,Error,Error,3121,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3482,safety,safe,safest,3482,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3513,safety,avail,available,3513,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:168,security,model,model-b-plus,168,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3513,security,availab,available,3513,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:334,usability,support,support,334,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:448,usability,document,documented,448,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:764,usability,error,errors,764,"ARM GCC 8 Fixes, master branch (2019.10.20.); These are fixes that I had to make to build ROOT on my [Raspberry Pi](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/) using [GCC 8](https://gcc.gnu.org/gcc-8/). (I need to build ROOT with a hand-built GCC 8, as I need [C\+\+17](https://en.wikipedia.org/wiki/C%2B%2B17) support in the projects that I want to build on top of ROOT...). The issue at hand is one that is reasonably well documented on various forums. Like:. - https://github.com/opencv/opencv/issues/15278. - https://github.com/aws/aws-sdk-cpp/issues/1199. One has to explicitly link binaries against [libatomic](https://github.com/gcc-mirror/gcc/tree/master/libatomic) under certain conditions... If not, the following kinds of linking errors happen:. ```. [100%] Linking CXX shared library ../../lib/libRIO.so. CMakeFiles/RIO.dir/src/TFilePrefetch.cxx.o: In function `TFilePrefetch::GetBlockFromCache(char const*, int)':. TFilePrefetch.cxx:(.text+0x1424): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, int) [clone .part.82]':. TFile.cxx:(.text+0x1444): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffer(char*, long long, int)':. TFile.cxx:(.text+0x3738): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::ReadBuffers(char*, long long*, int*, int)':. TFile.cxx:(.text+0x53a4): undefined reference to `__atomic_fetch_sub_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::WriteBuffer(char const*, int)':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2625,usability,error,error,2625,")':. TFile.cxx:(.text+0x5ddc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2651,usability,statu,status,2651,"dc): undefined reference to `__atomic_fetch_add_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2771,usability,Error,Error,2771,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:2909,usability,Error,Error,2909,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3049,usability,Error,Error,3049,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4561:3121,usability,Error,Error,3121,"r/src/TFile.cxx.o: In function `TFile::GetFileBytesRead()':. TFile.cxx:(.text+0xb370): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileBytesWritten()':. TFile.cxx:(.text+0xb390): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesRead(long long)':. TFile.cxx:(.text+0xb430): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::SetFileBytesWritten(long long)':. TFile.cxx:(.text+0xb470): undefined reference to `__atomic_store_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::GetFileCounter()':. TFile.cxx:(.text+0xb4c0): undefined reference to `__atomic_load_8'. CMakeFiles/RIO.dir/src/TFile.cxx.o: In function `TFile::IncrementFileCounter()':. TFile.cxx:(.text+0xb4f4): undefined reference to `__atomic_fetch_add_8'. collect2: error: ld returned 1 exit status. io/io/CMakeFiles/RIO.dir/build.make:599: recipe for target 'lib/libRIO.so' failed. make[3]: *** [lib/libRIO.so] Error 1. CMakeFiles/Makefile2:21040: recipe for target 'io/io/CMakeFiles/RIO.dir/all' failed. make[2]: *** [io/io/CMakeFiles/RIO.dir/all] Error 2. CMakeFiles/Makefile2:21052: recipe for target 'io/io/CMakeFiles/RIO.dir/rule' failed. make[1]: *** [io/io/CMakeFiles/RIO.dir/rule] Error 2. Makefile:5971: recipe for target 'RIO' failed. make: *** [RIO] Error 2. ```. Note that I had to add `${ROOT_ATOMIC_LIBS}` in a few more places than I would've liked. Ideally the linking against `libatomic` should've trickled down to almost all ROOT libraries from `libRIO`. I'm not sure why it didn't. :confused:. I was also wondering about possibly adding a platform / CPU check to the code, but in the end this seemed the safest. That if `libatomic` is available for the build, then the code would explicitly use it independent of what platform it is being built on. Though of course I have not tried the build of this branch of mine on every possible platform...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4561
https://github.com/root-project/root/pull/4562:25,deployability,modul,modulemaps,25,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:70,deployability,patch,patch,70,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:125,deployability,modul,modulemap,125,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:172,deployability,modul,modulemaps,172,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:227,deployability,modul,module-maps,227,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:258,deployability,patch,patch,258,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:287,deployability,build,builds,287,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:242,interoperability,specif,specified,242,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:25,modifiability,modul,modulemaps,25,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:125,modifiability,modul,modulemap,125,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:172,modifiability,modul,modulemaps,172,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:227,modifiability,modul,module-maps,227,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:25,safety,modul,modulemaps,25,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:70,safety,patch,patch,70,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:125,safety,modul,modulemap,125,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:172,safety,modul,modulemaps,172,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:227,safety,modul,module-maps,227,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:258,safety,patch,patch,258,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:70,security,patch,patch,70,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4562:258,security,patch,patch,258,[cxxmodules] Collect the modulemaps even if no overlay is set. ; This patch tightens the implementation of the collection of modulemap files. It still gathers all 'system' modulemaps necessary for cling to run if -fno-implicit-module-maps is specified. This patch should unbreak our osx builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4562
https://github.com/root-project/root/pull/4563:29,deployability,modul,modulemap,29,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:55,deployability,patch,patch,55,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:117,deployability,modul,modulemaps,117,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:29,modifiability,modul,modulemap,29,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:117,modifiability,modul,modulemaps,117,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:29,safety,modul,modulemap,29,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:55,safety,patch,patch,55,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:78,safety,detect,detect,78,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:117,safety,modul,modulemaps,117,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:55,security,patch,patch,55,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4563:78,security,detect,detect,78,"[cxxmodules] Sink {libc,std}.modulemap in cling.; This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4563
https://github.com/root-project/root/pull/4564:161,deployability,updat,updates,161,Add Hypatia PDF; LHCb requested adding the Hypatia PDF. A function for fast batch evaluations is missing. Also sneaked in a few small bugfixes and documentation updates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4564
https://github.com/root-project/root/pull/4564:76,integrability,batch,batch,76,Add Hypatia PDF; LHCb requested adding the Hypatia PDF. A function for fast batch evaluations is missing. Also sneaked in a few small bugfixes and documentation updates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4564
https://github.com/root-project/root/pull/4564:76,performance,batch,batch,76,Add Hypatia PDF; LHCb requested adding the Hypatia PDF. A function for fast batch evaluations is missing. Also sneaked in a few small bugfixes and documentation updates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4564
https://github.com/root-project/root/pull/4564:161,safety,updat,updates,161,Add Hypatia PDF; LHCb requested adding the Hypatia PDF. A function for fast batch evaluations is missing. Also sneaked in a few small bugfixes and documentation updates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4564
https://github.com/root-project/root/pull/4564:161,security,updat,updates,161,Add Hypatia PDF; LHCb requested adding the Hypatia PDF. A function for fast batch evaluations is missing. Also sneaked in a few small bugfixes and documentation updates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4564
https://github.com/root-project/root/pull/4564:147,usability,document,documentation,147,Add Hypatia PDF; LHCb requested adding the Hypatia PDF. A function for fast batch evaluations is missing. Also sneaked in a few small bugfixes and documentation updates.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4564
https://github.com/root-project/root/pull/4565:52,deployability,build,build,52,Remove ZSTD from set of required targets for Travis build;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4565
https://github.com/root-project/root/pull/4566:13,deployability,Updat,Update,13,[ROOT-10370] Update buitin version of CFITSIO;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4566
https://github.com/root-project/root/pull/4566:27,deployability,version,version,27,[ROOT-10370] Update buitin version of CFITSIO;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4566
https://github.com/root-project/root/pull/4566:27,integrability,version,version,27,[ROOT-10370] Update buitin version of CFITSIO;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4566
https://github.com/root-project/root/pull/4566:27,modifiability,version,version,27,[ROOT-10370] Update buitin version of CFITSIO;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4566
https://github.com/root-project/root/pull/4566:13,safety,Updat,Update,13,[ROOT-10370] Update buitin version of CFITSIO;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4566
https://github.com/root-project/root/pull/4566:13,security,Updat,Update,13,[ROOT-10370] Update buitin version of CFITSIO;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4566
https://github.com/root-project/root/pull/4568:51,availability,redund,redundant,51,Generate offset map performance improvement; Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:51,deployability,redundan,redundant,51,Generate offset map performance improvement; Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:20,performance,perform,performance,20,Generate offset map performance improvement; Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:51,reliability,redundan,redundant,51,Generate offset map performance improvement; Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:45,safety,Avoid,Avoid,45,Generate offset map performance improvement; Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:51,safety,redund,redundant,51,Generate offset map performance improvement; Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4568:20,usability,perform,performance,20,Generate offset map performance improvement; Avoid redundant read (both unzipping and unstreaming in case basket are not perfectly aligned and same size),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4568
https://github.com/root-project/root/pull/4569:82,usability,menu,menu,82,WIP RBrowser new tabs types; This PR is based on PR #4555 . This PR add a popover menu to new tab button to select which type of tab you want to add :. - Code editor. - Root 6 canvas. - Root 7 canvas. - Image viewer,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4569
https://github.com/root-project/root/pull/4571:15,availability,down,down,15,hadd fast tear down v2;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4571
https://github.com/root-project/root/pull/4574:25,availability,state,statement,25,[TWebFile] avoid if/else statement with same result ROOT-10373;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4574
https://github.com/root-project/root/pull/4574:25,integrability,state,statement,25,[TWebFile] avoid if/else statement with same result ROOT-10373;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4574
https://github.com/root-project/root/pull/4574:11,safety,avoid,avoid,11,[TWebFile] avoid if/else statement with same result ROOT-10373;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4574
https://github.com/root-project/root/pull/4575:26,availability,operat,operators,26,[RF] Implement assignment operators for important RooFit base classes.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4575
https://github.com/root-project/root/pull/4576:122,deployability,modul,modules,122,Dummy PR to run master on bots; This is done to check if something is wrong with the bots running experimental pyroot and modules off,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4576
https://github.com/root-project/root/pull/4576:122,modifiability,modul,modules,122,Dummy PR to run master on bots; This is done to check if something is wrong with the bots running experimental pyroot and modules off,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4576
https://github.com/root-project/root/pull/4576:122,safety,modul,modules,122,Dummy PR to run master on bots; This is done to check if something is wrong with the bots running experimental pyroot and modules off,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4576
https://github.com/root-project/root/pull/4577:21,safety,test,test,21,[Do not merge] PR to test new root-jenkins;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4577:21,testability,test,test,21,[Do not merge] PR to test new root-jenkins;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4577
https://github.com/root-project/root/pull/4578:15,availability,down,down,15,hadd fast tear down v618;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4578
https://github.com/root-project/root/pull/4579:15,availability,down,down,15,hadd fast tear down v618;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4579
https://github.com/root-project/root/pull/4580:61,interoperability,platform,platform,61,Remove unsused capture in TCling; Fix warning in macOS/cxx17 platform,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4580
https://github.com/root-project/root/pull/4581:35,deployability,modul,module,35,[cxxmodules] ROOT_Rtypes is a core module.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4581
https://github.com/root-project/root/pull/4581:30,energy efficiency,core,core,30,[cxxmodules] ROOT_Rtypes is a core module.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4581
https://github.com/root-project/root/pull/4581:35,modifiability,modul,module,35,[cxxmodules] ROOT_Rtypes is a core module.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4581
https://github.com/root-project/root/pull/4581:35,safety,modul,module,35,[cxxmodules] ROOT_Rtypes is a core module.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4581
https://github.com/root-project/root/pull/4583:353,deployability,contain,contains,353,"Mark pointer TStreamerElement as 'CannotSplit'; This prevents TBranchElement's GatherArtificialElements from. infinitely recursing (pointlessly) through a setup like:. ```. class Vertex;. class Event {. Vertex *fVertex;. };. class Vertex {. Event *fEvent;. };. ```. In addition:. When a branch is created from a TFolder (or if the top level branch name contains a non trailing dot, case which is 'inadvertently confused with the TFolder case), the top level branch name is prefixed (+ a trailing dot) to the sub-branch name *but* the name of base class is not suffixed to the name of their corresponding branches. GatherArtificialElements was not handling this case correctly and thus tried 'too hard' to find (non-missing) branches for the base classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:194,integrability,Event,Event,194,"Mark pointer TStreamerElement as 'CannotSplit'; This prevents TBranchElement's GatherArtificialElements from. infinitely recursing (pointlessly) through a setup like:. ```. class Vertex;. class Event {. Vertex *fVertex;. };. class Vertex {. Event *fEvent;. };. ```. In addition:. When a branch is created from a TFolder (or if the top level branch name contains a non trailing dot, case which is 'inadvertently confused with the TFolder case), the top level branch name is prefixed (+ a trailing dot) to the sub-branch name *but* the name of base class is not suffixed to the name of their corresponding branches. GatherArtificialElements was not handling this case correctly and thus tried 'too hard' to find (non-missing) branches for the base classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:241,integrability,Event,Event,241,"Mark pointer TStreamerElement as 'CannotSplit'; This prevents TBranchElement's GatherArtificialElements from. infinitely recursing (pointlessly) through a setup like:. ```. class Vertex;. class Event {. Vertex *fVertex;. };. class Vertex {. Event *fEvent;. };. ```. In addition:. When a branch is created from a TFolder (or if the top level branch name contains a non trailing dot, case which is 'inadvertently confused with the TFolder case), the top level branch name is prefixed (+ a trailing dot) to the sub-branch name *but* the name of base class is not suffixed to the name of their corresponding branches. GatherArtificialElements was not handling this case correctly and thus tried 'too hard' to find (non-missing) branches for the base classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:508,integrability,sub,sub-branch,508,"Mark pointer TStreamerElement as 'CannotSplit'; This prevents TBranchElement's GatherArtificialElements from. infinitely recursing (pointlessly) through a setup like:. ```. class Vertex;. class Event {. Vertex *fVertex;. };. class Vertex {. Event *fEvent;. };. ```. In addition:. When a branch is created from a TFolder (or if the top level branch name contains a non trailing dot, case which is 'inadvertently confused with the TFolder case), the top level branch name is prefixed (+ a trailing dot) to the sub-branch name *but* the name of base class is not suffixed to the name of their corresponding branches. GatherArtificialElements was not handling this case correctly and thus tried 'too hard' to find (non-missing) branches for the base classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:53,safety,prevent,prevents,53,"Mark pointer TStreamerElement as 'CannotSplit'; This prevents TBranchElement's GatherArtificialElements from. infinitely recursing (pointlessly) through a setup like:. ```. class Vertex;. class Event {. Vertex *fVertex;. };. class Vertex {. Event *fEvent;. };. ```. In addition:. When a branch is created from a TFolder (or if the top level branch name contains a non trailing dot, case which is 'inadvertently confused with the TFolder case), the top level branch name is prefixed (+ a trailing dot) to the sub-branch name *but* the name of base class is not suffixed to the name of their corresponding branches. GatherArtificialElements was not handling this case correctly and thus tried 'too hard' to find (non-missing) branches for the base classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4583:53,security,preven,prevents,53,"Mark pointer TStreamerElement as 'CannotSplit'; This prevents TBranchElement's GatherArtificialElements from. infinitely recursing (pointlessly) through a setup like:. ```. class Vertex;. class Event {. Vertex *fVertex;. };. class Vertex {. Event *fEvent;. };. ```. In addition:. When a branch is created from a TFolder (or if the top level branch name contains a non trailing dot, case which is 'inadvertently confused with the TFolder case), the top level branch name is prefixed (+ a trailing dot) to the sub-branch name *but* the name of base class is not suffixed to the name of their corresponding branches. GatherArtificialElements was not handling this case correctly and thus tried 'too hard' to find (non-missing) branches for the base classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4583
https://github.com/root-project/root/pull/4584:116,deployability,stack,stackoverflow,116,"[TCling] Fix lambda capture warning:; The enclosing variable is not odr-used as it is a constant expr,. see https://stackoverflow.com/questions/28506342/understanding-the-example-on-lvalue-to-rvalue-conversion",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4584
https://github.com/root-project/root/pull/4584:199,interoperability,convers,conversion,199,"[TCling] Fix lambda capture warning:; The enclosing variable is not odr-used as it is a constant expr,. see https://stackoverflow.com/questions/28506342/understanding-the-example-on-lvalue-to-rvalue-conversion",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4584
https://github.com/root-project/root/pull/4584:52,modifiability,variab,variable,52,"[TCling] Fix lambda capture warning:; The enclosing variable is not odr-used as it is a constant expr,. see https://stackoverflow.com/questions/28506342/understanding-the-example-on-lvalue-to-rvalue-conversion",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4584
https://github.com/root-project/root/pull/4584:153,testability,understand,understanding-the-example-on-lvalue-to-rvalue-conversion,153,"[TCling] Fix lambda capture warning:; The enclosing variable is not odr-used as it is a constant expr,. see https://stackoverflow.com/questions/28506342/understanding-the-example-on-lvalue-to-rvalue-conversion",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4584
https://github.com/root-project/root/pull/4585:22,deployability,build,builds,22,"DO NOT MERGE! Test PR builds for root7, this should trigger a warning.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4585
https://github.com/root-project/root/pull/4585:14,safety,Test,Test,14,"DO NOT MERGE! Test PR builds for root7, this should trigger a warning.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4585
https://github.com/root-project/root/pull/4585:14,testability,Test,Test,14,"DO NOT MERGE! Test PR builds for root7, this should trigger a warning.;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4585
https://github.com/root-project/root/pull/4588:28,deployability,version,version,28,[cxxmodules] Add an initial version of a modulemap for cuda.; This should fix our TMVA cuda builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4588
https://github.com/root-project/root/pull/4588:41,deployability,modul,modulemap,41,[cxxmodules] Add an initial version of a modulemap for cuda.; This should fix our TMVA cuda builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4588
https://github.com/root-project/root/pull/4588:92,deployability,build,builds,92,[cxxmodules] Add an initial version of a modulemap for cuda.; This should fix our TMVA cuda builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4588
https://github.com/root-project/root/pull/4588:28,integrability,version,version,28,[cxxmodules] Add an initial version of a modulemap for cuda.; This should fix our TMVA cuda builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4588
https://github.com/root-project/root/pull/4588:28,modifiability,version,version,28,[cxxmodules] Add an initial version of a modulemap for cuda.; This should fix our TMVA cuda builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4588
https://github.com/root-project/root/pull/4588:41,modifiability,modul,modulemap,41,[cxxmodules] Add an initial version of a modulemap for cuda.; This should fix our TMVA cuda builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4588
https://github.com/root-project/root/pull/4588:41,safety,modul,modulemap,41,[cxxmodules] Add an initial version of a modulemap for cuda.; This should fix our TMVA cuda builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4588
https://github.com/root-project/root/pull/4589:98,availability,error,error,98,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:105,availability,Error,Error,105,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:196,availability,Failur,Failure,196,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:196,deployability,Fail,Failure,196,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:244,deployability,fail,failed,244,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:47,energy efficiency,model,model,47,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:29,integrability,protocol,protocol,29,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:29,interoperability,protocol,protocol,29,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:98,performance,error,error,98,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:105,performance,Error,Error,105,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:196,performance,Failur,Failure,196,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:196,reliability,Fail,Failure,196,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:244,reliability,fail,failed,244,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:98,safety,error,error,98,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:105,safety,Error,Error,105,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:47,security,model,model,47,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:219,security,certif,certificate,219,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:266,security,trust,trusted,266,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:231,testability,verif,verification,231,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:98,usability,error,error,98,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4589:105,usability,Error,Error,105,"[TMVA experimental] Use http protocol to fetch model file; This fixes tonights nightlies with the error `Error in <DavixOpen>: can not open file ""https://root.cern/files/tmva101.root"" with davix: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts (6)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4589
https://github.com/root-project/root/pull/4590:397,safety,test,tests,397,[Exp PyROOT] A few cherry picks from Cppyy; The fixes in this PR correspond to the three following cppyy issues:. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/168/boundary-check-not-implemented-for-signed. The corresponding tutorials/tests are re-enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4590
https://github.com/root-project/root/pull/4590:361,security,sign,signed,361,[Exp PyROOT] A few cherry picks from Cppyy; The fixes in this PR correspond to the three following cppyy issues:. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/168/boundary-check-not-implemented-for-signed. The corresponding tutorials/tests are re-enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4590
https://github.com/root-project/root/pull/4590:397,testability,test,tests,397,[Exp PyROOT] A few cherry picks from Cppyy; The fixes in this PR correspond to the three following cppyy issues:. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants. https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated. https://bitbucket.org/wlav/cppyy/issues/168/boundary-check-not-implemented-for-signed. The corresponding tutorials/tests are re-enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4590
https://github.com/root-project/root/pull/4591:233,availability,avail,available,233,"RBrowser revert to splitter; This commit revert the SplitApp into Splitter, it remove the bug of the TreeTable scrollbar appearing for no reason, and the bug of the breadcrumbs not creating the dropdown menu when not enough space is available. I believe that this revert is useful if after CHEP users want to to try it, it will be more stable and more enjoyable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4591
https://github.com/root-project/root/pull/4591:233,reliability,availab,available,233,"RBrowser revert to splitter; This commit revert the SplitApp into Splitter, it remove the bug of the TreeTable scrollbar appearing for no reason, and the bug of the breadcrumbs not creating the dropdown menu when not enough space is available. I believe that this revert is useful if after CHEP users want to to try it, it will be more stable and more enjoyable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4591
https://github.com/root-project/root/pull/4591:233,safety,avail,available,233,"RBrowser revert to splitter; This commit revert the SplitApp into Splitter, it remove the bug of the TreeTable scrollbar appearing for no reason, and the bug of the breadcrumbs not creating the dropdown menu when not enough space is available. I believe that this revert is useful if after CHEP users want to to try it, it will be more stable and more enjoyable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4591
https://github.com/root-project/root/pull/4591:233,security,availab,available,233,"RBrowser revert to splitter; This commit revert the SplitApp into Splitter, it remove the bug of the TreeTable scrollbar appearing for no reason, and the bug of the breadcrumbs not creating the dropdown menu when not enough space is available. I believe that this revert is useful if after CHEP users want to to try it, it will be more stable and more enjoyable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4591
https://github.com/root-project/root/pull/4591:203,usability,menu,menu,203,"RBrowser revert to splitter; This commit revert the SplitApp into Splitter, it remove the bug of the TreeTable scrollbar appearing for no reason, and the bug of the breadcrumbs not creating the dropdown menu when not enough space is available. I believe that this revert is useful if after CHEP users want to to try it, it will be more stable and more enjoyable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4591
https://github.com/root-project/root/pull/4591:295,usability,user,users,295,"RBrowser revert to splitter; This commit revert the SplitApp into Splitter, it remove the bug of the TreeTable scrollbar appearing for no reason, and the bug of the breadcrumbs not creating the dropdown menu when not enough space is available. I believe that this revert is useful if after CHEP users want to to try it, it will be more stable and more enjoyable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4591
https://github.com/root-project/root/pull/4592:27,usability,support,support,27,Backport 6.14: Better enum support in TCling and PyROOT; This PR ports to 6.14 some fixes to get the underlying type of enums in PyROOT. This backport was requested in the ticket:. https://sft.its.cern.ch/jira/browse/ROOT-8935,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4592
https://github.com/root-project/root/pull/4593:8,deployability,Updat,Update,8,[cmake] Update tbb to 2019U9:; Should fix https://github.com/intel/tbb/issues/134,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4593
https://github.com/root-project/root/pull/4593:8,safety,Updat,Update,8,[cmake] Update tbb to 2019U9:; Should fix https://github.com/intel/tbb/issues/134,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4593
https://github.com/root-project/root/pull/4593:8,security,Updat,Update,8,[cmake] Update tbb to 2019U9:; Should fix https://github.com/intel/tbb/issues/134,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4593
https://github.com/root-project/root/pull/4594:87,availability,failur,failures,87,[cxxmodules] Move curand_discrete and remove curand_poisson.; This should fix the cuda failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4594
https://github.com/root-project/root/pull/4594:87,deployability,fail,failures,87,[cxxmodules] Move curand_discrete and remove curand_poisson.; This should fix the cuda failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4594
https://github.com/root-project/root/pull/4594:87,performance,failur,failures,87,[cxxmodules] Move curand_discrete and remove curand_poisson.; This should fix the cuda failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4594
https://github.com/root-project/root/pull/4594:87,reliability,fail,failures,87,[cxxmodules] Move curand_discrete and remove curand_poisson.; This should fix the cuda failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4594
https://github.com/root-project/root/pull/4595:82,availability,failur,failures,82,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:17,deployability,build,builds,17,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:82,deployability,fail,failures,82,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:82,performance,failur,failures,82,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:82,reliability,fail,failures,82,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:0,safety,Test,Test,0,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:31,safety,test,test,31,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:77,safety,test,test,77,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:0,testability,Test,Test,0,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:31,testability,test,test,31,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4595:77,testability,test,test,77,"Test PR for 6.14 builds; Dummy test PR to check if we can reproduce the same test failures in https://github.com/root-project/root/pull/4592 , which seem unrelated to the PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4595
https://github.com/root-project/root/pull/4596:137,deployability,build,build,137,"[PyROOT experimental] Protect missing declarations for dataframe disabled; This would be an intermediate fix to make PyROOT experimental build without dataframe enabled. However, this points to an underlying problem that we require the C++ side pythonizations more to be more modularized. @etejedor Shall we go for this fix for now and go for the proper fix later? Or shall we go for a proper fix directly?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4596
https://github.com/root-project/root/pull/4596:276,deployability,modul,modularized,276,"[PyROOT experimental] Protect missing declarations for dataframe disabled; This would be an intermediate fix to make PyROOT experimental build without dataframe enabled. However, this points to an underlying problem that we require the C++ side pythonizations more to be more modularized. @etejedor Shall we go for this fix for now and go for the proper fix later? Or shall we go for a proper fix directly?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4596
https://github.com/root-project/root/pull/4596:276,integrability,modular,modularized,276,"[PyROOT experimental] Protect missing declarations for dataframe disabled; This would be an intermediate fix to make PyROOT experimental build without dataframe enabled. However, this points to an underlying problem that we require the C++ side pythonizations more to be more modularized. @etejedor Shall we go for this fix for now and go for the proper fix later? Or shall we go for a proper fix directly?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4596
https://github.com/root-project/root/pull/4596:92,modifiability,interm,intermediate,92,"[PyROOT experimental] Protect missing declarations for dataframe disabled; This would be an intermediate fix to make PyROOT experimental build without dataframe enabled. However, this points to an underlying problem that we require the C++ side pythonizations more to be more modularized. @etejedor Shall we go for this fix for now and go for the proper fix later? Or shall we go for a proper fix directly?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4596
https://github.com/root-project/root/pull/4596:276,modifiability,modul,modularized,276,"[PyROOT experimental] Protect missing declarations for dataframe disabled; This would be an intermediate fix to make PyROOT experimental build without dataframe enabled. However, this points to an underlying problem that we require the C++ side pythonizations more to be more modularized. @etejedor Shall we go for this fix for now and go for the proper fix later? Or shall we go for a proper fix directly?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4596
https://github.com/root-project/root/pull/4596:276,safety,modul,modularized,276,"[PyROOT experimental] Protect missing declarations for dataframe disabled; This would be an intermediate fix to make PyROOT experimental build without dataframe enabled. However, this points to an underlying problem that we require the C++ side pythonizations more to be more modularized. @etejedor Shall we go for this fix for now and go for the proper fix later? Or shall we go for a proper fix directly?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4596
https://github.com/root-project/root/pull/4596:276,testability,modula,modularized,276,"[PyROOT experimental] Protect missing declarations for dataframe disabled; This would be an intermediate fix to make PyROOT experimental build without dataframe enabled. However, this points to an underlying problem that we require the C++ side pythonizations more to be more modularized. @etejedor Shall we go for this fix for now and go for the proper fix later? Or shall we go for a proper fix directly?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4596
https://github.com/root-project/root/pull/4597:112,interoperability,bind,bind,112,"Jupyter: provide extra args to rootnb executable; Use these args to re-assign IP address where server should be bind. Now one can use:. ```. root --notebook --localhost. root --notebook --ip=myhostname. ```. Potentially, all optional args can be forwarded to jupyter-notebook",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4597
https://github.com/root-project/root/pull/4597:112,modifiability,bind,bind,112,"Jupyter: provide extra args to rootnb executable; Use these args to re-assign IP address where server should be bind. Now one can use:. ```. root --notebook --localhost. root --notebook --ip=myhostname. ```. Potentially, all optional args can be forwarded to jupyter-notebook",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4597
https://github.com/root-project/root/pull/4598:113,integrability,sub,submit,113,RBrowser: support different tabs types; @Falcort I rebase your branch and creating PR for master. Do you want to submit it now or later?,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4598
https://github.com/root-project/root/pull/4598:10,usability,support,support,10,RBrowser: support different tabs types; @Falcort I rebase your branch and creating PR for master. Do you want to submit it now or later?,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4598
https://github.com/root-project/root/pull/4599:54,deployability,modul,modulemap,54,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4599:117,deployability,modul,modulemap,117,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4599:93,interoperability,specif,specify,93,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4599:54,modifiability,modul,modulemap,54,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4599:117,modifiability,modul,modulemap,117,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4599:54,safety,modul,modulemap,54,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4599:117,safety,modul,modulemap,117,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4599:82,usability,help,help,82,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4599:140,usability,command,command,140,"[cxxmodules] Add a new argument which takes a list of modulemap files.; This will help cmssw specify their generated modulemap files on the command line. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4599
https://github.com/root-project/root/pull/4602:25,deployability,log,logic,25,[Exp PyROOT] Warning and logic fixes; Seen here:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=755033,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4602
https://github.com/root-project/root/pull/4602:97,deployability,build,buildid,97,[Exp PyROOT] Warning and logic fixes; Seen here:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=755033,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4602
https://github.com/root-project/root/pull/4602:25,safety,log,logic,25,[Exp PyROOT] Warning and logic fixes; Seen here:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=755033,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4602
https://github.com/root-project/root/pull/4602:25,security,log,logic,25,[Exp PyROOT] Warning and logic fixes; Seen here:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=755033,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4602
https://github.com/root-project/root/pull/4602:25,testability,log,logic,25,[Exp PyROOT] Warning and logic fixes; Seen here:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=755033,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4602
https://github.com/root-project/root/pull/4603:0,safety,Avoid,Avoid,0,Avoid spurrious header file parsing in TFileMerger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4603
https://github.com/root-project/root/pull/4604:16,integrability,coupl,couple,16,[RF] Backport a couple of bugfixes to 6.18.; Backports for. [ROOT-10367] Crash. [ROOT-10358] Broken assignment. [ROOT-6008] Buffer overlow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4604
https://github.com/root-project/root/pull/4604:124,integrability,Buffer,Buffer,124,[RF] Backport a couple of bugfixes to 6.18.; Backports for. [ROOT-10367] Crash. [ROOT-10358] Broken assignment. [ROOT-6008] Buffer overlow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4604
https://github.com/root-project/root/pull/4604:16,modifiability,coupl,couple,16,[RF] Backport a couple of bugfixes to 6.18.; Backports for. [ROOT-10367] Crash. [ROOT-10358] Broken assignment. [ROOT-6008] Buffer overlow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4604
https://github.com/root-project/root/pull/4604:16,testability,coupl,couple,16,[RF] Backport a couple of bugfixes to 6.18.; Backports for. [ROOT-10367] Crash. [ROOT-10358] Broken assignment. [ROOT-6008] Buffer overlow,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4604
https://github.com/root-project/root/pull/4605:37,availability,cluster,cluster,37,"Properly reset the current entry and cluster info in TTreeCache::Rese…; …tCache. Without this change, trying to read within the 'previously current' cluster after a call to ResetCache resulted in constant. (failed) calls to FillBuffer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4605
https://github.com/root-project/root/pull/4605:149,availability,cluster,cluster,149,"Properly reset the current entry and cluster info in TTreeCache::Rese…; …tCache. Without this change, trying to read within the 'previously current' cluster after a call to ResetCache resulted in constant. (failed) calls to FillBuffer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4605
https://github.com/root-project/root/pull/4605:37,deployability,cluster,cluster,37,"Properly reset the current entry and cluster info in TTreeCache::Rese…; …tCache. Without this change, trying to read within the 'previously current' cluster after a call to ResetCache resulted in constant. (failed) calls to FillBuffer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4605
https://github.com/root-project/root/pull/4605:149,deployability,cluster,cluster,149,"Properly reset the current entry and cluster info in TTreeCache::Rese…; …tCache. Without this change, trying to read within the 'previously current' cluster after a call to ResetCache resulted in constant. (failed) calls to FillBuffer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4605
https://github.com/root-project/root/pull/4605:207,deployability,fail,failed,207,"Properly reset the current entry and cluster info in TTreeCache::Rese…; …tCache. Without this change, trying to read within the 'previously current' cluster after a call to ResetCache resulted in constant. (failed) calls to FillBuffer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4605
https://github.com/root-project/root/pull/4605:19,energy efficiency,current,current,19,"Properly reset the current entry and cluster info in TTreeCache::Rese…; …tCache. Without this change, trying to read within the 'previously current' cluster after a call to ResetCache resulted in constant. (failed) calls to FillBuffer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4605
https://github.com/root-project/root/pull/4605:140,energy efficiency,current,current,140,"Properly reset the current entry and cluster info in TTreeCache::Rese…; …tCache. Without this change, trying to read within the 'previously current' cluster after a call to ResetCache resulted in constant. (failed) calls to FillBuffer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4605
https://github.com/root-project/root/pull/4605:207,reliability,fail,failed,207,"Properly reset the current entry and cluster info in TTreeCache::Rese…; …tCache. Without this change, trying to read within the 'previously current' cluster after a call to ResetCache resulted in constant. (failed) calls to FillBuffer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4605
https://github.com/root-project/root/pull/4606:0,modifiability,Exten,Extend,0,Extend the verbose mode of cling and rootcling;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4606
https://github.com/root-project/root/pull/4607:247,energy efficiency,adapt,adapter,247,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:247,integrability,adapt,adapter,247,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:247,interoperability,adapt,adapter,247,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:247,modifiability,adapt,adapter,247,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:319,reliability,RCa,RCanvas,319,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:95,safety,input,input,95,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:348,testability,simpl,simple,348,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:95,usability,input,input,95,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:304,usability,widget,widgets,304,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4607:348,usability,simpl,simple,348,"Introducing RFileDialog; It uses RBrowser and RBrowsable functionality to select some files or input new file SaveAs. Provide sync and async modes. Actual ui5 coding should be implemented by @Falcort . Now RFileDialog starts its own window, later adapter will be provided to use RFileDialog inside other widgets - like RCanvas or RBrowser. Provide simple tutorial macro. For meaningful async mode I add `RDirectory::Remove(name)` method (@Axel-Naumann).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4607
https://github.com/root-project/root/pull/4608:54,modifiability,extens,extension,54,"[RBrowser] fix for ROOT files openening, recognize .C extension;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4608
https://github.com/root-project/root/pull/4609:14,modifiability,extens,extension,14,Use lowercase extension in RSysDirLevelIter::GetFileIcon();,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4609
https://github.com/root-project/root/pull/4610:41,interoperability,format,format,41,[tree] Static cast to long against 32bit format warning.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4610
https://github.com/root-project/root/pull/4614:53,usability,user,user-defined,53,"[ntuple] Allow storage of floating-point values with user-defined bitsize; This PR implements following features:. 1. `RField<ROOT::Experimental::float24_t>, RField<ROOT::Experimental::float16_t>, RField<ROOT::Experimental::float8_t>`. The syntax for creating such a field is: `auto fieldPtr = ntupleModel-> MakeField<ROOT::Experimental::float24_t>(""fieldName"");`. Syntax for other commands: `using float24_t = ROOT::Experimental::float24_t`. `auto view = ntupleReader->GetView<float24_t>(""fieldName"");`. `auto fieldPtr2 = ntupleModel->MakeField<std::array<float24_t, N>>(""fieldName2"");`. `auto view2 = ntupleReader->GetView<std::array<float24_t, N>>(""fieldName2"");`. `auto fieldPtr3 = ntupleModel->MakeField<std::vector<float24_t>>(""fieldName3"");`. `auto view3 = ntupleReader->GetView<std::vector<float24_t>>(""fieldName3"");`. 2. The user can decide how many bits a floating-point value should occupy in storage by:. `auto fieldPtr = ntupleModel-> MakeField<double, 47, 0, 1>(""fieldName"");`,. where 47 is the number of bits in storage, 0 is the minimum value and 1 the maximum value to be stored. Outside of storage, the value is converted to a regular double with 64-bit precision. 3 < number of bits in storage < 65. Syntax for other commands:. `auto view = ntupleReader-> GetView<double, 47, 0, 1>(""fieldName"");`. `auto fieldPtr2 = ntupleModel-> MakeField<float, 23, -100, 100>(""fieldName2"");` Everything which can be done with `double` can also be done with `float`. `auto fieldPtr3 = ntupleModel-> MakeField<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto view3 = ntupleReader-> GetView<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto fieldPtr4 = ntupleModel-> MakeField<std::vector<double>, nBits, min, max>(""fieldName4"");`. `auto view4 = ntupleReader-> GetView<std::vector<double>, nBits, min, max>(""fieldName4"");`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4614
https://github.com/root-project/root/pull/4614:382,usability,command,commands,382,"[ntuple] Allow storage of floating-point values with user-defined bitsize; This PR implements following features:. 1. `RField<ROOT::Experimental::float24_t>, RField<ROOT::Experimental::float16_t>, RField<ROOT::Experimental::float8_t>`. The syntax for creating such a field is: `auto fieldPtr = ntupleModel-> MakeField<ROOT::Experimental::float24_t>(""fieldName"");`. Syntax for other commands: `using float24_t = ROOT::Experimental::float24_t`. `auto view = ntupleReader->GetView<float24_t>(""fieldName"");`. `auto fieldPtr2 = ntupleModel->MakeField<std::array<float24_t, N>>(""fieldName2"");`. `auto view2 = ntupleReader->GetView<std::array<float24_t, N>>(""fieldName2"");`. `auto fieldPtr3 = ntupleModel->MakeField<std::vector<float24_t>>(""fieldName3"");`. `auto view3 = ntupleReader->GetView<std::vector<float24_t>>(""fieldName3"");`. 2. The user can decide how many bits a floating-point value should occupy in storage by:. `auto fieldPtr = ntupleModel-> MakeField<double, 47, 0, 1>(""fieldName"");`,. where 47 is the number of bits in storage, 0 is the minimum value and 1 the maximum value to be stored. Outside of storage, the value is converted to a regular double with 64-bit precision. 3 < number of bits in storage < 65. Syntax for other commands:. `auto view = ntupleReader-> GetView<double, 47, 0, 1>(""fieldName"");`. `auto fieldPtr2 = ntupleModel-> MakeField<float, 23, -100, 100>(""fieldName2"");` Everything which can be done with `double` can also be done with `float`. `auto fieldPtr3 = ntupleModel-> MakeField<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto view3 = ntupleReader-> GetView<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto fieldPtr4 = ntupleModel-> MakeField<std::vector<double>, nBits, min, max>(""fieldName4"");`. `auto view4 = ntupleReader-> GetView<std::vector<double>, nBits, min, max>(""fieldName4"");`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4614
https://github.com/root-project/root/pull/4614:834,usability,user,user,834,"[ntuple] Allow storage of floating-point values with user-defined bitsize; This PR implements following features:. 1. `RField<ROOT::Experimental::float24_t>, RField<ROOT::Experimental::float16_t>, RField<ROOT::Experimental::float8_t>`. The syntax for creating such a field is: `auto fieldPtr = ntupleModel-> MakeField<ROOT::Experimental::float24_t>(""fieldName"");`. Syntax for other commands: `using float24_t = ROOT::Experimental::float24_t`. `auto view = ntupleReader->GetView<float24_t>(""fieldName"");`. `auto fieldPtr2 = ntupleModel->MakeField<std::array<float24_t, N>>(""fieldName2"");`. `auto view2 = ntupleReader->GetView<std::array<float24_t, N>>(""fieldName2"");`. `auto fieldPtr3 = ntupleModel->MakeField<std::vector<float24_t>>(""fieldName3"");`. `auto view3 = ntupleReader->GetView<std::vector<float24_t>>(""fieldName3"");`. 2. The user can decide how many bits a floating-point value should occupy in storage by:. `auto fieldPtr = ntupleModel-> MakeField<double, 47, 0, 1>(""fieldName"");`,. where 47 is the number of bits in storage, 0 is the minimum value and 1 the maximum value to be stored. Outside of storage, the value is converted to a regular double with 64-bit precision. 3 < number of bits in storage < 65. Syntax for other commands:. `auto view = ntupleReader-> GetView<double, 47, 0, 1>(""fieldName"");`. `auto fieldPtr2 = ntupleModel-> MakeField<float, 23, -100, 100>(""fieldName2"");` Everything which can be done with `double` can also be done with `float`. `auto fieldPtr3 = ntupleModel-> MakeField<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto view3 = ntupleReader-> GetView<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto fieldPtr4 = ntupleModel-> MakeField<std::vector<double>, nBits, min, max>(""fieldName4"");`. `auto view4 = ntupleReader-> GetView<std::vector<double>, nBits, min, max>(""fieldName4"");`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4614
https://github.com/root-project/root/pull/4614:1045,usability,minim,minimum,1045,"[ntuple] Allow storage of floating-point values with user-defined bitsize; This PR implements following features:. 1. `RField<ROOT::Experimental::float24_t>, RField<ROOT::Experimental::float16_t>, RField<ROOT::Experimental::float8_t>`. The syntax for creating such a field is: `auto fieldPtr = ntupleModel-> MakeField<ROOT::Experimental::float24_t>(""fieldName"");`. Syntax for other commands: `using float24_t = ROOT::Experimental::float24_t`. `auto view = ntupleReader->GetView<float24_t>(""fieldName"");`. `auto fieldPtr2 = ntupleModel->MakeField<std::array<float24_t, N>>(""fieldName2"");`. `auto view2 = ntupleReader->GetView<std::array<float24_t, N>>(""fieldName2"");`. `auto fieldPtr3 = ntupleModel->MakeField<std::vector<float24_t>>(""fieldName3"");`. `auto view3 = ntupleReader->GetView<std::vector<float24_t>>(""fieldName3"");`. 2. The user can decide how many bits a floating-point value should occupy in storage by:. `auto fieldPtr = ntupleModel-> MakeField<double, 47, 0, 1>(""fieldName"");`,. where 47 is the number of bits in storage, 0 is the minimum value and 1 the maximum value to be stored. Outside of storage, the value is converted to a regular double with 64-bit precision. 3 < number of bits in storage < 65. Syntax for other commands:. `auto view = ntupleReader-> GetView<double, 47, 0, 1>(""fieldName"");`. `auto fieldPtr2 = ntupleModel-> MakeField<float, 23, -100, 100>(""fieldName2"");` Everything which can be done with `double` can also be done with `float`. `auto fieldPtr3 = ntupleModel-> MakeField<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto view3 = ntupleReader-> GetView<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto fieldPtr4 = ntupleModel-> MakeField<std::vector<double>, nBits, min, max>(""fieldName4"");`. `auto view4 = ntupleReader-> GetView<std::vector<double>, nBits, min, max>(""fieldName4"");`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4614
https://github.com/root-project/root/pull/4614:1236,usability,command,commands,1236,"[ntuple] Allow storage of floating-point values with user-defined bitsize; This PR implements following features:. 1. `RField<ROOT::Experimental::float24_t>, RField<ROOT::Experimental::float16_t>, RField<ROOT::Experimental::float8_t>`. The syntax for creating such a field is: `auto fieldPtr = ntupleModel-> MakeField<ROOT::Experimental::float24_t>(""fieldName"");`. Syntax for other commands: `using float24_t = ROOT::Experimental::float24_t`. `auto view = ntupleReader->GetView<float24_t>(""fieldName"");`. `auto fieldPtr2 = ntupleModel->MakeField<std::array<float24_t, N>>(""fieldName2"");`. `auto view2 = ntupleReader->GetView<std::array<float24_t, N>>(""fieldName2"");`. `auto fieldPtr3 = ntupleModel->MakeField<std::vector<float24_t>>(""fieldName3"");`. `auto view3 = ntupleReader->GetView<std::vector<float24_t>>(""fieldName3"");`. 2. The user can decide how many bits a floating-point value should occupy in storage by:. `auto fieldPtr = ntupleModel-> MakeField<double, 47, 0, 1>(""fieldName"");`,. where 47 is the number of bits in storage, 0 is the minimum value and 1 the maximum value to be stored. Outside of storage, the value is converted to a regular double with 64-bit precision. 3 < number of bits in storage < 65. Syntax for other commands:. `auto view = ntupleReader-> GetView<double, 47, 0, 1>(""fieldName"");`. `auto fieldPtr2 = ntupleModel-> MakeField<float, 23, -100, 100>(""fieldName2"");` Everything which can be done with `double` can also be done with `float`. `auto fieldPtr3 = ntupleModel-> MakeField<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto view3 = ntupleReader-> GetView<std::array<double, N>, nBits, min, max>(""fieldName3"");`. `auto fieldPtr4 = ntupleModel-> MakeField<std::vector<double>, nBits, min, max>(""fieldName4"");`. `auto view4 = ntupleReader-> GetView<std::vector<double>, nBits, min, max>(""fieldName4"");`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4614
https://github.com/root-project/root/pull/4615:164,performance,content,content,164,[hadd] [WIP] Adding posibility to only hadd listed directories; hadd (and TFileMerger) has been missing the possibility to only hadd certain directories (and their content) of a bunch of root files. This is my attempt.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4615
https://github.com/root-project/root/pull/4617:694,availability,error,error,694,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:13,deployability,updat,update,13,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:118,deployability,updat,updates,118,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:127,deployability,Updat,Update,127,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:300,deployability,compos,compositing,300,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:620,deployability,build,builder,620,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:1062,deployability,updat,update,1062,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:1244,deployability,build,builders,1244,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:167,energy efficiency,Optim,Optimize,167,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:593,energy efficiency,model,model,593,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:102,integrability,event,event,102,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:200,interoperability,socket,socket,200,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:363,interoperability,Orb,OrbitController,363,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:614,interoperability,prox,proxy,614,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:1238,interoperability,prox,proxy,1238,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:300,modifiability,compos,compositing,300,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:167,performance,Optimiz,Optimize,167,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:694,performance,error,error,694,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:13,safety,updat,update,13,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:118,safety,updat,updates,118,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:127,safety,Updat,Update,127,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:189,safety,Detect,Detect,189,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:480,safety,input,input,480,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:694,safety,error,error,694,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:774,safety,Review,Review,774,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:939,safety,Valid,Validate,939,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:1062,safety,updat,update,1062,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:13,security,updat,update,13,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:118,security,updat,updates,118,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:127,security,Updat,Update,127,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:189,security,Detect,Detect,189,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:200,security,soc,socket,200,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:584,security,control,controll,584,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:593,security,model,model,593,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:939,security,Validat,Validate,939,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:1062,security,updat,update,1062,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:109,testability,Simpl,Simplify,109,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:584,testability,control,controll,584,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:774,testability,Review,Review,774,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:109,usability,Simpl,Simplify,109,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:207,usability,close,close,207,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:222,usability,user,user,222,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:335,usability,mous,mouse,335,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:413,usability,tool,tooltips,413,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:475,usability,user,user,475,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:480,usability,input,input,480,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:496,usability,tool,toolbar,496,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:694,usability,error,error,694,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4617:712,usability,Support,Support,712,"Eve-7: Major update for FireworksWeb and for standalone JS renderer.; - Change implementation of next event. Simplify updates. Update summary tree on scene changes. - Optimize streaming. - Detect web-socket close and warn user (red rectangle in topbar). - Standalone THREE renderer:. - ortho camera, compositing, camera reset, key and mouse handling (own copy of OrbitController needed). - picking, highlight and tooltips. - selection and multiple selection. - Don't execute user input from main toolbar while scene changes are processing. - Add virtual function LocalModelChanges to controll model changes in the proxy builder. - Major cleanup of several JS classes. - New class REveEllipsod (error ellipse). - Support changing of outline colors for selection/highlight. - Review / improve REveData classes, esp. for selection and projections. - REveSelection, allow a list of selection upward propagation modes, not just a single one. - Validate expressions for table views, also, check TROOT::ProcessLine staus. - Cleanup some TEve-stlye change propagation / update functions. - Merge REveElement GetMaster() and ForwardSelection() through fSelectionMaster member. - Use REveAuntAsList in REveDataItem to communicate selection between proxy builders and REveDataItem. - Improve selection handling for compounds and multi-Objec3D representations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4617
https://github.com/root-project/root/pull/4619:21,performance,I/O,I/O,21,[RF][ROOT-10411] Fix I/O problems in RooGenericPdf.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4619
https://github.com/root-project/root/pull/4620:26,modifiability,reu,reuse,26,CMake: allow tutorials to reuse EXE from find_package(Python;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4620
https://github.com/root-project/root/pull/4622:26,reliability,doe,does,26,"WebBrowser TODOs; This PR does :. * Solve some TODO in the browser controller (Change the Tab text AFTER the server reply). * Change TreeTables selectors into UI5 selectors. * Add the functionality of on close editor tab closing if the documents is modified and not saved, then add a warning popup before closing the tab and losing the data",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4622
https://github.com/root-project/root/pull/4622:67,security,control,controller,67,"WebBrowser TODOs; This PR does :. * Solve some TODO in the browser controller (Change the Tab text AFTER the server reply). * Change TreeTables selectors into UI5 selectors. * Add the functionality of on close editor tab closing if the documents is modified and not saved, then add a warning popup before closing the tab and losing the data",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4622
https://github.com/root-project/root/pull/4622:249,security,modif,modified,249,"WebBrowser TODOs; This PR does :. * Solve some TODO in the browser controller (Change the Tab text AFTER the server reply). * Change TreeTables selectors into UI5 selectors. * Add the functionality of on close editor tab closing if the documents is modified and not saved, then add a warning popup before closing the tab and losing the data",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4622
https://github.com/root-project/root/pull/4622:67,testability,control,controller,67,"WebBrowser TODOs; This PR does :. * Solve some TODO in the browser controller (Change the Tab text AFTER the server reply). * Change TreeTables selectors into UI5 selectors. * Add the functionality of on close editor tab closing if the documents is modified and not saved, then add a warning popup before closing the tab and losing the data",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4622
https://github.com/root-project/root/pull/4622:204,usability,close,close,204,"WebBrowser TODOs; This PR does :. * Solve some TODO in the browser controller (Change the Tab text AFTER the server reply). * Change TreeTables selectors into UI5 selectors. * Add the functionality of on close editor tab closing if the documents is modified and not saved, then add a warning popup before closing the tab and losing the data",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4622
https://github.com/root-project/root/pull/4622:236,usability,document,documents,236,"WebBrowser TODOs; This PR does :. * Solve some TODO in the browser controller (Change the Tab text AFTER the server reply). * Change TreeTables selectors into UI5 selectors. * Add the functionality of on close editor tab closing if the documents is modified and not saved, then add a warning popup before closing the tab and losing the data",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4622
https://github.com/root-project/root/pull/4623:65,integrability,Discover,Discovered,65,[Exp PyROOT][ROOT-10395] Clear PyErr after getting __cpp_name__; Discovered when running PyCool/PyCoral tests. The fix is already in master of CPyCppyy (1.9.7).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4623
https://github.com/root-project/root/pull/4623:65,interoperability,Discover,Discovered,65,[Exp PyROOT][ROOT-10395] Clear PyErr after getting __cpp_name__; Discovered when running PyCool/PyCoral tests. The fix is already in master of CPyCppyy (1.9.7).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4623
https://github.com/root-project/root/pull/4623:104,safety,test,tests,104,[Exp PyROOT][ROOT-10395] Clear PyErr after getting __cpp_name__; Discovered when running PyCool/PyCoral tests. The fix is already in master of CPyCppyy (1.9.7).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4623
https://github.com/root-project/root/pull/4623:104,testability,test,tests,104,[Exp PyROOT][ROOT-10395] Clear PyErr after getting __cpp_name__; Discovered when running PyCool/PyCoral tests. The fix is already in master of CPyCppyy (1.9.7).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4623
https://github.com/root-project/root/pull/4623:25,usability,Clear,Clear,25,[Exp PyROOT][ROOT-10395] Clear PyErr after getting __cpp_name__; Discovered when running PyCool/PyCoral tests. The fix is already in master of CPyCppyy (1.9.7).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4623
https://github.com/root-project/root/pull/4623:65,usability,Discov,Discovered,65,[Exp PyROOT][ROOT-10395] Clear PyErr after getting __cpp_name__; Discovered when running PyCool/PyCoral tests. The fix is already in master of CPyCppyy (1.9.7).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4623
https://github.com/root-project/root/pull/4624:96,availability,state,state,96,"Make TTree::SetParallelUnzip behavior non-static.; Previously it was 'just' updating the global state and not affecting (directly) the current TTree,. which is ... surprising ... for a non-static function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4624
https://github.com/root-project/root/pull/4624:76,deployability,updat,updating,76,"Make TTree::SetParallelUnzip behavior non-static.; Previously it was 'just' updating the global state and not affecting (directly) the current TTree,. which is ... surprising ... for a non-static function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4624
https://github.com/root-project/root/pull/4624:135,energy efficiency,current,current,135,"Make TTree::SetParallelUnzip behavior non-static.; Previously it was 'just' updating the global state and not affecting (directly) the current TTree,. which is ... surprising ... for a non-static function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4624
https://github.com/root-project/root/pull/4624:96,integrability,state,state,96,"Make TTree::SetParallelUnzip behavior non-static.; Previously it was 'just' updating the global state and not affecting (directly) the current TTree,. which is ... surprising ... for a non-static function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4624
https://github.com/root-project/root/pull/4624:76,safety,updat,updating,76,"Make TTree::SetParallelUnzip behavior non-static.; Previously it was 'just' updating the global state and not affecting (directly) the current TTree,. which is ... surprising ... for a non-static function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4624
https://github.com/root-project/root/pull/4624:76,security,updat,updating,76,"Make TTree::SetParallelUnzip behavior non-static.; Previously it was 'just' updating the global state and not affecting (directly) the current TTree,. which is ... surprising ... for a non-static function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4624
https://github.com/root-project/root/pull/4624:29,usability,behavi,behavior,29,"Make TTree::SetParallelUnzip behavior non-static.; Previously it was 'just' updating the global state and not affecting (directly) the current TTree,. which is ... surprising ... for a non-static function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4624
https://github.com/root-project/root/pull/4625:0,energy efficiency,Reduc,Reduce,0,Reduce need for recursive jitting (related to ROOT-10426);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4625
https://github.com/root-project/root/pull/4628:243,deployability,version,versions,243,"RBrowser: fix layout, avoid use of private data members; * Correctly configure layout properties for the TreeTable in RBrowser and RGeometryViewer. * Do not use row._bHasChildren field which is private and may be changed/removed in future ui5 versions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4628
https://github.com/root-project/root/pull/4628:69,integrability,configur,configure,69,"RBrowser: fix layout, avoid use of private data members; * Correctly configure layout properties for the TreeTable in RBrowser and RGeometryViewer. * Do not use row._bHasChildren field which is private and may be changed/removed in future ui5 versions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4628
https://github.com/root-project/root/pull/4628:243,integrability,version,versions,243,"RBrowser: fix layout, avoid use of private data members; * Correctly configure layout properties for the TreeTable in RBrowser and RGeometryViewer. * Do not use row._bHasChildren field which is private and may be changed/removed in future ui5 versions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4628
https://github.com/root-project/root/pull/4628:69,modifiability,configur,configure,69,"RBrowser: fix layout, avoid use of private data members; * Correctly configure layout properties for the TreeTable in RBrowser and RGeometryViewer. * Do not use row._bHasChildren field which is private and may be changed/removed in future ui5 versions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4628
https://github.com/root-project/root/pull/4628:243,modifiability,version,versions,243,"RBrowser: fix layout, avoid use of private data members; * Correctly configure layout properties for the TreeTable in RBrowser and RGeometryViewer. * Do not use row._bHasChildren field which is private and may be changed/removed in future ui5 versions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4628
https://github.com/root-project/root/pull/4628:22,safety,avoid,avoid,22,"RBrowser: fix layout, avoid use of private data members; * Correctly configure layout properties for the TreeTable in RBrowser and RGeometryViewer. * Do not use row._bHasChildren field which is private and may be changed/removed in future ui5 versions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4628
https://github.com/root-project/root/pull/4628:69,security,configur,configure,69,"RBrowser: fix layout, avoid use of private data members; * Correctly configure layout properties for the TreeTable in RBrowser and RGeometryViewer. * Do not use row._bHasChildren field which is private and may be changed/removed in future ui5 versions",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4628
https://github.com/root-project/root/pull/4629:7,deployability,modul,modules,7,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:26,deployability,modul,module,26,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:33,deployability,modul,modulemap,33,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:74,deployability,modul,module,74,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:81,deployability,modul,modulemap,81,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:137,deployability,modul,module,137,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:144,deployability,modul,modulemap,144,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:7,modifiability,modul,modules,7,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:26,modifiability,modul,module,26,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:33,modifiability,modul,modulemap,33,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:74,modifiability,modul,module,74,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:81,modifiability,modul,modulemap,81,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:137,modifiability,modul,module,137,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:144,modifiability,modul,modulemap,144,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:7,safety,modul,modules,7,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:26,safety,modul,module,26,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:33,safety,modul,modulemap,33,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:74,safety,modul,module,74,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:81,safety,modul,modulemap,81,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:137,safety,modul,module,137,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4629:144,safety,modul,modulemap,144,"[cmake modules] Not touch module.modulemap.extra if it's unchanged; Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra if it's unchanged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4629
https://github.com/root-project/root/pull/4630:63,deployability,configurat,configurations,63,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:440,deployability,configurat,configuration,440,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:289,energy efficiency,load,loaded,289,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:13,integrability,configur,configure,13,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:63,integrability,configur,configurations,63,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:440,integrability,configur,configuration,440,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:471,integrability,configur,configure,471,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:13,modifiability,configur,configure,13,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:63,modifiability,configur,configurations,63,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:115,modifiability,paramet,parameters,115,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:427,modifiability,Exten,Extend,427,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:440,modifiability,configur,configuration,440,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:471,modifiability,configur,configure,471,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:289,performance,load,loaded,289,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:13,security,configur,configure,13,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:63,security,configur,configurations,63,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:440,security,configur,configuration,440,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:471,security,configur,configure,471,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:321,usability,ui,ui,321,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4630:336,usability,ui,ui,336,"[webgui] let configure openui5 with rootrc file, provide light configurations in webgeom; Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/. * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified. * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4630
https://github.com/root-project/root/pull/4631:7,availability,repair,repair,7,[eve7] repair GL scene update;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4631
https://github.com/root-project/root/pull/4631:23,deployability,updat,update,23,[eve7] repair GL scene update;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4631
https://github.com/root-project/root/pull/4631:7,reliability,repair,repair,7,[eve7] repair GL scene update;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4631
https://github.com/root-project/root/pull/4631:23,safety,updat,update,23,[eve7] repair GL scene update;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4631
https://github.com/root-project/root/pull/4631:23,security,updat,update,23,[eve7] repair GL scene update;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4631
https://github.com/root-project/root/pull/4632:51,availability,toler,tolerance,51,Fix TH1::SameLimitsAndNBins ( ROOT-10363 ); Uses a tolerance based on the bin width when comparing histogram axes . This fixes ROOT-10363,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4632
https://github.com/root-project/root/pull/4632:51,reliability,toleran,tolerance,51,Fix TH1::SameLimitsAndNBins ( ROOT-10363 ); Uses a tolerance based on the bin width when comparing histogram axes . This fixes ROOT-10363,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4632
https://github.com/root-project/root/pull/4634:227,deployability,depend,dependencies,227,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:30,energy efficiency,draw,draw,30,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:366,energy efficiency,draw,draw,366,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:403,energy efficiency,draw,draw,403,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:409,energy efficiency,Draw,Draw,409,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:429,energy efficiency,draw,draw,429,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:460,energy efficiency,draw,draw,460,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:465,energy efficiency,Draw,Draw,465,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:227,integrability,depend,dependencies,227,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:227,modifiability,depend,dependencies,227,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:227,safety,depend,dependencies,227,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:227,testability,depend,dependencies,227,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4634:633,usability,user,user-images,633,"[ntuple] implement feature to draw storage layout; This new feature allows to display the storage layout of an RNTuple and to click on its pages to display information about a page. It creates a new ntupledraw library to limit dependencies. Syntax is similar to RNTupleReader and RNTupleWriter:. `auto reader = RNTupleReader::Open(""ntupleName"", ""fileName"");`. `auto draw = RNTupleDraw::Open(reader);`. `draw->Draw();`. or. `auto draw = RNTupleDraw(reader);`. `draw.Draw();`. An example of a displayed RNTuple is shown below, zooming into the pages is possible:. <img width=""1440"" alt=""Screenshot 2019-11-21 at 12 18 57"" src=""https://user-images.githubusercontent.com/45257539/69346926-e884a180-0c73-11ea-939a-166e36552d83.png"">.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4634
https://github.com/root-project/root/pull/4635:18,deployability,log,logic,18,"RBrowser - change logic with top and current element; Now there is always top element for browsing, which normally defined in the beginning. Relative to that top element working path is defined. Any changes in working path cannot go beyond top element. . Provide latest openui 1.72.0 with base and fiori_3 themes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4635
https://github.com/root-project/root/pull/4635:37,energy efficiency,current,current,37,"RBrowser - change logic with top and current element; Now there is always top element for browsing, which normally defined in the beginning. Relative to that top element working path is defined. Any changes in working path cannot go beyond top element. . Provide latest openui 1.72.0 with base and fiori_3 themes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4635
https://github.com/root-project/root/pull/4635:18,safety,log,logic,18,"RBrowser - change logic with top and current element; Now there is always top element for browsing, which normally defined in the beginning. Relative to that top element working path is defined. Any changes in working path cannot go beyond top element. . Provide latest openui 1.72.0 with base and fiori_3 themes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4635
https://github.com/root-project/root/pull/4635:18,security,log,logic,18,"RBrowser - change logic with top and current element; Now there is always top element for browsing, which normally defined in the beginning. Relative to that top element working path is defined. Any changes in working path cannot go beyond top element. . Provide latest openui 1.72.0 with base and fiori_3 themes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4635
https://github.com/root-project/root/pull/4635:18,testability,log,logic,18,"RBrowser - change logic with top and current element; Now there is always top element for browsing, which normally defined in the beginning. Relative to that top element working path is defined. Any changes in working path cannot go beyond top element. . Provide latest openui 1.72.0 with base and fiori_3 themes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4635
https://github.com/root-project/root/pull/4636:36,deployability,instal,installation,36,"[Exp PyROOT] Trivial changes fixing installation troubles and tests; These two commits were initially included in PR #4279, but since they're completely unrelated it's probably better to put them in a separate one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4636
https://github.com/root-project/root/pull/4636:62,safety,test,tests,62,"[Exp PyROOT] Trivial changes fixing installation troubles and tests; These two commits were initially included in PR #4279, but since they're completely unrelated it's probably better to put them in a separate one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4636
https://github.com/root-project/root/pull/4636:142,safety,compl,completely,142,"[Exp PyROOT] Trivial changes fixing installation troubles and tests; These two commits were initially included in PR #4279, but since they're completely unrelated it's probably better to put them in a separate one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4636
https://github.com/root-project/root/pull/4636:142,security,compl,completely,142,"[Exp PyROOT] Trivial changes fixing installation troubles and tests; These two commits were initially included in PR #4279, but since they're completely unrelated it's probably better to put them in a separate one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4636
https://github.com/root-project/root/pull/4636:62,testability,test,tests,62,"[Exp PyROOT] Trivial changes fixing installation troubles and tests; These two commits were initially included in PR #4279, but since they're completely unrelated it's probably better to put them in a separate one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4636
https://github.com/root-project/root/pull/4637:17,performance,memor,memory,17,[cling] Separate memory regions for recursive jitting (ROOT-10426);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4637
https://github.com/root-project/root/pull/4637:17,usability,memor,memory,17,[cling] Separate memory regions for recursive jitting (ROOT-10426);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4637
https://github.com/root-project/root/pull/4638:315,integrability,sub,sub-folders,315,"RBrowser - support TFolder, TCollection, list of opened files; One can construct relatively complex structures of elements for using them in RBrowser. Like adding different items to top-level - home directory or top file directory. Provide support of ROOT collections and TFolder. . Access top ROOT folder (and all sub-folders). Access already opened files. Now data structures approximately that I want to see in RBrowser!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4638
https://github.com/root-project/root/pull/4638:92,safety,compl,complex,92,"RBrowser - support TFolder, TCollection, list of opened files; One can construct relatively complex structures of elements for using them in RBrowser. Like adding different items to top-level - home directory or top file directory. Provide support of ROOT collections and TFolder. . Access top ROOT folder (and all sub-folders). Access already opened files. Now data structures approximately that I want to see in RBrowser!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4638
https://github.com/root-project/root/pull/4638:92,security,compl,complex,92,"RBrowser - support TFolder, TCollection, list of opened files; One can construct relatively complex structures of elements for using them in RBrowser. Like adding different items to top-level - home directory or top file directory. Provide support of ROOT collections and TFolder. . Access top ROOT folder (and all sub-folders). Access already opened files. Now data structures approximately that I want to see in RBrowser!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4638
https://github.com/root-project/root/pull/4638:283,security,Access,Access,283,"RBrowser - support TFolder, TCollection, list of opened files; One can construct relatively complex structures of elements for using them in RBrowser. Like adding different items to top-level - home directory or top file directory. Provide support of ROOT collections and TFolder. . Access top ROOT folder (and all sub-folders). Access already opened files. Now data structures approximately that I want to see in RBrowser!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4638
https://github.com/root-project/root/pull/4638:329,security,Access,Access,329,"RBrowser - support TFolder, TCollection, list of opened files; One can construct relatively complex structures of elements for using them in RBrowser. Like adding different items to top-level - home directory or top file directory. Provide support of ROOT collections and TFolder. . Access top ROOT folder (and all sub-folders). Access already opened files. Now data structures approximately that I want to see in RBrowser!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4638
https://github.com/root-project/root/pull/4638:11,usability,support,support,11,"RBrowser - support TFolder, TCollection, list of opened files; One can construct relatively complex structures of elements for using them in RBrowser. Like adding different items to top-level - home directory or top file directory. Provide support of ROOT collections and TFolder. . Access top ROOT folder (and all sub-folders). Access already opened files. Now data structures approximately that I want to see in RBrowser!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4638
https://github.com/root-project/root/pull/4638:240,usability,support,support,240,"RBrowser - support TFolder, TCollection, list of opened files; One can construct relatively complex structures of elements for using them in RBrowser. Like adding different items to top-level - home directory or top file directory. Provide support of ROOT collections and TFolder. . Access top ROOT folder (and all sub-folders). Access already opened files. Now data structures approximately that I want to see in RBrowser!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4638
https://github.com/root-project/root/pull/4639:467,integrability,event,event,467,"[PyROOT] Support square bracket syntax for template instantiation; Adds the support for square bracket syntax when instantiating function templates, in addition to the parenthesis syntax. The goal is to be forward compatible with the new PyROOT, which only supports the square bracket syntax for instantiation of function templates (see https://sft.its.cern.ch/jira/browse/ROOT-10436). This was discussed in the following experiments meeting:. https://indico.cern.ch/event/860690/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4639
https://github.com/root-project/root/pull/4639:214,interoperability,compatib,compatible,214,"[PyROOT] Support square bracket syntax for template instantiation; Adds the support for square bracket syntax when instantiating function templates, in addition to the parenthesis syntax. The goal is to be forward compatible with the new PyROOT, which only supports the square bracket syntax for instantiation of function templates (see https://sft.its.cern.ch/jira/browse/ROOT-10436). This was discussed in the following experiments meeting:. https://indico.cern.ch/event/860690/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4639
https://github.com/root-project/root/pull/4639:9,usability,Support,Support,9,"[PyROOT] Support square bracket syntax for template instantiation; Adds the support for square bracket syntax when instantiating function templates, in addition to the parenthesis syntax. The goal is to be forward compatible with the new PyROOT, which only supports the square bracket syntax for instantiation of function templates (see https://sft.its.cern.ch/jira/browse/ROOT-10436). This was discussed in the following experiments meeting:. https://indico.cern.ch/event/860690/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4639
https://github.com/root-project/root/pull/4639:76,usability,support,support,76,"[PyROOT] Support square bracket syntax for template instantiation; Adds the support for square bracket syntax when instantiating function templates, in addition to the parenthesis syntax. The goal is to be forward compatible with the new PyROOT, which only supports the square bracket syntax for instantiation of function templates (see https://sft.its.cern.ch/jira/browse/ROOT-10436). This was discussed in the following experiments meeting:. https://indico.cern.ch/event/860690/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4639
https://github.com/root-project/root/pull/4639:257,usability,support,supports,257,"[PyROOT] Support square bracket syntax for template instantiation; Adds the support for square bracket syntax when instantiating function templates, in addition to the parenthesis syntax. The goal is to be forward compatible with the new PyROOT, which only supports the square bracket syntax for instantiation of function templates (see https://sft.its.cern.ch/jira/browse/ROOT-10436). This was discussed in the following experiments meeting:. https://indico.cern.ch/event/860690/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4639
https://github.com/root-project/root/pull/4640:452,availability,avail,available,452,Added asymptotically correct approach to determine parameter uncertai…; …nties in weighted unbinned maximum likelihood fits (for details and a comparison of different approaches see https://arxiv.org/abs/1911.01303). This method can be used when specifying Asymptotic(true) and SumW2Error(false) as arguments to the RooAbsPdf::fitTo method. A short tutorial comparing different approaches to parameter uncertainties in the presence of event weights is available under tutorials/roofit/rf611_weightedfits.C.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4640
https://github.com/root-project/root/pull/4640:435,integrability,event,event,435,Added asymptotically correct approach to determine parameter uncertai…; …nties in weighted unbinned maximum likelihood fits (for details and a comparison of different approaches see https://arxiv.org/abs/1911.01303). This method can be used when specifying Asymptotic(true) and SumW2Error(false) as arguments to the RooAbsPdf::fitTo method. A short tutorial comparing different approaches to parameter uncertainties in the presence of event weights is available under tutorials/roofit/rf611_weightedfits.C.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4640
https://github.com/root-project/root/pull/4640:246,interoperability,specif,specifying,246,Added asymptotically correct approach to determine parameter uncertai…; …nties in weighted unbinned maximum likelihood fits (for details and a comparison of different approaches see https://arxiv.org/abs/1911.01303). This method can be used when specifying Asymptotic(true) and SumW2Error(false) as arguments to the RooAbsPdf::fitTo method. A short tutorial comparing different approaches to parameter uncertainties in the presence of event weights is available under tutorials/roofit/rf611_weightedfits.C.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4640
https://github.com/root-project/root/pull/4640:51,modifiability,paramet,parameter,51,Added asymptotically correct approach to determine parameter uncertai…; …nties in weighted unbinned maximum likelihood fits (for details and a comparison of different approaches see https://arxiv.org/abs/1911.01303). This method can be used when specifying Asymptotic(true) and SumW2Error(false) as arguments to the RooAbsPdf::fitTo method. A short tutorial comparing different approaches to parameter uncertainties in the presence of event weights is available under tutorials/roofit/rf611_weightedfits.C.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4640
https://github.com/root-project/root/pull/4640:392,modifiability,paramet,parameter,392,Added asymptotically correct approach to determine parameter uncertai…; …nties in weighted unbinned maximum likelihood fits (for details and a comparison of different approaches see https://arxiv.org/abs/1911.01303). This method can be used when specifying Asymptotic(true) and SumW2Error(false) as arguments to the RooAbsPdf::fitTo method. A short tutorial comparing different approaches to parameter uncertainties in the presence of event weights is available under tutorials/roofit/rf611_weightedfits.C.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4640
https://github.com/root-project/root/pull/4640:452,reliability,availab,available,452,Added asymptotically correct approach to determine parameter uncertai…; …nties in weighted unbinned maximum likelihood fits (for details and a comparison of different approaches see https://arxiv.org/abs/1911.01303). This method can be used when specifying Asymptotic(true) and SumW2Error(false) as arguments to the RooAbsPdf::fitTo method. A short tutorial comparing different approaches to parameter uncertainties in the presence of event weights is available under tutorials/roofit/rf611_weightedfits.C.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4640
https://github.com/root-project/root/pull/4640:452,safety,avail,available,452,Added asymptotically correct approach to determine parameter uncertai…; …nties in weighted unbinned maximum likelihood fits (for details and a comparison of different approaches see https://arxiv.org/abs/1911.01303). This method can be used when specifying Asymptotic(true) and SumW2Error(false) as arguments to the RooAbsPdf::fitTo method. A short tutorial comparing different approaches to parameter uncertainties in the presence of event weights is available under tutorials/roofit/rf611_weightedfits.C.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4640
https://github.com/root-project/root/pull/4640:452,security,availab,available,452,Added asymptotically correct approach to determine parameter uncertai…; …nties in weighted unbinned maximum likelihood fits (for details and a comparison of different approaches see https://arxiv.org/abs/1911.01303). This method can be used when specifying Asymptotic(true) and SumW2Error(false) as arguments to the RooAbsPdf::fitTo method. A short tutorial comparing different approaches to parameter uncertainties in the presence of event weights is available under tutorials/roofit/rf611_weightedfits.C.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4640
https://github.com/root-project/root/pull/4641:315,availability,error,error,315,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:39,deployability,modul,modulemaps,39,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:213,deployability,modul,module,213,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:220,deployability,modul,modulemap,220,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:252,deployability,modul,module,252,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:259,deployability,modul,modulemap,259,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:39,modifiability,modul,modulemaps,39,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:96,modifiability,variab,variable,96,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:213,modifiability,modul,module,213,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:220,modifiability,modul,modulemap,220,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:252,modifiability,modul,module,252,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:259,modifiability,modul,modulemap,259,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:315,performance,error,error,315,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:39,safety,modul,modulemaps,39,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:213,safety,modul,module,213,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:220,safety,modul,modulemap,220,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:252,safety,modul,module,252,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:259,safety,modul,modulemap,259,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:315,safety,error,error,315,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4641:315,usability,error,error,315,"[cxxmodules] Allow externally-provided modulemaps via CLING_MODULEMAP…; …_PATH. The environment variable can be set like CLING_MODULEMAP_PATH=/a:./b/. In this. case ROOT will initialize with. -fmodule-map-file=/a/module.modulemap -fmodule-map-file=./b/module.modulemap. If the files do not exist ROOT will print an error. cc: @davidlange6, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4641
https://github.com/root-project/root/pull/4643:136,deployability,modul,modules,136,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:145,deployability,depend,depend,145,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:225,deployability,updat,update,225,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:145,integrability,depend,depend,145,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:136,modifiability,modul,modules,136,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:145,modifiability,depend,depend,145,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:106,safety,avoid,avoid,106,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:136,safety,modul,modules,136,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:145,safety,depend,depend,145,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:225,safety,updat,update,225,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:225,security,updat,update,225,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4643:145,testability,depend,depend,145,"[Exp PyROOT] CPPInstance_FromVoidPtr temprorarily moved to PyzCppHelpers; This change is done in order to avoid that the pythonizations modules. depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,. since TPython::CPPInstance_FromVoidPtr will become. CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4643
https://github.com/root-project/root/pull/4644:21,availability,operat,operator,21,Implement assignment operator for TMatrixDEigen and TMatrixDSymEigen; This fixes (ROOT-10168),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4644
https://github.com/root-project/root/pull/4645:300,integrability,sub,subscription,300,"[eve-7] Fix initialization in single view select; A single view can be selected with given URL+#/view/<view-name>. Some checks have bee given in EveManager.SelectElement and EveManager.UnSelectElement to make highlight effect work. In future, the checks in EveManager will be obsolete by client view subscription.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4645
https://github.com/root-project/root/pull/4646:61,energy efficiency,current,current,61,New GUI for the WebBrowser; This PR change the design of the current WebBrowser into something more user friendly,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4646
https://github.com/root-project/root/pull/4646:100,usability,user,user,100,New GUI for the WebBrowser; This PR change the design of the current WebBrowser into something more user friendly,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4646
https://github.com/root-project/root/pull/4647:27,deployability,Build,Build,27,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:61,deployability,version,versions,61,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:71,deployability,Upgrad,Upgraded,71,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:80,deployability,version,version,80,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:156,deployability,modul,modules,156,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:235,deployability,version,versions,235,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:369,deployability,build,building,369,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:387,deployability,version,versions,387,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:428,deployability,contain,contain,428,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:637,deployability,version,version,637,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:699,deployability,build,build,699,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:714,deployability,version,versions,714,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:61,integrability,version,versions,61,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:80,integrability,version,version,80,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:235,integrability,version,versions,235,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:387,integrability,version,versions,387,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:637,integrability,version,version,637,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:714,integrability,version,versions,714,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:131,interoperability,incompatib,incompatibility,131,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:255,interoperability,share,shared,255,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:61,modifiability,version,versions,61,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:71,modifiability,Upgrad,Upgraded,71,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:80,modifiability,version,version,80,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:156,modifiability,modul,modules,156,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:235,modifiability,version,versions,235,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:387,modifiability,version,versions,387,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:637,modifiability,version,version,637,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:714,modifiability,version,versions,714,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4647:156,safety,modul,modules,156,"[Exp PyROOT] MultiPython - Build PyROOT with multiple Python versions; Upgraded version of PR #4279. Changes were necessary due to incompatibility with C++ modules. Problem: due to how rootmap works, it's not possible to have multiple versions of a pair (shared library, pcm) with the same name, even in different directories. This feature lead to the impossibility of building multiple versions of libROOTPython, which used to contain, along with the pythonizations, also the TPython library. Solution: TPython and pythonizations have been split, and are built in libROOTTPython and libROOTPythonizations respectively. We only have one version of the former (the last one built) and possibility to build multiple versions for the latter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4647
https://github.com/root-project/root/pull/4648:96,availability,state,stated,96,"[Exp PyROOT] New cppyy does not copy into a Python str when iterating over a vector<string>; As stated in. https://bitbucket.org/wlav/cppyy/issues/176/issue-with-python-list-created-from-vector. in Cppyy-1.5.6 when we do the following:. l = [e for e in cppyy.gbl.get_vec()]. where get_vec() is a C++ injected function that returns a C++. std::vector<std::string>, the variable 'e' that goes through the vector is. not a Python string, but a temporary object of type std::string. Being 'e' a reference to a temporary, the vector goes out of scope. The second of the two solutions suggested in the discussion is applied. where necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4648
https://github.com/root-project/root/pull/4648:96,integrability,state,stated,96,"[Exp PyROOT] New cppyy does not copy into a Python str when iterating over a vector<string>; As stated in. https://bitbucket.org/wlav/cppyy/issues/176/issue-with-python-list-created-from-vector. in Cppyy-1.5.6 when we do the following:. l = [e for e in cppyy.gbl.get_vec()]. where get_vec() is a C++ injected function that returns a C++. std::vector<std::string>, the variable 'e' that goes through the vector is. not a Python string, but a temporary object of type std::string. Being 'e' a reference to a temporary, the vector goes out of scope. The second of the two solutions suggested in the discussion is applied. where necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4648
https://github.com/root-project/root/pull/4648:300,integrability,inject,injected,300,"[Exp PyROOT] New cppyy does not copy into a Python str when iterating over a vector<string>; As stated in. https://bitbucket.org/wlav/cppyy/issues/176/issue-with-python-list-created-from-vector. in Cppyy-1.5.6 when we do the following:. l = [e for e in cppyy.gbl.get_vec()]. where get_vec() is a C++ injected function that returns a C++. std::vector<std::string>, the variable 'e' that goes through the vector is. not a Python string, but a temporary object of type std::string. Being 'e' a reference to a temporary, the vector goes out of scope. The second of the two solutions suggested in the discussion is applied. where necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4648
https://github.com/root-project/root/pull/4648:368,modifiability,variab,variable,368,"[Exp PyROOT] New cppyy does not copy into a Python str when iterating over a vector<string>; As stated in. https://bitbucket.org/wlav/cppyy/issues/176/issue-with-python-list-created-from-vector. in Cppyy-1.5.6 when we do the following:. l = [e for e in cppyy.gbl.get_vec()]. where get_vec() is a C++ injected function that returns a C++. std::vector<std::string>, the variable 'e' that goes through the vector is. not a Python string, but a temporary object of type std::string. Being 'e' a reference to a temporary, the vector goes out of scope. The second of the two solutions suggested in the discussion is applied. where necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4648
https://github.com/root-project/root/pull/4648:23,reliability,doe,does,23,"[Exp PyROOT] New cppyy does not copy into a Python str when iterating over a vector<string>; As stated in. https://bitbucket.org/wlav/cppyy/issues/176/issue-with-python-list-created-from-vector. in Cppyy-1.5.6 when we do the following:. l = [e for e in cppyy.gbl.get_vec()]. where get_vec() is a C++ injected function that returns a C++. std::vector<std::string>, the variable 'e' that goes through the vector is. not a Python string, but a temporary object of type std::string. Being 'e' a reference to a temporary, the vector goes out of scope. The second of the two solutions suggested in the discussion is applied. where necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4648
https://github.com/root-project/root/pull/4648:300,security,inject,injected,300,"[Exp PyROOT] New cppyy does not copy into a Python str when iterating over a vector<string>; As stated in. https://bitbucket.org/wlav/cppyy/issues/176/issue-with-python-list-created-from-vector. in Cppyy-1.5.6 when we do the following:. l = [e for e in cppyy.gbl.get_vec()]. where get_vec() is a C++ injected function that returns a C++. std::vector<std::string>, the variable 'e' that goes through the vector is. not a Python string, but a temporary object of type std::string. Being 'e' a reference to a temporary, the vector goes out of scope. The second of the two solutions suggested in the discussion is applied. where necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4648
https://github.com/root-project/root/pull/4649:125,availability,error,error-writing-trees-with-snapshot-and-implicitmt,125,"Snapshot uses existing TDirectory when MT enabled; This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4649
https://github.com/root-project/root/pull/4649:281,availability,error,error,281,"Snapshot uses existing TDirectory when MT enabled; This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4649
https://github.com/root-project/root/pull/4649:125,performance,error,error-writing-trees-with-snapshot-and-implicitmt,125,"Snapshot uses existing TDirectory when MT enabled; This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4649
https://github.com/root-project/root/pull/4649:281,performance,error,error,281,"Snapshot uses existing TDirectory when MT enabled; This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4649
https://github.com/root-project/root/pull/4649:125,safety,error,error-writing-trees-with-snapshot-and-implicitmt,125,"Snapshot uses existing TDirectory when MT enabled; This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4649
https://github.com/root-project/root/pull/4649:281,safety,error,error,281,"Snapshot uses existing TDirectory when MT enabled; This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4649
https://github.com/root-project/root/pull/4649:125,usability,error,error-writing-trees-with-snapshot-and-implicitmt,125,"Snapshot uses existing TDirectory when MT enabled; This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4649
https://github.com/root-project/root/pull/4649:281,usability,error,error,281,"Snapshot uses existing TDirectory when MT enabled; This addresses the bug raised [in the forum](https://root-forum.cern.ch/t/error-writing-trees-with-snapshot-and-implicitmt/36965). Adds option to `TDirectoryFile` to call `mkdir` with an existing directory name without raising an error, and implements this option when creating a `Snapshot` with multithreading enabled. Also changes `CreateSnaphotRDF` to `CreateSnapshotRDF`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4649
https://github.com/root-project/root/pull/4650:267,deployability,API,API,267,"[PyROOT] Forward compatibility changes: ROOT.Long & ROOT.Double; This PR:. - Adds a deprecation warning to the old PyROOT when `ROOT.Long` and `ROOT.Double` are used to pass by reference ints and floats, respectively. - Removes `ROOT.Long` and `ROOT.Double` from the API of the new PyROOT, to comply with the requirements of the new Cppyy, where `ctypes` must be used instead. - Shows how to use `ctypes` instead of `Long` and `Double` in the PyROOT tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4650
https://github.com/root-project/root/pull/4650:267,integrability,API,API,267,"[PyROOT] Forward compatibility changes: ROOT.Long & ROOT.Double; This PR:. - Adds a deprecation warning to the old PyROOT when `ROOT.Long` and `ROOT.Double` are used to pass by reference ints and floats, respectively. - Removes `ROOT.Long` and `ROOT.Double` from the API of the new PyROOT, to comply with the requirements of the new Cppyy, where `ctypes` must be used instead. - Shows how to use `ctypes` instead of `Long` and `Double` in the PyROOT tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4650
https://github.com/root-project/root/pull/4650:17,interoperability,compatib,compatibility,17,"[PyROOT] Forward compatibility changes: ROOT.Long & ROOT.Double; This PR:. - Adds a deprecation warning to the old PyROOT when `ROOT.Long` and `ROOT.Double` are used to pass by reference ints and floats, respectively. - Removes `ROOT.Long` and `ROOT.Double` from the API of the new PyROOT, to comply with the requirements of the new Cppyy, where `ctypes` must be used instead. - Shows how to use `ctypes` instead of `Long` and `Double` in the PyROOT tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4650
https://github.com/root-project/root/pull/4650:267,interoperability,API,API,267,"[PyROOT] Forward compatibility changes: ROOT.Long & ROOT.Double; This PR:. - Adds a deprecation warning to the old PyROOT when `ROOT.Long` and `ROOT.Double` are used to pass by reference ints and floats, respectively. - Removes `ROOT.Long` and `ROOT.Double` from the API of the new PyROOT, to comply with the requirements of the new Cppyy, where `ctypes` must be used instead. - Shows how to use `ctypes` instead of `Long` and `Double` in the PyROOT tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4650
https://github.com/root-project/root/pull/4650:293,safety,compl,comply,293,"[PyROOT] Forward compatibility changes: ROOT.Long & ROOT.Double; This PR:. - Adds a deprecation warning to the old PyROOT when `ROOT.Long` and `ROOT.Double` are used to pass by reference ints and floats, respectively. - Removes `ROOT.Long` and `ROOT.Double` from the API of the new PyROOT, to comply with the requirements of the new Cppyy, where `ctypes` must be used instead. - Shows how to use `ctypes` instead of `Long` and `Double` in the PyROOT tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4650
https://github.com/root-project/root/pull/4650:293,security,compl,comply,293,"[PyROOT] Forward compatibility changes: ROOT.Long & ROOT.Double; This PR:. - Adds a deprecation warning to the old PyROOT when `ROOT.Long` and `ROOT.Double` are used to pass by reference ints and floats, respectively. - Removes `ROOT.Long` and `ROOT.Double` from the API of the new PyROOT, to comply with the requirements of the new Cppyy, where `ctypes` must be used instead. - Shows how to use `ctypes` instead of `Long` and `Double` in the PyROOT tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4650
https://github.com/root-project/root/pull/4651:437,availability,replic,replicate,437,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:171,deployability,integr,integration,171,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:171,integrability,integr,integration,171,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:171,interoperability,integr,integration,171,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:171,modifiability,integr,integration,171,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:171,reliability,integr,integration,171,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:171,security,integr,integration,171,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:171,testability,integr,integration,171,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:109,usability,custom,custom,109,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4651:233,usability,statu,status,233,"[io] Revert introduction of kCustomBrowse bit; It turns out that RNTuple data should better not be stored in custom directories because. 1. It is hard to get the TBrowser integration correctly; the TBrowser can only know the special status of the directory when looking at the object, looking at its key is not enough. 2. All the page keys get added to the directory's key list, which is inefficient. Instead, RNTuple will be changed to replicate the TTree approach: an ntuple is represented by a single, small `RNTuple` object, but the actual page data is stored in anonymous keys.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4651
https://github.com/root-project/root/pull/4652:595,availability,avail,available,595,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:458,deployability,configurat,configuration,458,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:635,deployability,instal,install,635,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:20,energy efficiency,load,load,20,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:303,energy efficiency,load,loaded,303,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:536,energy efficiency,load,load,536,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:723,energy efficiency,load,load,723,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:48,integrability,configur,configured,48,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:458,integrability,configur,configuration,458,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:48,modifiability,configur,configured,48,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:458,modifiability,configur,configuration,458,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:20,performance,load,load,20,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:303,performance,load,loaded,303,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:536,performance,load,load,536,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:723,performance,load,load,723,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:595,reliability,availab,available,595,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:595,safety,avail,available,595,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:48,security,configur,configured,48,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:125,security,access,accessible,125,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:458,security,configur,configuration,458,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:595,security,availab,available,595,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4652:252,usability,user,user,252,"[jupyter] correctly load jsroot; Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`. This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4652
https://github.com/root-project/root/pull/4653:127,availability,state,state,127,[eve-7] Highlight tree items on EveElement selection; This change colors tree items in Summary view according to REveSelection state. The colors have been chosen by sap_belize theme.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4653
https://github.com/root-project/root/pull/4653:127,integrability,state,state,127,[eve-7] Highlight tree items on EveElement selection; This change colors tree items in Summary view according to REveSelection state. The colors have been chosen by sap_belize theme.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4653
https://github.com/root-project/root/pull/4654:87,usability,command,commands,87,[RBrowser] Web terminal; This PR add a terminal to the Javascript Browser. it can send commands and display the output,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4654
https://github.com/root-project/root/pull/4656:367,deployability,version,version,367,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:854,deployability,patch,patch,854,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:1000,deployability,fail,failing,1000,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:1177,deployability,releas,releasing,1177,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:284,energy efficiency,Current,Currently,284,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:367,integrability,version,version,367,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:367,modifiability,version,version,367,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:1000,reliability,fail,failing,1000,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:43,safety,except,exception,43,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:854,safety,patch,patch,854,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:871,safety,unsaf,unsafe,871,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:959,safety,except,exception,959,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:854,security,patch,patch,854,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:314,testability,assert,assert,314,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4656:264,usability,support,supported,264,"[cxxmodules] Delay constexpr evaluation of exception spec when deseri…; …alizing. When we deserialize a function with noexcept(constant_expression) qualifier the. constant_expression itself might trigger deserialization. Triggering nested. deserializations is not supported in clang. Currently we just removed the assert but this shows problems when we go to. higher version of stl's (such as the one in ubuntu19) which more heavily. rely on constexpr. We segfault in cases where we do equivalent of:. ```. cling::Interpreter *interp = ((TCling*)gCling)->GetInterpreterImpl();. auto& lh = interp->getLookupHelper();. auto diag = cling::LookupHelper::WithDiagnostics;. auto S = lh.findScope(""ROOT::Internal::RDF"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<float>"", diag);. lh.findAnyFunction(S, ""RDataFrameTake<std::vector<float>>"", diag);. ```. This patch delays the unsafe computation of type of the deserialized function. and thus the evaluation of the exception qualifier. This should fix the failing. pyunittests-pyroot-rdataframe-asnumpy nightly on ubuntu 19. The red pill is applying llvm-mirror/clang@5d50602a8de220e1f0bbdd136e9a7be21a1b63c0. This will happen after releasing v6.20.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4656
https://github.com/root-project/root/pull/4658:293,deployability,contain,contain,293,"[ntuple] Implement Show function for RNTuple; This PR implements the Show-function and can display the type values of all existing fields except for VecOps and std::variant. It can also display vectors of vectors, arrays of arrays, vectors of arrays, arrays of vectors, array of objects which contain vectors of vectors and vector of objects which contain vectors of vectors. Unlike previous versions of the Show-function, it does not require gInterpreter and const_cast. Syntax:. RNTupleReaderPtr->Show(std::uint64_t entryNumberToShow);. Sorry for the previous messed up PR...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4658
https://github.com/root-project/root/pull/4658:348,deployability,contain,contain,348,"[ntuple] Implement Show function for RNTuple; This PR implements the Show-function and can display the type values of all existing fields except for VecOps and std::variant. It can also display vectors of vectors, arrays of arrays, vectors of arrays, arrays of vectors, array of objects which contain vectors of vectors and vector of objects which contain vectors of vectors. Unlike previous versions of the Show-function, it does not require gInterpreter and const_cast. Syntax:. RNTupleReaderPtr->Show(std::uint64_t entryNumberToShow);. Sorry for the previous messed up PR...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4658
https://github.com/root-project/root/pull/4658:392,deployability,version,versions,392,"[ntuple] Implement Show function for RNTuple; This PR implements the Show-function and can display the type values of all existing fields except for VecOps and std::variant. It can also display vectors of vectors, arrays of arrays, vectors of arrays, arrays of vectors, array of objects which contain vectors of vectors and vector of objects which contain vectors of vectors. Unlike previous versions of the Show-function, it does not require gInterpreter and const_cast. Syntax:. RNTupleReaderPtr->Show(std::uint64_t entryNumberToShow);. Sorry for the previous messed up PR...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4658
https://github.com/root-project/root/pull/4658:392,integrability,version,versions,392,"[ntuple] Implement Show function for RNTuple; This PR implements the Show-function and can display the type values of all existing fields except for VecOps and std::variant. It can also display vectors of vectors, arrays of arrays, vectors of arrays, arrays of vectors, array of objects which contain vectors of vectors and vector of objects which contain vectors of vectors. Unlike previous versions of the Show-function, it does not require gInterpreter and const_cast. Syntax:. RNTupleReaderPtr->Show(std::uint64_t entryNumberToShow);. Sorry for the previous messed up PR...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4658
https://github.com/root-project/root/pull/4658:392,modifiability,version,versions,392,"[ntuple] Implement Show function for RNTuple; This PR implements the Show-function and can display the type values of all existing fields except for VecOps and std::variant. It can also display vectors of vectors, arrays of arrays, vectors of arrays, arrays of vectors, array of objects which contain vectors of vectors and vector of objects which contain vectors of vectors. Unlike previous versions of the Show-function, it does not require gInterpreter and const_cast. Syntax:. RNTupleReaderPtr->Show(std::uint64_t entryNumberToShow);. Sorry for the previous messed up PR...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4658
https://github.com/root-project/root/pull/4658:426,reliability,doe,does,426,"[ntuple] Implement Show function for RNTuple; This PR implements the Show-function and can display the type values of all existing fields except for VecOps and std::variant. It can also display vectors of vectors, arrays of arrays, vectors of arrays, arrays of vectors, array of objects which contain vectors of vectors and vector of objects which contain vectors of vectors. Unlike previous versions of the Show-function, it does not require gInterpreter and const_cast. Syntax:. RNTupleReaderPtr->Show(std::uint64_t entryNumberToShow);. Sorry for the previous messed up PR...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4658
https://github.com/root-project/root/pull/4658:138,safety,except,except,138,"[ntuple] Implement Show function for RNTuple; This PR implements the Show-function and can display the type values of all existing fields except for VecOps and std::variant. It can also display vectors of vectors, arrays of arrays, vectors of arrays, arrays of vectors, array of objects which contain vectors of vectors and vector of objects which contain vectors of vectors. Unlike previous versions of the Show-function, it does not require gInterpreter and const_cast. Syntax:. RNTupleReaderPtr->Show(std::uint64_t entryNumberToShow);. Sorry for the previous messed up PR...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4658
https://github.com/root-project/root/pull/4659:21,deployability,modul,modulemaps,21,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:77,deployability,patch,patch,77,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:181,deployability,patch,patch,181,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:111,interoperability,specif,specific,111,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:21,modifiability,modul,modulemaps,21,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:21,safety,modul,modulemaps,21,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:77,safety,patch,patch,77,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:181,safety,patch,patch,181,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:77,security,patch,patch,77,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:181,security,patch,patch,181,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4659:268,usability,Command,CommandLineTools,268,[cxxmodules] Resolve modulemaps after the HeaderSearch is initialized.; This patch allows us to resolve system-specific header search directories such as the location of libc. This patch fixes experimental runtime_cxxmodules on OSX where libc is in /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/. cc: @oshadura,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4659
https://github.com/root-project/root/pull/4660:39,deployability,contain,contain,39,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:61,deployability,modul,modulemaps,61,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:79,deployability,patch,patch,79,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:111,deployability,modul,modules,111,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:61,modifiability,modul,modulemaps,61,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:111,modifiability,modul,modules,111,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:61,safety,modul,modulemaps,61,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:79,safety,patch,patch,79,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:111,safety,modul,modules,111,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:79,security,patch,patch,79,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:92,testability,simpl,simplify,92,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4660:92,usability,simpl,simplify,92,"[tcling] Allow CLING_MODULEMAP_PATH to contain paths with no modulemaps.; This patch should simplify the cmssw modules setup. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4660
https://github.com/root-project/root/pull/4661:502,integrability,buffer,buffer,502,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:528,integrability,buffer,buffer,528,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:26,interoperability,compatib,compatible,26,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:133,interoperability,compatib,compatibility,133,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:222,interoperability,convers,conversion,222,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:277,interoperability,compatib,compatible,277,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:330,interoperability,Bind,BindObject,330,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:558,interoperability,compatib,compatible,558,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:602,interoperability,prox,proxies,602,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:653,interoperability,compatib,compatible,653,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:762,interoperability,Bind,BindObject,762,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:330,modifiability,Bind,BindObject,330,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:762,modifiability,Bind,BindObject,762,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:799,safety,test,test,799,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:374,security,access,accessible,374,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:434,security,access,accessible,434,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4661:799,testability,test,test,799,"[PyROOT] Forward&backward compatible changes; This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:. - Issue a deprecation warning when the conversion None -> null pointer happens. - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`). - Make nullptr accessible as cppyy.nullptr. - Make pythonization functions accessible via cppyy.py . - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible. - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT. - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`. - Provide `BindObject` and `AsCObject`. Related test PR:. https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4661
https://github.com/root-project/root/pull/4662:351,integrability,interfac,interface,351,"Implementing RFileDialog class; Provide RFileDialog class. Can be used standalone or embed into other widgets. Used now in RBrowser to implement SaveAs functionality for edited file. Key feature - sharing of web connection of RBrowser also for RFileDialog. Includes changes in RWebWindow classes and in JSROOT,. but opens a lot of possibility for MDI interface developments in the future! Now code is ready to be merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4662
https://github.com/root-project/root/pull/4662:351,interoperability,interfac,interface,351,"Implementing RFileDialog class; Provide RFileDialog class. Can be used standalone or embed into other widgets. Used now in RBrowser to implement SaveAs functionality for edited file. Key feature - sharing of web connection of RBrowser also for RFileDialog. Includes changes in RWebWindow classes and in JSROOT,. but opens a lot of possibility for MDI interface developments in the future! Now code is ready to be merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4662
https://github.com/root-project/root/pull/4662:351,modifiability,interfac,interface,351,"Implementing RFileDialog class; Provide RFileDialog class. Can be used standalone or embed into other widgets. Used now in RBrowser to implement SaveAs functionality for edited file. Key feature - sharing of web connection of RBrowser also for RFileDialog. Includes changes in RWebWindow classes and in JSROOT,. but opens a lot of possibility for MDI interface developments in the future! Now code is ready to be merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4662
https://github.com/root-project/root/pull/4662:102,usability,widget,widgets,102,"Implementing RFileDialog class; Provide RFileDialog class. Can be used standalone or embed into other widgets. Used now in RBrowser to implement SaveAs functionality for edited file. Key feature - sharing of web connection of RBrowser also for RFileDialog. Includes changes in RWebWindow classes and in JSROOT,. but opens a lot of possibility for MDI interface developments in the future! Now code is ready to be merged.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4662
https://github.com/root-project/root/pull/4663:42,safety,test,tests,42,[TMVA exp][ROOT-10417] Fix bug in RTensor tests; Swapped indices in explicit loop over the elements,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4663
https://github.com/root-project/root/pull/4663:42,testability,test,tests,42,[TMVA exp][ROOT-10417] Fix bug in RTensor tests; Swapped indices in explicit loop over the elements,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4663
https://github.com/root-project/root/pull/4665:222,reliability,doe,does,222,[RVec][Exp PyROOT] Added virtual destructor to RVec class; As explained in:. https://sft.its.cern.ch/jira/browse/ROOT-10439. in new Cppyy it is not possible to define a Python class derived from a. C++ class if the latter does not implement a virtual destructor. We implement it for RVec in case someone wants to define a Python class. derived from it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4665
https://github.com/root-project/root/pull/4666:130,deployability,build,buildid,130,"[JupyROOT] Add timestamp to library generated with aclic; Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4666
https://github.com/root-project/root/pull/4666:15,performance,time,timestamp,15,"[JupyROOT] Add timestamp to library generated with aclic; Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4666
https://github.com/root-project/root/pull/4666:58,safety,Prevent,Prevent,58,"[JupyROOT] Add timestamp to library generated with aclic; Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4666
https://github.com/root-project/root/pull/4666:165,safety,test,tests,165,"[JupyROOT] Add timestamp to library generated with aclic; Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4666
https://github.com/root-project/root/pull/4666:58,security,Preven,Prevent,58,"[JupyROOT] Add timestamp to library generated with aclic; Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4666
https://github.com/root-project/root/pull/4666:165,testability,test,tests,165,"[JupyROOT] Add timestamp to library generated with aclic; Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4666
https://github.com/root-project/root/pull/4667:0,deployability,Build,Build,0,Build system updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4667
https://github.com/root-project/root/pull/4667:13,deployability,updat,updates,13,Build system updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4667
https://github.com/root-project/root/pull/4667:13,safety,updat,updates,13,Build system updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4667
https://github.com/root-project/root/pull/4667:13,security,updat,updates,13,Build system updates;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4667
https://github.com/root-project/root/pull/4668:362,deployability,patch,patch,362,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:667,deployability,version,versions,667,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:6,energy efficiency,Load,Load,6,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:667,integrability,version,versions,667,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:667,modifiability,version,versions,667,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:6,performance,Load,Load,6,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:42,safety,avoid,avoid,42,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:362,safety,patch,patch,362,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:362,security,patch,patch,362,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:569,usability,Progress,Progress,569,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4668:688,usability,support,support,688,"[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols; This is an alternative approach to solve the problem of colliding LLVM symbols, if other libraries bring in their own LLVM. The original approach was to force other LLVM libraries to be compiled with -fvisibility=hidden or being opened with dlopen after TROOT::InitInterpreter(). This patch solves the issue on the ROOT side, which seems to me the much cleaner approach because we do not pose any limitations on 3rd party libraries. I tried it locally and it works for me. Marked as ""Work in Progress"", since this might need some more thought, in particular for other OS, and for old glibc versions that do not support RTLD_DEEPBIND.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4668
https://github.com/root-project/root/pull/4669:166,deployability,contain,containing,166,[eve-7] Create more informative REveDataItem tooltip in REveDataSimpleProxyBuilder; The tooltips in Graphical views are auto-generated in REveDataSimpleProxyBuilder: containing Collection name and item's index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4669
https://github.com/root-project/root/pull/4669:45,usability,tool,tooltip,45,[eve-7] Create more informative REveDataItem tooltip in REveDataSimpleProxyBuilder; The tooltips in Graphical views are auto-generated in REveDataSimpleProxyBuilder: containing Collection name and item's index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4669
https://github.com/root-project/root/pull/4669:88,usability,tool,tooltips,88,[eve-7] Create more informative REveDataItem tooltip in REveDataSimpleProxyBuilder; The tooltips in Graphical views are auto-generated in REveDataSimpleProxyBuilder: containing Collection name and item's index.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4669
https://github.com/root-project/root/pull/4670:801,availability,Error,Error,801,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:387,deployability,version,version,387,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:464,deployability,automat,automatically-constructed-makeselector,464,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:387,integrability,version,version,387,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:672,integrability,event,event,672,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:686,integrability,sub,subRun,686,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:737,integrability,event,event,737,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:775,integrability,event,event,775,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:387,modifiability,version,version,387,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:801,performance,Error,Error,801,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:801,safety,Error,Error,801,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:464,testability,automat,automatically-constructed-makeselector,464,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4670:801,usability,Error,Error,801,"Fix SearchBranchWithCompositeName handling of [unsigned long long] leaf.; Previously the checks that the type of the readerValue and the leaf (part of a leaflist) was susceptible to the. 'difference' between '[U]Long64_t' and '[unsigned] long long'. The previous check did not account for TDictionary::GetDictionary returning 'typedef' information. So instead rely on the numerical/enum version of the type. This addresses https://root-forum.cern.ch/t/issues-with-automatically-constructed-makeselector/37033. and https://root-forum.cern.ch/t/how-to-read-unsigned-long-using-ttreereader/21850. *Br 0 :SelectOpHitBkgInfo : deltat0/D:deltat/D:t0/D:te/D:tabs/D:PEs/D: *. * | event/l:run/l:subRun/l:chan/l:bar/l. TTreeReaderValue<ULong64_t> event = {fReader, ""SelectOpHitBkgInfo.event""};. was leading to. Error in <TTreeReaderValueBase::CreateProxy()>: Leaf of type ULong64_t cannot be read by TTreeReaderValue<unsigned long long>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4670
https://github.com/root-project/root/pull/4671:277,availability,error,errors,277,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:43,deployability,patch,patch,43,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:73,deployability,patch,patch,73,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:149,deployability,patch,patches,149,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:434,deployability,patch,patch,434,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:575,deployability,version,version,575,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:575,integrability,version,version,575,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:479,interoperability,compatib,compatible,479,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:575,modifiability,version,version,575,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:277,performance,error,errors,277,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:17,safety,except,exception,17,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:43,safety,patch,patch,43,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:73,safety,patch,patch,73,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:149,safety,patch,patches,149,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:189,safety,except,exception,189,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:277,safety,error,errors,277,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:434,safety,patch,patch,434,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:539,safety,except,exception,539,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:599,safety,except,exception,599,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:714,safety,except,exception,714,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:835,safety,review,reviewed,835,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:43,security,patch,patch,43,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:73,security,patch,patch,73,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:149,security,patch,patches,149,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:157,security,sign,signaltrycatch,157,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:387,security,sign,signal,387,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:434,security,patch,patch,434,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:449,security,modif,modified,449,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:835,testability,review,reviewed,835,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:251,usability,experien,experience,251,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:277,usability,error,errors,277,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:375,usability,support,support,375,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4671:765,usability,behavi,behaviour,765,"[Exp PyROOT] New exception handler - cppyy patch; Based on the following patch by @wlav :. https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/signaltrycatch.diff. Adds a new exception handler used by cppyy to provide a better debugging experience in presence of errors:. https://cppyy.readthedocs.io/en/latest/debugging.html. It also adds SIGABRT and provides support for signal handling on Windows. The original cppyy patch has been modified to make it backwards compatible, since it eliminated the use of gApplication for exception handling in Unix. In this version, if there is an exception handler (e.g. we are using PyROOT, which defines it via cppyy) we will rely on that handler to treat the exception,. otherwise we fall back to the previous behaviour which relied on gApplication. Windows-related changes to be reviewed by @bellenot.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4671
https://github.com/root-project/root/pull/4672:292,availability,operat,operator,292,"[Exp PyROOT] Changed syntax in C++ header jitted in a test; In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress. pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<"". operator. With the definition of a std::string object the problem is. solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4672
https://github.com/root-project/root/pull/4672:227,deployability,fail,failing,227,"[Exp PyROOT] Changed syntax in C++ header jitted in a test; In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress. pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<"". operator. With the definition of a std::string object the problem is. solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4672
https://github.com/root-project/root/pull/4672:77,interoperability,platform,platform,77,"[Exp PyROOT] Changed syntax in C++ header jitted in a test; In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress. pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<"". operator. With the definition of a std::string object the problem is. solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4672
https://github.com/root-project/root/pull/4672:227,reliability,fail,failing,227,"[Exp PyROOT] Changed syntax in C++ header jitted in a test; In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress. pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<"". operator. With the definition of a std::string object the problem is. solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4672
https://github.com/root-project/root/pull/4672:54,safety,test,test,54,"[Exp PyROOT] Changed syntax in C++ header jitted in a test; In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress. pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<"". operator. With the definition of a std::string object the problem is. solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4672
https://github.com/root-project/root/pull/4672:125,safety,test,tests,125,"[Exp PyROOT] Changed syntax in C++ header jitted in a test; In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress. pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<"". operator. With the definition of a std::string object the problem is. solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4672
https://github.com/root-project/root/pull/4672:54,testability,test,test,54,"[Exp PyROOT] Changed syntax in C++ header jitted in a test; In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress. pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<"". operator. With the definition of a std::string object the problem is. solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4672
https://github.com/root-project/root/pull/4672:125,testability,test,tests,125,"[Exp PyROOT] Changed syntax in C++ header jitted in a test; In the following platform:. olhswep22.cern.ch. the two following tests:. pyunittests-pyroot-pyz-ttree-setbranchaddress. pyunittests-pyroot-pyz-ttree-branch-attr. were failing because a string was not properly created with the ""<<"". operator. With the definition of a std::string object the problem is. solved.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4672
https://github.com/root-project/root/pull/4674:221,deployability,contain,container,221,"[ntuple] Unify raw and TFile page storage; Merges `RPageStorageRaw` and `RPageStorageRoot` into a single `RPageStorageFile` set of classes. The new classes can read and write RNTuple data stored either in a raw file as a container or in a ROOT TFile. The TFile format support takes place on binary level. The new classes `RMiniFileReader` and `RMiniFileWriter` implement enough of the TFile binary specification to read RNTuple data from a ROOT file and to write a single RNTuple into a new ROOT file. In order to write multiple objects (RNTuple or other) into the same file, the `RMiniFileWriter` needs a proper `TFile` object. Along with merging the classes, the TFile container for RNTuple now works similar to storing a TTree: there is a single, named and known key for an RNTuple. The data in this key references the RNTuple header and footer, which in turn reference the pages. Pages, header, and footer are stored in anonymous and unindexed keys, as are TBaskets. A current limitation is that RNTuple needs to be in the root directory of the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4674
https://github.com/root-project/root/pull/4674:671,deployability,contain,container,671,"[ntuple] Unify raw and TFile page storage; Merges `RPageStorageRaw` and `RPageStorageRoot` into a single `RPageStorageFile` set of classes. The new classes can read and write RNTuple data stored either in a raw file as a container or in a ROOT TFile. The TFile format support takes place on binary level. The new classes `RMiniFileReader` and `RMiniFileWriter` implement enough of the TFile binary specification to read RNTuple data from a ROOT file and to write a single RNTuple into a new ROOT file. In order to write multiple objects (RNTuple or other) into the same file, the `RMiniFileWriter` needs a proper `TFile` object. Along with merging the classes, the TFile container for RNTuple now works similar to storing a TTree: there is a single, named and known key for an RNTuple. The data in this key references the RNTuple header and footer, which in turn reference the pages. Pages, header, and footer are stored in anonymous and unindexed keys, as are TBaskets. A current limitation is that RNTuple needs to be in the root directory of the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4674
https://github.com/root-project/root/pull/4674:973,energy efficiency,current,current,973,"[ntuple] Unify raw and TFile page storage; Merges `RPageStorageRaw` and `RPageStorageRoot` into a single `RPageStorageFile` set of classes. The new classes can read and write RNTuple data stored either in a raw file as a container or in a ROOT TFile. The TFile format support takes place on binary level. The new classes `RMiniFileReader` and `RMiniFileWriter` implement enough of the TFile binary specification to read RNTuple data from a ROOT file and to write a single RNTuple into a new ROOT file. In order to write multiple objects (RNTuple or other) into the same file, the `RMiniFileWriter` needs a proper `TFile` object. Along with merging the classes, the TFile container for RNTuple now works similar to storing a TTree: there is a single, named and known key for an RNTuple. The data in this key references the RNTuple header and footer, which in turn reference the pages. Pages, header, and footer are stored in anonymous and unindexed keys, as are TBaskets. A current limitation is that RNTuple needs to be in the root directory of the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4674
https://github.com/root-project/root/pull/4674:261,interoperability,format,format,261,"[ntuple] Unify raw and TFile page storage; Merges `RPageStorageRaw` and `RPageStorageRoot` into a single `RPageStorageFile` set of classes. The new classes can read and write RNTuple data stored either in a raw file as a container or in a ROOT TFile. The TFile format support takes place on binary level. The new classes `RMiniFileReader` and `RMiniFileWriter` implement enough of the TFile binary specification to read RNTuple data from a ROOT file and to write a single RNTuple into a new ROOT file. In order to write multiple objects (RNTuple or other) into the same file, the `RMiniFileWriter` needs a proper `TFile` object. Along with merging the classes, the TFile container for RNTuple now works similar to storing a TTree: there is a single, named and known key for an RNTuple. The data in this key references the RNTuple header and footer, which in turn reference the pages. Pages, header, and footer are stored in anonymous and unindexed keys, as are TBaskets. A current limitation is that RNTuple needs to be in the root directory of the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4674
https://github.com/root-project/root/pull/4674:398,interoperability,specif,specification,398,"[ntuple] Unify raw and TFile page storage; Merges `RPageStorageRaw` and `RPageStorageRoot` into a single `RPageStorageFile` set of classes. The new classes can read and write RNTuple data stored either in a raw file as a container or in a ROOT TFile. The TFile format support takes place on binary level. The new classes `RMiniFileReader` and `RMiniFileWriter` implement enough of the TFile binary specification to read RNTuple data from a ROOT file and to write a single RNTuple into a new ROOT file. In order to write multiple objects (RNTuple or other) into the same file, the `RMiniFileWriter` needs a proper `TFile` object. Along with merging the classes, the TFile container for RNTuple now works similar to storing a TTree: there is a single, named and known key for an RNTuple. The data in this key references the RNTuple header and footer, which in turn reference the pages. Pages, header, and footer are stored in anonymous and unindexed keys, as are TBaskets. A current limitation is that RNTuple needs to be in the root directory of the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4674
https://github.com/root-project/root/pull/4674:268,usability,support,support,268,"[ntuple] Unify raw and TFile page storage; Merges `RPageStorageRaw` and `RPageStorageRoot` into a single `RPageStorageFile` set of classes. The new classes can read and write RNTuple data stored either in a raw file as a container or in a ROOT TFile. The TFile format support takes place on binary level. The new classes `RMiniFileReader` and `RMiniFileWriter` implement enough of the TFile binary specification to read RNTuple data from a ROOT file and to write a single RNTuple into a new ROOT file. In order to write multiple objects (RNTuple or other) into the same file, the `RMiniFileWriter` needs a proper `TFile` object. Along with merging the classes, the TFile container for RNTuple now works similar to storing a TTree: there is a single, named and known key for an RNTuple. The data in this key references the RNTuple header and footer, which in turn reference the pages. Pages, header, and footer are stored in anonymous and unindexed keys, as are TBaskets. A current limitation is that RNTuple needs to be in the root directory of the file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4674
https://github.com/root-project/root/pull/4675:153,availability,down,down,153,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:314,availability,down,down,314,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:33,deployability,log,logic,33,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:164,deployability,patch,patch,164,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:191,deployability,modul,module,191,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:291,deployability,patch,patch,291,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:324,deployability,infrastructur,infrastructure,324,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:362,deployability,build,build,362,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:390,deployability,modul,module,390,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:191,modifiability,modul,module,191,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:390,modifiability,modul,module,390,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:33,safety,log,logic,33,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:164,safety,patch,patch,164,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:191,safety,modul,module,191,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:291,safety,patch,patch,291,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:390,safety,modul,module,390,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:33,security,log,logic,33,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:164,security,patch,patch,164,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:291,security,patch,patch,291,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:33,testability,log,logic,33,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:428,testability,context,context,428,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4675:255,usability,clear,clearOutputFiles,255,"[tcling][cling] Improve shutdown logic.; We should follow the shutdown procedure from FrontendAction::EndSourceFile which ensures clang is properly torn down. This patch allows us to write a module file without having to explicitly call CompilerInstance::clearOutputFiles. This is part of a patch intending to lay down some infrastructure to fix the conditional build of the clang-internal module _Builtin_intrinsics.pcm in the context of cmssw. I've found an easier way to do so, however, this is of generic importance for ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4675
https://github.com/root-project/root/pull/4676:500,availability,error,errors,500,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:18,deployability,build,building,18,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:86,deployability,modul,modules,86,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:278,deployability,patch,patch,278,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:356,deployability,instal,installed,356,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:423,deployability,modul,module,423,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:86,modifiability,modul,modules,86,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:423,modifiability,modul,module,423,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:500,performance,error,errors,500,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:404,reliability,doe,does,404,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:86,safety,modul,modules,86,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:278,safety,patch,patch,278,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:423,safety,modul,module,423,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:500,safety,error,errors,500,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:278,security,patch,patch,278,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4676:500,usability,error,errors,500,"[rootcling] Force building of _Builtin_intrinsics.; It is part of the set of 'system' modules which gets created on demand when a dictionary includes intrinsics. Make this action explicit. This way we can invalidate it (from within rootcling) and rebuild it when required. This patch also fixes an issue in cmssw where _Builtin_intrinsics is generated and installed on cvmfs. If we have local ROOT which does not have this module generated, the system picks up the one from cvmfs causing out-of-date errors. cc: @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4676
https://github.com/root-project/root/pull/4677:240,energy efficiency,core,core,240,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:77,integrability,schema,schema,77,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:281,integrability,schema,schema,281,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:94,interoperability,convers,conversion,94,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:472,interoperability,convers,conversion,472,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:64,modifiability,extens,extension,64,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:128,safety,review,review,128,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:268,security,checksum,checksums,268,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:334,security,checksum,checksums,334,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:459,security,checksum,checksums,459,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:518,security,checksum,checksum,518,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4677:128,testability,review,review,128,"Bugfixes for RooFit; These are four bugfixes for RooFit, and an extension of schema evolution conversion rules. @pcanal, please review the following:. https://github.com/root-project/root/commit/4922063626badad3934edb5965aced6ea678c7c3. > [core] Allow hex numbers for checksums in schema rules. > . > When streamer infos are printed, checksums appear in hex. When rules are. > parsed, hex values were not accepted, though. This allows both hex and. > decimal checksums in conversion rules. Is this useful? If not, the checksum in one of the bugfixes has to be converted to decimal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4677
https://github.com/root-project/root/pull/4678:41,availability,operat,operators,41,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:75,availability,operat,operator,75,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:90,availability,operat,operator,90,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:383,availability,operat,operators,383,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:582,availability,operat,operators,582,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:634,availability,operat,operator,634,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:649,availability,operat,operator,649,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:800,availability,error,error,800,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:620,deployability,log,logic,620,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:691,interoperability,prox,proxy,691,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:800,performance,error,error,800,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:620,safety,log,logic,620,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:800,safety,error,error,800,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:620,security,log,logic,620,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:620,testability,log,logic,620,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4678:800,usability,error,error,800,"[ROOT-10474] GCC9: Lazily add comparison operators for iterators; In GCC9, operator== and operator!= are no longer member functions of STL iterators (seen in _Rb_tree_iterator). This means they cannot be obtained anymore with GetListOfMethods of the iterator class. Such change broke the iteration of STL classes from Python when using (old) cppyy alone in GCC9. The addition of the operators to the iterator class still happened when importing ROOT because. in that case gApplication is initialized to TPyROOTApplication, which is required in Utility::AddBinaryOperator to add the operators. This PR adds the necessary logic so that operator== and operator!= are also added to the iterator proxy class when using cppyy alone in GCC9. The addition is done lazily as a last attempt before throwing an error in the comparison.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4678
https://github.com/root-project/root/pull/4679:89,energy efficiency,current,current,89,"Fix rf102_dataimport.C on Windows; The ""/tmp/"" directory doesn't exist on Windows. Using current directory should be fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4679
https://github.com/root-project/root/pull/4679:57,reliability,doe,doesn,57,"Fix rf102_dataimport.C on Windows; The ""/tmp/"" directory doesn't exist on Windows. Using current directory should be fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4679
https://github.com/root-project/root/pull/4681:154,deployability,build,buildid,154,"[Exp PyROOT] Add timestamp to library generated with aclic; Port from old PyROOT. Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name. The change in behaviour also requires the corresponding. modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4681
https://github.com/root-project/root/pull/4681:17,performance,time,timestamp,17,"[Exp PyROOT] Add timestamp to library generated with aclic; Port from old PyROOT. Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name. The change in behaviour also requires the corresponding. modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4681
https://github.com/root-project/root/pull/4681:82,safety,Prevent,Prevent,82,"[Exp PyROOT] Add timestamp to library generated with aclic; Port from old PyROOT. Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name. The change in behaviour also requires the corresponding. modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4681
https://github.com/root-project/root/pull/4681:189,safety,test,tests,189,"[Exp PyROOT] Add timestamp to library generated with aclic; Port from old PyROOT. Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name. The change in behaviour also requires the corresponding. modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4681
https://github.com/root-project/root/pull/4681:82,security,Preven,Prevent,82,"[Exp PyROOT] Add timestamp to library generated with aclic; Port from old PyROOT. Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name. The change in behaviour also requires the corresponding. modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4681
https://github.com/root-project/root/pull/4681:336,security,modif,modifications,336,"[Exp PyROOT] Add timestamp to library generated with aclic; Port from old PyROOT. Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name. The change in behaviour also requires the corresponding. modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4681
https://github.com/root-project/root/pull/4681:189,testability,test,tests,189,"[Exp PyROOT] Add timestamp to library generated with aclic; Port from old PyROOT. Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name. The change in behaviour also requires the corresponding. modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4681
https://github.com/root-project/root/pull/4681:293,usability,behavi,behaviour,293,"[Exp PyROOT] Add timestamp to library generated with aclic; Port from old PyROOT. Prevent issues seen here:. http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=772393. where two JupyROOT tests that use ""%%cpp -a"" seem to step on. each other and generate the same library name. The change in behaviour also requires the corresponding. modifications to the doctests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4681
https://github.com/root-project/root/pull/4682:190,deployability,API,API,190,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:214,energy efficiency,model,model,214,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:502,energy efficiency,model,model,502,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:190,integrability,API,API,190,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:190,interoperability,API,API,190,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:14,modifiability,paramet,parameter,14,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:123,modifiability,paramet,parameter,123,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:269,reliability,doe,does,269,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:214,security,model,model,214,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4682:502,security,model,model,502,Fix setttings parameter limits when using TBinomialEfficiencyFitter. (ROOT-10481); By calling SetFunction after SetFCN the parameter settings are reset. . This is now solved by adding a new API in SetFCN where the model function is. also passed and Fitter::SetFunction does not need to be called anymore. The bug was introduced few months ago (for 6.18) with this commit: . https://github.com/root-project/root/commit/e864d6d546de78aa0a278a7f534d2271f972cd5a#diff-bb181d7808f6c937d67b336b5e91ed11. The model function is used in FitResult for computiong confidence intervals after fitting. This fixes ROOT-10481,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4682
https://github.com/root-project/root/pull/4683:249,availability,operat,operations,249,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:349,availability,error,error,349,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:355,availability,state,state,355,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:136,deployability,contain,contains,136,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:270,deployability,fail,fail,270,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:300,integrability,wrap,wraps,300,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:355,integrability,state,state,355,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:349,performance,error,error,349,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:169,reliability,diagno,diagnostic,169,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:270,reliability,fail,fail,270,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:19,safety,except,exception,19,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:121,safety,except,exceptions,121,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:315,safety,valid,valid,315,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:349,safety,error,error,349,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:415,safety,except,exception,415,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:169,testability,diagno,diagnostic,169,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4683:349,usability,error,error,349,"[v7] add ROOT base exception and RResult<T> class; The RException class is supposed to serve as base class for all ROOT. exceptions. It contains an `RError` member with diagnostic information. The `RResult<T>` class can be used as a return value of operations that. may fail. The `RResult<T>` object wraps either a valid value or an `RError`. If an error state remains unchecked, the `RResult` class will throw an. exception on destruction.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4683
https://github.com/root-project/root/pull/4684:55,availability,avail,available,55,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:41,deployability,log,logical,41,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:126,deployability,log,logical,126,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:49,energy efficiency,core,cores,49,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:134,energy efficiency,core,cores,134,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:172,energy efficiency,CPU,CPU,172,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:172,performance,CPU,CPU,172,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:55,reliability,availab,available,55,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:41,safety,log,logical,41,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:55,safety,avail,available,55,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:126,safety,log,logical,126,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:41,security,log,logical,41,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:55,security,availab,available,55,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:126,security,log,logical,126,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:202,security,control,control,202,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:41,testability,log,logical,41,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:126,testability,log,logical,126,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4684:202,testability,control,control,202,"add a function to retrieve the number of logical cores available; Added a function in TROOT to retrieve the correct number of logical cores, taking into account (in linux) CPU affinity and CFS bandwith control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4684
https://github.com/root-project/root/pull/4685:15,deployability,manag,management,15,Fix the memory management of internal histograms in TMVA::ROCCalc class; Some of the histograms cretaed internally by the TMVA ROCCalc class were deleted and others not. For example the ROC curve histogram returned by ROCCalc::GetROCCurve was deleted in the destructor of. ROCCalc. This was causing a crash when exiting. Some other histograms instead were not deleted,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4685
https://github.com/root-project/root/pull/4685:15,energy efficiency,manag,management,15,Fix the memory management of internal histograms in TMVA::ROCCalc class; Some of the histograms cretaed internally by the TMVA ROCCalc class were deleted and others not. For example the ROC curve histogram returned by ROCCalc::GetROCCurve was deleted in the destructor of. ROCCalc. This was causing a crash when exiting. Some other histograms instead were not deleted,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4685
https://github.com/root-project/root/pull/4685:8,performance,memor,memory,8,Fix the memory management of internal histograms in TMVA::ROCCalc class; Some of the histograms cretaed internally by the TMVA ROCCalc class were deleted and others not. For example the ROC curve histogram returned by ROCCalc::GetROCCurve was deleted in the destructor of. ROCCalc. This was causing a crash when exiting. Some other histograms instead were not deleted,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4685
https://github.com/root-project/root/pull/4685:15,safety,manag,management,15,Fix the memory management of internal histograms in TMVA::ROCCalc class; Some of the histograms cretaed internally by the TMVA ROCCalc class were deleted and others not. For example the ROC curve histogram returned by ROCCalc::GetROCCurve was deleted in the destructor of. ROCCalc. This was causing a crash when exiting. Some other histograms instead were not deleted,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4685
https://github.com/root-project/root/pull/4685:8,usability,memor,memory,8,Fix the memory management of internal histograms in TMVA::ROCCalc class; Some of the histograms cretaed internally by the TMVA ROCCalc class were deleted and others not. For example the ROC curve histogram returned by ROCCalc::GetROCCurve was deleted in the destructor of. ROCCalc. This was causing a crash when exiting. Some other histograms instead were not deleted,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4685
https://github.com/root-project/root/pull/4686:193,availability,failur,failure,193,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:187,deployability,build,build,187,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:193,deployability,fail,failure,193,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:468,deployability,fail,failing,468,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:496,interoperability,mismatch,mismatch,496,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:232,modifiability,pac,package,232,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:285,modifiability,variab,variables,285,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:193,performance,failur,failure,193,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:193,reliability,fail,failure,193,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:468,reliability,fail,failing,468,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:179,safety,avoid,avoid,179,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:462,safety,test,tests,462,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4686:462,testability,test,tests,462,"[Exp PyROOT] Search for Python once again in SearchIntalledSoftware; When PR #4279 was initially sent on Aug 25th, the search for Python was. moved to RootBuildMacros in order to avoid a build failure due ot the. search for another package and the declaration of one of the new CMake. variables. This seem not to be a problem anymore (something changed in the. meantime?), so the search for Python can be put back to the original. place. This could also fix the tests failing with cxx17 due to a mismatch. between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4686
https://github.com/root-project/root/pull/4687:228,availability,down,down,228,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:449,availability,down,down,449,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:351,deployability,configurat,configuration,351,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:351,integrability,configur,configuration,351,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:877,interoperability,prox,proxy,877,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:955,interoperability,prox,proxy,955,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:351,modifiability,configur,configuration,351,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:214,reliability,doe,does,214,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:703,reliability,doe,does,703,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:961,reliability,doe,does,961,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:351,security,configur,configuration,351,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:557,security,control,controlled,557,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4687:557,testability,control,controlled,557,"[ROOT-10469] Introduce two teardown modes for PyROOT: soft and hard; Motivation: we need to make sure that, if PyROOT is used from another process that will keep on living after the Python interpreter dies, PyROOT does not shut down the ROOT interpreter via `TROOT::EndOfProcessCleanups` when running its atexit handler. In that sense, this PR adds a configuration option to tell PyROOT if the teardown needs to be soft, i.e. we do not want to shut down the ROOT interpreter. Instead, in the soft mode, we only want (and need) to clean the objects that are controlled by PyROOT via its `TMemoryRegulator`. @Axel-Naumann @pcanal just one new thing with respect to what we discussed: in the function that does the cleanup of the objects in `TMemoryRegulator`, called `RecursiveRemoveAll` in my commit, we can only delete a C++ object found in the map if the corresponding Python proxy **owns** the C++ object. Otherwise we will have a double delete (if the proxy does not own is because the deletion will happen somewhere else, so our `RecursiveRemoveAll` can't delete too).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4687
https://github.com/root-project/root/pull/4688:50,deployability,log,logic,50,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:561,deployability,log,logic,561,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:652,deployability,log,logic,652,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:622,energy efficiency,current,currently,622,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:14,interoperability,coordinat,coordinate,14,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:128,interoperability,coordinat,coordinate,128,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:43,reliability,growth,growth,43,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:645,reliability,growth,growth,645,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:50,safety,log,logic,50,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:396,safety,test,tests,396,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:561,safety,log,logic,561,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:652,safety,log,logic,652,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:50,security,log,logic,50,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:561,security,log,logic,561,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:652,security,log,logic,652,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:50,testability,log,logic,50,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:396,testability,test,tests,396,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:408,testability,assert,assert,408,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:561,testability,log,logic,561,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4688:652,testability,log,logic,652,"Fix ROOT7 bin coordinate queries (and axis growth logic while I'm at it); Previously, ROOT7 histograms used different local bin coordinate conventions for GetBinIndex and GetBin(From|Center|To), as discussed in https://sft.its.cern.ch/jira/browse/ROOT-10445 . This PR brings order to that chaos, following the resolution proposed in https://sft.its.cern.ch/jira/browse/ROOT-10446 , and adds some tests which assert that the two binning conventions will remain in sync in the future. While I was looking through the RHistImpl code, investigating further binning logic inconsistencies, I also spotted a few mistakes in the (currently unused) axis growth logic of GetBinIndex. So I corrected those along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4688
https://github.com/root-project/root/pull/4689:126,deployability,loader,loader,126,"[cmake,cling] Hide C and C++ symbols alike:; We had symbols exposed, which in turn meant symbols were resolved by the dynamic loader,. which in turn meant another libllvm.so could interfere with those of cling. By hiding these. symbols, all symbols are self-contained and not external symbols leak into libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4689
https://github.com/root-project/root/pull/4689:258,deployability,contain,contained,258,"[cmake,cling] Hide C and C++ symbols alike:; We had symbols exposed, which in turn meant symbols were resolved by the dynamic loader,. which in turn meant another libllvm.so could interfere with those of cling. By hiding these. symbols, all symbols are self-contained and not external symbols leak into libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4689
https://github.com/root-project/root/pull/4689:126,energy efficiency,load,loader,126,"[cmake,cling] Hide C and C++ symbols alike:; We had symbols exposed, which in turn meant symbols were resolved by the dynamic loader,. which in turn meant another libllvm.so could interfere with those of cling. By hiding these. symbols, all symbols are self-contained and not external symbols leak into libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4689
https://github.com/root-project/root/pull/4689:126,performance,load,loader,126,"[cmake,cling] Hide C and C++ symbols alike:; We had symbols exposed, which in turn meant symbols were resolved by the dynamic loader,. which in turn meant another libllvm.so could interfere with those of cling. By hiding these. symbols, all symbols are self-contained and not external symbols leak into libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4689
https://github.com/root-project/root/pull/4689:60,security,expos,exposed,60,"[cmake,cling] Hide C and C++ symbols alike:; We had symbols exposed, which in turn meant symbols were resolved by the dynamic loader,. which in turn meant another libllvm.so could interfere with those of cling. By hiding these. symbols, all symbols are self-contained and not external symbols leak into libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4689
https://github.com/root-project/root/pull/4691:32,deployability,updat,update,32,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:346,performance,perform,performed,346,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:32,safety,updat,update,32,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:319,safety,valid,valid,319,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:32,security,updat,update,32,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:39,usability,minim,minimizer,39,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:131,usability,minim,minimiser,131,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:228,usability,minim,minimizer,228,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:296,usability,minim,minimizer,296,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:325,usability,minim,minimisation,325,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4691:346,usability,perform,performed,346,"Add a new function in Fitter to update minimizer options when refitting or when using Minos or Hesse; This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4691
https://github.com/root-project/root/pull/4692:11,safety,test,tests,11,[RF] Small tests and bugfixes in RooFit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4692
https://github.com/root-project/root/pull/4692:11,testability,test,tests,11,[RF] Small tests and bugfixes in RooFit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4692
https://github.com/root-project/root/pull/4693:163,availability,operat,operations,163,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:338,availability,error,error,338,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:94,deployability,version,version,94,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:133,deployability,fail,failing,133,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:114,energy efficiency,current,current,114,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:275,energy efficiency,current,current,275,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:94,integrability,version,version,94,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:302,interoperability,specif,specified,302,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:94,modifiability,version,version,94,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:240,performance,perform,performed,240,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:338,performance,error,error,338,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:524,performance,perform,performed,524,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:133,reliability,fail,failing,133,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:338,safety,error,error,338,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:240,usability,perform,performed,240,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:338,usability,error,error,338,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4693:524,usability,perform,performed,524,"[Exp PyROOT] Fixed source issue with zsh; Due to the way it works by default, sourcing a root version built with. current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the. following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with. pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4693
https://github.com/root-project/root/pull/4694:230,availability,error,error,230,"[RS] Add global config object for RooStats.; RooStats was using a global bool to switch on/off offsetting of. likelihoods. Now, this was moved into a function-local static config. struct that now also holds a flag to check if the error wall should be. presented to the minimiser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4694
https://github.com/root-project/root/pull/4694:230,performance,error,error,230,"[RS] Add global config object for RooStats.; RooStats was using a global bool to switch on/off offsetting of. likelihoods. Now, this was moved into a function-local static config. struct that now also holds a flag to check if the error wall should be. presented to the minimiser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4694
https://github.com/root-project/root/pull/4694:230,safety,error,error,230,"[RS] Add global config object for RooStats.; RooStats was using a global bool to switch on/off offsetting of. likelihoods. Now, this was moved into a function-local static config. struct that now also holds a flag to check if the error wall should be. presented to the minimiser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4694
https://github.com/root-project/root/pull/4694:230,usability,error,error,230,"[RS] Add global config object for RooStats.; RooStats was using a global bool to switch on/off offsetting of. likelihoods. Now, this was moved into a function-local static config. struct that now also holds a flag to check if the error wall should be. presented to the minimiser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4694
https://github.com/root-project/root/pull/4694:269,usability,minim,minimiser,269,"[RS] Add global config object for RooStats.; RooStats was using a global bool to switch on/off offsetting of. likelihoods. Now, this was moved into a function-local static config. struct that now also holds a flag to check if the error wall should be. presented to the minimiser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4694
https://github.com/root-project/root/pull/4695:9,interoperability,format,formatting,9,Fix code formatting for new TGraphMultiErrors class; Fix the code formatting for the two files defining the new TGraphMultiErrors class,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4695
https://github.com/root-project/root/pull/4695:66,interoperability,format,formatting,66,Fix code formatting for new TGraphMultiErrors class; Fix the code formatting for the two files defining the new TGraphMultiErrors class,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4695
https://github.com/root-project/root/pull/4696:194,deployability,patch,patch,194,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:223,deployability,fail,failues,223,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:283,deployability,Patch,Patch,283,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:207,energy efficiency,reduc,reduce,207,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:223,reliability,fail,failues,223,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:194,safety,patch,patch,194,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:218,safety,test,test,218,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:283,safety,Patch,Patch,283,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:194,security,patch,patch,194,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:283,security,Patch,Patch,283,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:218,testability,test,test,218,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4696:267,usability,support,support,267,[cxxmodules] Resolve symlinks when using FindSymbol.; OSX and homebrew in particular creates many symlinks for its libraries. We should resolve to the realpath before scanning for symbols. This patch should reduce the test failues on the experimental runtime_modules support on Mac. Patch by Alexander Penev(@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4696
https://github.com/root-project/root/pull/4697:119,usability,support,supported,119,"[RF] Fix reading trees with long branch names.; [ROOT-10413] In 2001, long branch names in TTrees were apparently not. supported. RooFit was therefore truncating them. Now, this leads to. problems, so the truncation was removed. (cherry picked from commit 0d5f523b43be0b8a579fa93b6267b849a7243129)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4697
https://github.com/root-project/root/pull/4698:16,availability,error,error,16,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:155,availability,error,error,155,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:194,modifiability,variab,variable,194,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:16,performance,error,error,16,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:155,performance,error,error,155,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:16,safety,error,error,16,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:155,safety,error,error,155,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:16,usability,error,error,16,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:155,usability,error,error,155,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4698:231,usability,support,supported,231,"Fixed a compile error corresponding to the addition of the class TGraphMultiErrors; Hello,. I'm sorry my new classed crashed root. It seems to me that the error was due to the usauge of C-style variable length arrays that are only supported under g++ and not c++. The changes I implemented should fix the bug. All the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4698
https://github.com/root-project/root/pull/4699:94,deployability,modul,module,94,"[graph] Outline virtual function:; Fixes ""missing symbol _ZN6TGraph14AllocateArraysEii on non-module builds,. as codegening the vtable required libHist already during TCling startup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4699
https://github.com/root-project/root/pull/4699:101,deployability,build,builds,101,"[graph] Outline virtual function:; Fixes ""missing symbol _ZN6TGraph14AllocateArraysEii on non-module builds,. as codegening the vtable required libHist already during TCling startup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4699
https://github.com/root-project/root/pull/4699:94,modifiability,modul,module,94,"[graph] Outline virtual function:; Fixes ""missing symbol _ZN6TGraph14AllocateArraysEii on non-module builds,. as codegening the vtable required libHist already during TCling startup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4699
https://github.com/root-project/root/pull/4699:94,safety,modul,module,94,"[graph] Outline virtual function:; Fixes ""missing symbol _ZN6TGraph14AllocateArraysEii on non-module builds,. as codegening the vtable required libHist already during TCling startup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4699
https://github.com/root-project/root/pull/4700:198,interoperability,specif,specified,198,[Exp PyROOT] Correctly source root when CMAKE_INSTALL_PYROOTDIR is customized; Changes are done to thisroot.sh in order to set the correct environment variables also when CMAKE_INSTALL_PYROOTDIR is specified.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4700
https://github.com/root-project/root/pull/4700:151,modifiability,variab,variables,151,[Exp PyROOT] Correctly source root when CMAKE_INSTALL_PYROOTDIR is customized; Changes are done to thisroot.sh in order to set the correct environment variables also when CMAKE_INSTALL_PYROOTDIR is specified.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4700
https://github.com/root-project/root/pull/4700:67,usability,custom,customized,67,[Exp PyROOT] Correctly source root when CMAKE_INSTALL_PYROOTDIR is customized; Changes are done to thisroot.sh in order to set the correct environment variables also when CMAKE_INSTALL_PYROOTDIR is specified.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4700
https://github.com/root-project/root/pull/4701:12,deployability,instal,install,12,[webgui] do install of openui5 libs; Problem described here:. https://root-forum.cern.ch/t/root-web-offline-does-not-work/37197. Works for me now.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4701
https://github.com/root-project/root/pull/4701:108,reliability,doe,does-not-work,108,[webgui] do install of openui5 libs; Problem described here:. https://root-forum.cern.ch/t/root-web-offline-does-not-work/37197. Works for me now.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4701
https://github.com/root-project/root/pull/4702:25,deployability,depend,dependencies,25,[ROOT-10472] Add missing dependencies for coreclingutilstestUnit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4702
https://github.com/root-project/root/pull/4702:42,energy efficiency,core,coreclingutilstestUnit,42,[ROOT-10472] Add missing dependencies for coreclingutilstestUnit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4702
https://github.com/root-project/root/pull/4702:25,integrability,depend,dependencies,25,[ROOT-10472] Add missing dependencies for coreclingutilstestUnit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4702
https://github.com/root-project/root/pull/4702:25,modifiability,depend,dependencies,25,[ROOT-10472] Add missing dependencies for coreclingutilstestUnit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4702
https://github.com/root-project/root/pull/4702:25,safety,depend,dependencies,25,[ROOT-10472] Add missing dependencies for coreclingutilstestUnit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4702
https://github.com/root-project/root/pull/4702:25,testability,depend,dependencies,25,[ROOT-10472] Add missing dependencies for coreclingutilstestUnit;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4702
https://github.com/root-project/root/pull/4703:4,deployability,modul,modules,4,Fix modules build with install prefix (ROOT-10452);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4703
https://github.com/root-project/root/pull/4703:12,deployability,build,build,12,Fix modules build with install prefix (ROOT-10452);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4703
https://github.com/root-project/root/pull/4703:23,deployability,instal,install,23,Fix modules build with install prefix (ROOT-10452);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4703
https://github.com/root-project/root/pull/4703:4,modifiability,modul,modules,4,Fix modules build with install prefix (ROOT-10452);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4703
https://github.com/root-project/root/pull/4703:4,safety,modul,modules,4,Fix modules build with install prefix (ROOT-10452);,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4703
https://github.com/root-project/root/pull/4704:100,availability,failur,failure,100,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:100,deployability,fail,failure,100,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:148,energy efficiency,GPU,GPU,148,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:12,integrability,Event,Event,12,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:116,interoperability,architectur,architecture,116,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:100,performance,failur,failure,100,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:148,performance,GPU,GPU,148,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:100,reliability,fail,failure,100,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:152,safety,test,tests,152,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:183,safety,test,test,183,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:152,testability,test,tests,152,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4704:183,testability,test,test,183,Remove from Event.h ThreadLocalStorage.h header file; The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4704
https://github.com/root-project/root/pull/4706:21,deployability,build,build,21,[Cling]Enable cpt to build cling using binary LLVM release;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4706
https://github.com/root-project/root/pull/4706:51,deployability,releas,release,51,[Cling]Enable cpt to build cling using binary LLVM release;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4706
https://github.com/root-project/root/pull/4707:12,integrability,buffer,buffered,12,"Fix all the buffered RHist Flush impls; This resolves [ROOT-10407](https://sft.its.cern.ch/jira/browse/ROOT-10407). I'm not particularly keen on using friends though, so suggestions of alternate approaches are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4707
https://github.com/root-project/root/pull/4708:24,safety,unsaf,unsafe,24,"Remove dangerous thread-unsafe accessors of RHistConcurrentFiller; As discussed in [ROOT-10409](https://sft.its.cern.ch/jira/browse/ROOT-10409), these accessors are very dangerous and aren't backed by a clear use case right now. Therefore, @Axel-Naumann and I think it's best to just remove them for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4708
https://github.com/root-project/root/pull/4708:31,security,access,accessors,31,"Remove dangerous thread-unsafe accessors of RHistConcurrentFiller; As discussed in [ROOT-10409](https://sft.its.cern.ch/jira/browse/ROOT-10409), these accessors are very dangerous and aren't backed by a clear use case right now. Therefore, @Axel-Naumann and I think it's best to just remove them for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4708
https://github.com/root-project/root/pull/4708:151,security,access,accessors,151,"Remove dangerous thread-unsafe accessors of RHistConcurrentFiller; As discussed in [ROOT-10409](https://sft.its.cern.ch/jira/browse/ROOT-10409), these accessors are very dangerous and aren't backed by a clear use case right now. Therefore, @Axel-Naumann and I think it's best to just remove them for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4708
https://github.com/root-project/root/pull/4708:203,usability,clear,clear,203,"Remove dangerous thread-unsafe accessors of RHistConcurrentFiller; As discussed in [ROOT-10409](https://sft.its.cern.ch/jira/browse/ROOT-10409), these accessors are very dangerous and aren't backed by a clear use case right now. Therefore, @Axel-Naumann and I think it's best to just remove them for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4708
https://github.com/root-project/root/pull/4709:100,availability,avail,available,100,Changed my E-Mail Address in the Credits; I would prefer not to have my private mail address online available to everyone. Please change it to my office mail address.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4709
https://github.com/root-project/root/pull/4709:100,reliability,availab,available,100,Changed my E-Mail Address in the Credits; I would prefer not to have my private mail address online available to everyone. Please change it to my office mail address.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4709
https://github.com/root-project/root/pull/4709:100,safety,avail,available,100,Changed my E-Mail Address in the Credits; I would prefer not to have my private mail address online available to everyone. Please change it to my office mail address.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4709
https://github.com/root-project/root/pull/4709:100,security,availab,available,100,Changed my E-Mail Address in the Credits; I would prefer not to have my private mail address online available to everyone. Please change it to my office mail address.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4709
https://github.com/root-project/root/pull/4709:50,usability,prefer,prefer,50,Changed my E-Mail Address in the Credits; I would prefer not to have my private mail address online available to everyone. Please change it to my office mail address.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4709
https://github.com/root-project/root/pull/4710:133,deployability,instal,install,133,"[cling] Expose ROOTLIBDIR to cling::DynamicLibraryManager:; DynamicLibraryManager only looks at LD_LIBRARY_PATH and friends, but for install / prefix. builds that might not point to the ROOT library dir. Make it explicit that the. DynamicLibraryManager is supposed to look at the directory containing ROOT libraries. Fixes install-with-prefix builds with RPATH, that now do not need a fake LD_LIBRARY_PATH. anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4710
https://github.com/root-project/root/pull/4710:151,deployability,build,builds,151,"[cling] Expose ROOTLIBDIR to cling::DynamicLibraryManager:; DynamicLibraryManager only looks at LD_LIBRARY_PATH and friends, but for install / prefix. builds that might not point to the ROOT library dir. Make it explicit that the. DynamicLibraryManager is supposed to look at the directory containing ROOT libraries. Fixes install-with-prefix builds with RPATH, that now do not need a fake LD_LIBRARY_PATH. anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4710
https://github.com/root-project/root/pull/4710:290,deployability,contain,containing,290,"[cling] Expose ROOTLIBDIR to cling::DynamicLibraryManager:; DynamicLibraryManager only looks at LD_LIBRARY_PATH and friends, but for install / prefix. builds that might not point to the ROOT library dir. Make it explicit that the. DynamicLibraryManager is supposed to look at the directory containing ROOT libraries. Fixes install-with-prefix builds with RPATH, that now do not need a fake LD_LIBRARY_PATH. anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4710
https://github.com/root-project/root/pull/4710:323,deployability,instal,install-with-prefix,323,"[cling] Expose ROOTLIBDIR to cling::DynamicLibraryManager:; DynamicLibraryManager only looks at LD_LIBRARY_PATH and friends, but for install / prefix. builds that might not point to the ROOT library dir. Make it explicit that the. DynamicLibraryManager is supposed to look at the directory containing ROOT libraries. Fixes install-with-prefix builds with RPATH, that now do not need a fake LD_LIBRARY_PATH. anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4710
https://github.com/root-project/root/pull/4710:343,deployability,build,builds,343,"[cling] Expose ROOTLIBDIR to cling::DynamicLibraryManager:; DynamicLibraryManager only looks at LD_LIBRARY_PATH and friends, but for install / prefix. builds that might not point to the ROOT library dir. Make it explicit that the. DynamicLibraryManager is supposed to look at the directory containing ROOT libraries. Fixes install-with-prefix builds with RPATH, that now do not need a fake LD_LIBRARY_PATH. anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4710
https://github.com/root-project/root/pull/4710:8,security,Expos,Expose,8,"[cling] Expose ROOTLIBDIR to cling::DynamicLibraryManager:; DynamicLibraryManager only looks at LD_LIBRARY_PATH and friends, but for install / prefix. builds that might not point to the ROOT library dir. Make it explicit that the. DynamicLibraryManager is supposed to look at the directory containing ROOT libraries. Fixes install-with-prefix builds with RPATH, that now do not need a fake LD_LIBRARY_PATH. anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4710
https://github.com/root-project/root/pull/4711:16,usability,Minim,MinimizerOptions,16,Fix handling of MinimizerOptions in ROOT::Fit Fitting classes; New fix for the minimizer options. Set correctly the name when using the default algorithm (Migrad) in Minuit. Fix when running Hesse to not re-initialize fully the minimizer which will start with different step sizes. The re-initialization was caused by a bug in handling the full name. Fix this by adding a new function : FitConfig::MinimizerName(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4711
https://github.com/root-project/root/pull/4711:79,usability,minim,minimizer,79,Fix handling of MinimizerOptions in ROOT::Fit Fitting classes; New fix for the minimizer options. Set correctly the name when using the default algorithm (Migrad) in Minuit. Fix when running Hesse to not re-initialize fully the minimizer which will start with different step sizes. The re-initialization was caused by a bug in handling the full name. Fix this by adding a new function : FitConfig::MinimizerName(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4711
https://github.com/root-project/root/pull/4711:228,usability,minim,minimizer,228,Fix handling of MinimizerOptions in ROOT::Fit Fitting classes; New fix for the minimizer options. Set correctly the name when using the default algorithm (Migrad) in Minuit. Fix when running Hesse to not re-initialize fully the minimizer which will start with different step sizes. The re-initialization was caused by a bug in handling the full name. Fix this by adding a new function : FitConfig::MinimizerName(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4711
https://github.com/root-project/root/pull/4711:398,usability,Minim,MinimizerName,398,Fix handling of MinimizerOptions in ROOT::Fit Fitting classes; New fix for the minimizer options. Set correctly the name when using the default algorithm (Migrad) in Minuit. Fix when running Hesse to not re-initialize fully the minimizer which will start with different step sizes. The re-initialization was caused by a bug in handling the full name. Fix this by adding a new function : FitConfig::MinimizerName(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4711
https://github.com/root-project/root/pull/4712:47,deployability,log,logic,47,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4712:1,energy efficiency,core,core,1,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4712:28,performance,memor,memory,28,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4712:19,safety,compl,complete,19,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4712:47,safety,log,logic,47,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4712:19,security,compl,complete,19,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4712:47,security,log,logic,47,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4712:47,testability,log,logic,47,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4712:28,usability,memor,memory,28,[core] Improve the complete memory termination logic; After landing #4675 we now can start working on removing the `#ifdef R__COMPLETE_MEM_TERMINATION` workarounds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4712
https://github.com/root-project/root/pull/4713:35,deployability,build,build,35,[Cling] Enable tarball-tag flag to build cling using LLVM binary release.; Fixes Cling's nightly releases sync test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4713
https://github.com/root-project/root/pull/4713:65,deployability,releas,release,65,[Cling] Enable tarball-tag flag to build cling using LLVM binary release.; Fixes Cling's nightly releases sync test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4713
https://github.com/root-project/root/pull/4713:97,deployability,releas,releases,97,[Cling] Enable tarball-tag flag to build cling using LLVM binary release.; Fixes Cling's nightly releases sync test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4713
https://github.com/root-project/root/pull/4713:111,safety,test,test,111,[Cling] Enable tarball-tag flag to build cling using LLVM binary release.; Fixes Cling's nightly releases sync test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4713
https://github.com/root-project/root/pull/4713:111,testability,test,test,111,[Cling] Enable tarball-tag flag to build cling using LLVM binary release.; Fixes Cling's nightly releases sync test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4713
https://github.com/root-project/root/pull/4714:21,deployability,modul,module-file-info,21,"[cxxmodules] Enable -module-file-info to debug issues with modules; cc @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4714
https://github.com/root-project/root/pull/4714:59,deployability,modul,modules,59,"[cxxmodules] Enable -module-file-info to debug issues with modules; cc @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4714
https://github.com/root-project/root/pull/4714:21,modifiability,modul,module-file-info,21,"[cxxmodules] Enable -module-file-info to debug issues with modules; cc @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4714
https://github.com/root-project/root/pull/4714:59,modifiability,modul,modules,59,"[cxxmodules] Enable -module-file-info to debug issues with modules; cc @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4714
https://github.com/root-project/root/pull/4714:21,safety,modul,module-file-info,21,"[cxxmodules] Enable -module-file-info to debug issues with modules; cc @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4714
https://github.com/root-project/root/pull/4714:59,safety,modul,modules,59,"[cxxmodules] Enable -module-file-info to debug issues with modules; cc @davidlange6, @smuzaffar, @oshadura",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4714
https://github.com/root-project/root/pull/4715:17,usability,help,help,17,Fix FIXME: Print help info; @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4715
https://github.com/root-project/root/pull/4717:42,deployability,patch,patch,42,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:453,deployability,contain,contain,453,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:802,deployability,build,builds,802,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1266,deployability,build,build,1266,"efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1291,deployability,contain,contains,1291,"f. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1575,deployability,Patch,Patch,1575,"ive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1676,deployability,Modul,Module-time,1676,"is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1688,deployability,Modul,Module-PR-time,1688,"plementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2322,deployability,Modul,Module-time,2322,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2334,deployability,Modul,Module-PR-time,2334,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2985,deployability,modul,modules,2985,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3039,deployability,build,builds,3039,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:505,energy efficiency,optim,optimization,505,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:834,energy efficiency,measur,measured,834,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1180,energy efficiency,reduc,reduce,1180,"ger. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1214,energy efficiency,current,currently,1214,":. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roott",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1247,energy efficiency,optim,optimization,1247,"ements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1462,energy efficiency,optim,optimization,1462,"e levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1486,energy efficiency,optim,optimize,1486,"* Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3056,energy efficiency,optim,optimization,3056,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:498,integrability,filter,filter,498,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:720,integrability,filter,filter,720,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:774,integrability,filter,filter,774,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:869,integrability,filter,filter,869,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:930,integrability,filter,filter,930,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:962,integrability,filter,filter,962,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1035,integrability,filter,filter,1035,"his patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1520,integrability,filter,filter,1520," uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3213,integrability,sub,subsequent,3213,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:315,interoperability,share,shared,315,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1653,interoperability,platform,platform,1653,"ash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math|",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2299,interoperability,platform,platform,2299,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1676,modifiability,Modul,Module-time,1676,"is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1688,modifiability,Modul,Module-PR-time,1688,"plementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2322,modifiability,Modul,Module-time,2322,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2334,modifiability,Modul,Module-PR-time,2334,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2953,modifiability,reu,reuse,2953,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2985,modifiability,modul,modules,2985,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:262,performance,memor,memory,262,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:358,performance,time,time,358,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:505,performance,optimiz,optimization,505,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:843,performance,perform,performance,843,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:905,performance,memor,memory,905,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:987,performance,perform,performance,987,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1247,performance,optimiz,optimization,1247,"ements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1462,performance,optimiz,optimization,1462,"e levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1486,performance,optimiz,optimize,1486,"* Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1627,performance,Perform,Performance,1627,"ation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1671,performance,time,time,1671,"LF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1683,performance,time,time,1683,"the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1698,performance,time,time,1698,"ntation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2317,performance,time,time,2317,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2329,performance,time,time,2329,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2344,performance,time,time,2344,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2886,performance,memor,memory,2886,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2964,performance,memor,memory,2964,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3030,performance,disk,disk,3030,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3049,performance,memor,memory,3049,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3056,performance,optimiz,optimization,3056,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3099,performance,disk,disk,3099,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3120,performance,bottleneck,bottleneck,3120,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:42,safety,patch,patch,42,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1352,safety,avoid,avoid,1352,"nt time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1575,safety,Patch,Patch,1575,"ive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1662,safety,test,test,1662,"tion in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1676,safety,Modul,Module-time,1676,"is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1688,safety,Modul,Module-PR-time,1688,"plementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2308,safety,test,test,2308,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2322,safety,Modul,Module-time,2322,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2334,safety,Modul,Module-PR-time,2334,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2985,safety,modul,modules,2985,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:42,security,patch,patch,42,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:656,security,hash,hash,656,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:957,security,hash,hash,957,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1109,security,hash,hash,1109," into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1236,security,Hash,Hash,1236,"tion -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformul",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1274,security,hash,hash,1274,"nt representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1450,security,hash,hash,1450," contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonization",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1575,security,Patch,Patch,1575,"ive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1662,testability,test,test,1662,"tion in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2308,testability,test,test,2308,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3136,testability,verif,verified,3136,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:262,usability,memor,memory,262,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:269,usability,efficien,efficient,269,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:843,usability,perform,performance,843,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:905,usability,memor,memory,905,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:917,usability,custom,custom,917,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:987,usability,perform,performance,987,"[tcling] Improve symbol resolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| rootte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1022,usability,custom,custom,1022,"esolution.; This patch consolidates the symbol resolution facilities throughout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1096,usability,support,support,1096,"hout TCling into. a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1145,usability,custom,customizable,1145,"f the cling's DynamicLibraryManager. The new dyld is responsible for:. * Symlink resolution -- it implements a memory efficient representation of. the full path to shared objects allowing search at constant time O(1). This. also fixes issues when resolving symbols from OSX where the system libraries. contain multiple levels of symlinks. * Bloom filter optimization -- it uses a stohastic data structure which gives. a definitive answer if a symbol is not in the set. The implementation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:1627,usability,Perform,Performance,1627,"ation checks. the .gnu.hash section in ELF which is the GNU implementation of a bloom. filter and uses it. If the symbol is not in the bloom filter, the. implementation builds its own and uses it. The measured performance of the. bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on. top of the .gnu.hash filter gives 1-2% better performance. The advantage for the custom bloom filter is that it works on all. implementations which do not support .gnu.hash (windows and osx). It is also. customizable if we want to further reduce the false positive rates. (currently at p=2%). * Hash table optimization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2886,usability,memor,memory,2886,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2941,usability,efficien,efficiently,2941,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:2964,usability,memor,memory,2964,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4717:3049,usability,memor,memory,3049,"mization -- we build a hash table which contains all symbols. for a given library. This allows us to avoid the fallback symbol iteration. if multiple symbols from the same library are requested. The hash table. optimization targets to optimize the case where the bloom filter tells us. the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me! Performance Report. ===. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|. |osx 10.14| roottest-cling| 589,67|452,97|307,34|. |osx 10.14| roottest-python| 377,69|475,78|311,5|. |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|. |osx 10.14| roottest-root-math| 106,18|140,41|73,96|. |osx 10.14| roottest-root-tree| 1287,53|1861|1149,35|. |osx 10.14| roottest-root-treeformula | 568,43|907,46|531|. |osx 10.15| root-io-stdarray| - | 126.02 | 31.42|. |osx 10.15| roottest-root-treeformula| - | 327.08 | 231.14 |. The effect of running ctest -j8:. |platform|test|PCH-time|Module-time|Module-PR-time|. |:--------|:---|:---------:|:-----------:|:---------------|. |osx 10.14|roottest-python-pythonizations|14,45|18,89|13,03|. |osx 10.14| roottest-cling| 88,96|118,94|100,1|. |osx 10.14| roottest-python| 107,57|60,93|100,88|. |osx 10.14| roottest-root-hist| 10,25|23,25|11,77|. |osx 10.14| roottest-root-math| 8,33|21,23|9,27|. |osx 10.14| roottest-root-tree| 555|840,89|510,97|. |osx 10.14| roottest-root-treeformula | 235,44|402,82|228,91|. We think in `-j8` we lose the advantage of the new PR because the PCH had the rootmaps read in memory and restarting the processes allowed the kernel efficiently reuse that memory. Whereas, the modules and this PR scans the libraries from disk and builds in-memory optimization data structures. Reading from disk seems to be the bottleneck (not verified) but if that's an issue in future we can write out the index making subsequent runs at *almost* zero cost.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4717
https://github.com/root-project/root/pull/4718:414,availability,error,error,414,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1112,availability,error,error,1112,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:362,deployability,fail,fails-with-boolean-branches,362,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:662,deployability,modul,module,662,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1235,deployability,version,version,1235,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:44,energy efficiency,current,current,44,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1364,energy efficiency,current,current,1364,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:938,integrability,wrap,wrapping,938,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1235,integrability,version,version,1235,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:662,modifiability,modul,module,662,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1235,modifiability,version,version,1235,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:414,performance,error,error,414,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1112,performance,error,error,1112,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:362,reliability,fail,fails-with-boolean-branches,362,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:966,reliability,doe,does,966,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:126,safety,test,test,126,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:197,safety,test,test,197,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:414,safety,error,error,414,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:635,safety,input,input-,635,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:662,safety,modul,module,662,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1112,safety,error,error,1112,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1285,safety,test,test,1285,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:126,testability,test,test,126,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:197,testability,test,test,197,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:591,testability,Trace,Traceback,591,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1285,testability,test,test,1285,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:414,usability,error,error,414,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:635,usability,input,input-,635,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4718:1112,usability,error,error,1112,"[ROOT-10491] Fix vector<bool> iteration for current PyROOT; Jira: https://sft.its.cern.ch/jira/browse/ROOT-10491. We miss the test for reading boolean branches with `RDataFrame.AsNumpy`! Added the test and start investigating when it breaks - such as reported in the Jira ticket. Following the discussion on the forum [here](https://root-forum.cern.ch/t/asnumpy-fails-with-boolean-branches/37282), we see that the error shows a missing `data` member for the `std::vector<bool>`:. ```. df.AsNumpy(). ---------------------------------------------------------------------------. AttributeError Traceback (most recent call last). <ipython-input-10-e856f5516a02> in <module>(). ----> 1 df.AsNumpy(). /Applications/root_build/lib/ROOT.pyc in _RDataFrameAsNumpy(df, columns, exclude). 429 else:. 430 tmp = numpy.empty(len(cpp_reference), dtype=numpy.object). --> 431 for i, x in enumerate(cpp_reference):. 432 tmp[i] = x # This creates only the wrapping of the objects and does not copy. 433 py_arrays[column] = ndarray(tmp, result_ptrs[column]). AttributeError: 'vector<bool>' object has no attribute 'data'. ```. The error seems to be triggered when iterating over `std::vector<bool>` in python. My guess is some weirdness in the given std version of macOS 10.15. @etejedor We should add a test for this at the right place not only for `AsNumpy`. Edit: Added a fix for current PyROOT by protecting the tp_iter field for `vector<bool>`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4718
https://github.com/root-project/root/pull/4719:4,deployability,fail,failing,4,Fix failing clang-tidy-analyzer travis instance; Added missing headers for CI. Suppressed clang-tidy warnings thrown on line - https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4849. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4719
https://github.com/root-project/root/pull/4719:176,energy efficiency,core,core,176,Fix failing clang-tidy-analyzer travis instance; Added missing headers for CI. Suppressed clang-tidy warnings thrown on line - https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4849. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4719
https://github.com/root-project/root/pull/4719:4,reliability,fail,failing,4,Fix failing clang-tidy-analyzer travis instance; Added missing headers for CI. Suppressed clang-tidy warnings thrown on line - https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4849. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4719
https://github.com/root-project/root/pull/4720:163,performance,time,time,163,Fixed bug in doxygen macro related to TGraphMultiErrors; Fixed a bug in the doxygen macro to generate TGraphMultiErrors example plot. I overlooked this macro last time I changed TGraphMultiErrors. Sorry for this,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4720
https://github.com/root-project/root/pull/4721:1449,availability,consist,consist,1449,"under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line jo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:79,deployability,patch,patch,79,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:495,deployability,instal,installation,495,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:2653,deployability,depend,depending,2653,"marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking different depending on whether they were drawn by a class based on TVirtualPadPainter or based on TVirtualPS. Furthermore the behaviour for marker styles 9-19 were different between the implementations. (You can see the differences when you compare the canvas created by `TMarker::DisplayMarkerTypes()` with the marker style example picture in the class reference of TAttMarker.). I thought that the marker style definition used by classes based on TVirtualPadPainter seems better than the one by classes based on TVirtualPS. However, if you think that the definition of classes based on TVirtualPS is more correct, I can change this quickly but would then propose to also change definition in the TVirtualPadPainter classes since the markers should look the same everywhere. If you have any further recommendations please let me know. Thanks and all the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:158,energy efficiency,draw,drawn,158,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:586,energy efficiency,draw,drawing,586,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:1502,energy efficiency,current,currently,1502," under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:1641,energy efficiency,draw,draw,1641,"mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:2203,energy efficiency,draw,drawing,2203,"tMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking different depending on whether they were drawn by a class based on TVirtualPadPainter or based on TVirtualPS. Furthermore the behaviour for marker styles 9-19 were different between the implementations. (You can see the differences when you compare the canvas created by `TMarker::DisplayMarkerTypes()` with the marker style example picture in the class reference of TAttMarker.). I thought that the marker style definition used by classes based on TVirtualPadPainter seems better than the one by classes based on TVirtualPS. However, if you think that the definit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:2684,energy efficiency,draw,drawn,2684,"marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking different depending on whether they were drawn by a class based on TVirtualPadPainter or based on TVirtualPS. Furthermore the behaviour for marker styles 9-19 were different between the implementations. (You can see the differences when you compare the canvas created by `TMarker::DisplayMarkerTypes()` with the marker style example picture in the class reference of TAttMarker.). I thought that the marker style definition used by classes based on TVirtualPadPainter seems better than the one by classes based on TVirtualPS. However, if you think that the definition of classes based on TVirtualPS is more correct, I can change this quickly but would then propose to also change definition in the TVirtualPadPainter classes since the markers should look the same everywhere. If you have any further recommendations please let me know. Thanks and all the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:2653,integrability,depend,depending,2653,"marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking different depending on whether they were drawn by a class based on TVirtualPadPainter or based on TVirtualPS. Furthermore the behaviour for marker styles 9-19 were different between the implementations. (You can see the differences when you compare the canvas created by `TMarker::DisplayMarkerTypes()` with the marker style example picture in the class reference of TAttMarker.). I thought that the marker style definition used by classes based on TVirtualPadPainter seems better than the one by classes based on TVirtualPS. However, if you think that the definition of classes based on TVirtualPS is more correct, I can change this quickly but would then propose to also change definition in the TVirtualPadPainter classes since the markers should look the same everywhere. If you have any further recommendations please let me know. Thanks and all the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:25,interoperability,specif,specify,25,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:109,interoperability,specif,specify,109,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:1093,modifiability,paramet,parameter,1093,"ibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:2653,modifiability,depend,depending,2653,"marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking different depending on whether they were drawn by a class based on TVirtualPadPainter or based on TVirtualPS. Furthermore the behaviour for marker styles 9-19 were different between the implementations. (You can see the differences when you compare the canvas created by `TMarker::DisplayMarkerTypes()` with the marker style example picture in the class reference of TAttMarker.). I thought that the marker style definition used by classes based on TVirtualPadPainter seems better than the one by classes based on TVirtualPS. However, if you think that the definition of classes based on TVirtualPS is more correct, I can change this quickly but would then propose to also change definition in the TVirtualPadPainter classes since the markers should look the same everywhere. If you have any further recommendations please let me know. Thanks and all the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:79,safety,patch,patch,79,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:434,safety,test,tested,434,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:656,safety,test,test,656,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:2653,safety,depend,depending,2653,"marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking different depending on whether they were drawn by a class based on TVirtualPadPainter or based on TVirtualPS. Furthermore the behaviour for marker styles 9-19 were different between the implementations. (You can see the differences when you compare the canvas created by `TMarker::DisplayMarkerTypes()` with the marker style example picture in the class reference of TAttMarker.). I thought that the marker style definition used by classes based on TVirtualPadPainter seems better than the one by classes based on TVirtualPS. However, if you think that the definition of classes based on TVirtualPS is more correct, I can change this quickly but would then propose to also change definition in the TVirtualPadPainter classes since the markers should look the same everywhere. If you have any further recommendations please let me know. Thanks and all the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:79,security,patch,patch,79,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:434,testability,test,tested,434,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:656,testability,test,test,656,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:2653,testability,depend,depending,2653,"marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking different depending on whether they were drawn by a class based on TVirtualPadPainter or based on TVirtualPS. Furthermore the behaviour for marker styles 9-19 were different between the implementations. (You can see the differences when you compare the canvas created by `TMarker::DisplayMarkerTypes()` with the marker style example picture in the class reference of TAttMarker.). I thought that the marker style definition used by classes based on TVirtualPadPainter seems better than the one by classes based on TVirtualPS. However, if you think that the definition of classes based on TVirtualPS is more correct, I can change this quickly but would then propose to also change definition in the TVirtualPadPainter classes since the markers should look the same everywhere. If you have any further recommendations please let me know. Thanks and all the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:944,usability,user,user-images,944,"Added the possibility to specify a line width for marker symbols; Hello,. this patch adds the possibility to specify a line width to be used when markers are drawn. Recently I stumbled upon this and searched for an already existing solution, but I could only find other people looking for something like this, so I decided to implement it. Before I start to describe the changes, let me mention the most important point first: I only tested the feature under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:1449,usability,consist,consist,1449,"under Linux, since I have neigther a ROOT installation under Windows nor a Mac. Since the feature also changes files associated with drawing under Windows and MacOS, I consider it absolutly mandatory to test the feature under those systems before merging this pull request. Now back to the actual feature. Since an image says more than 1000 words here an image of the outcome using the implemented feature which is also part of the feature description in the class TAttMarker:. ![c](https://user-images.githubusercontent.com/5320187/71742710-ee6cc580-2e62-11ea-900d-ba546e27f474.png). **The attribute fMarkerLineWidth**. The storing of the parameter is done by the attribute fMarkerLineWidth of the TAttMarker class. I checked all daughter classes of TAttMarker for the need of changes due to this addition. Furthermore, I added a line width dropdown field to the TAttMarkerEditor which works the same way as in the TAttLineEditor. Obviosly the line width only makes sense for marker styles that consist of lines and not areas. To check whether the currently set marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line jo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4721:2769,usability,behavi,behaviour,2769,"marker style is influenced by the marker line width I added the function HasMarkerLineWidth to TAttMarker. **Marker size and draw method**. Since the calculation of the size of the marker assumed ultimatly thin lines up to now, the bounding box of the marker would have increased when setting a larger marker line width. To counter that, I decreased the marker size by the amount it would have increased due to the line width. However, note that this only works with round line caps and round line joins, since for example with miter joins the bounding box becomes infinitly large for infinitly small angles. This is also the reason why I decided to used round caps and round joins when drawing the marker lines in a TPad. However for the vector graphic export classes the line join method is set by gStyle->GetJoinLinePS(). Since there was no corresponding implementation for the line cap, I added it to TStyle. Furthermore, the line join method setting was ignored by the SVG export until now, so I decided to add it there as well. **Further changes**. Another thing I noted is that the markers 3 and 5 (and 31) were looking different depending on whether they were drawn by a class based on TVirtualPadPainter or based on TVirtualPS. Furthermore the behaviour for marker styles 9-19 were different between the implementations. (You can see the differences when you compare the canvas created by `TMarker::DisplayMarkerTypes()` with the marker style example picture in the class reference of TAttMarker.). I thought that the marker style definition used by classes based on TVirtualPadPainter seems better than the one by classes based on TVirtualPS. However, if you think that the definition of classes based on TVirtualPS is more correct, I can change this quickly but would then propose to also change definition in the TVirtualPadPainter classes since the markers should look the same everywhere. If you have any further recommendations please let me know. Thanks and all the best,. Simon Spies",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4721
https://github.com/root-project/root/pull/4722:181,availability,operat,operators,181,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:228,availability,avail,available,228,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:1,energy efficiency,core,core,1,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:64,energy efficiency,alloc,allocator,64,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:329,integrability,discover,discovered,329,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:611,integrability,protocol,protocol,611,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:329,interoperability,discover,discovered,329,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:611,interoperability,protocol,protocol,611,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:57,performance,memor,memory,57,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:120,performance,memor,memory,120,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:372,performance,time,time,372,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:228,reliability,availab,available,228,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:228,safety,avail,available,228,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:228,security,availab,available,228,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:50,usability,custom,custom,50,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:57,usability,memor,memory,57,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:120,usability,memor,memory,120,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4722:329,usability,discov,discovered,329,[core] Make libNew a static library.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure. It essentially overrides the new and delete operators. The functionality of libNew is only available in *rootn.exe* and libNew is statically linked to the binary. In root-project/root#4717 we discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to *sometimes* resolve new and delete to the symbols from libNew and libc++. Since libNew was not designed to be dlopened we should make it a static library to enforce this protocol more strongly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4722
https://github.com/root-project/root/pull/4723:222,usability,user,user,222,Fix re-definition of PyArrayObject (ROOT-10495); As reported in ROOT-10495 a forward declaration of PyArrayObject in PyMethodBase.h will create a problem if the header file numpy/arrayobject.h is included afterwards in an user code. The solution is to not forward declare PyArrayObject but add its full definition by including the numpy header file in PyMethodBase.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4723
https://github.com/root-project/root/pull/4725:232,deployability,version,versions,232,"[http] Fix files reading on Windows; One has to use binary mode to be able read file content,. otherwise Windows may change lines ending and . result will not fit into the preallocated string. Has to be applied to all previous ROOT versions. Without that commit THttpServer does not work for me (Windows10/MSVC 2019).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4725
https://github.com/root-project/root/pull/4725:232,integrability,version,versions,232,"[http] Fix files reading on Windows; One has to use binary mode to be able read file content,. otherwise Windows may change lines ending and . result will not fit into the preallocated string. Has to be applied to all previous ROOT versions. Without that commit THttpServer does not work for me (Windows10/MSVC 2019).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4725
https://github.com/root-project/root/pull/4725:232,modifiability,version,versions,232,"[http] Fix files reading on Windows; One has to use binary mode to be able read file content,. otherwise Windows may change lines ending and . result will not fit into the preallocated string. Has to be applied to all previous ROOT versions. Without that commit THttpServer does not work for me (Windows10/MSVC 2019).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4725
https://github.com/root-project/root/pull/4725:85,performance,content,content,85,"[http] Fix files reading on Windows; One has to use binary mode to be able read file content,. otherwise Windows may change lines ending and . result will not fit into the preallocated string. Has to be applied to all previous ROOT versions. Without that commit THttpServer does not work for me (Windows10/MSVC 2019).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4725
https://github.com/root-project/root/pull/4725:274,reliability,doe,does,274,"[http] Fix files reading on Windows; One has to use binary mode to be able read file content,. otherwise Windows may change lines ending and . result will not fit into the preallocated string. Has to be applied to all previous ROOT versions. Without that commit THttpServer does not work for me (Windows10/MSVC 2019).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4725
https://github.com/root-project/root/pull/4727:91,availability,avail,available,91,"[PyROOT exp] Remove -Wno-unused-but-set-parameter flag for clang; The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4727
https://github.com/root-project/root/pull/4727:40,modifiability,paramet,parameter,40,"[PyROOT exp] Remove -Wno-unused-but-set-parameter flag for clang; The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4727
https://github.com/root-project/root/pull/4727:91,reliability,availab,available,91,"[PyROOT exp] Remove -Wno-unused-but-set-parameter flag for clang; The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4727
https://github.com/root-project/root/pull/4727:91,safety,avail,available,91,"[PyROOT exp] Remove -Wno-unused-but-set-parameter flag for clang; The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4727
https://github.com/root-project/root/pull/4727:111,safety,test,tested,111,"[PyROOT exp] Remove -Wno-unused-but-set-parameter flag for clang; The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4727
https://github.com/root-project/root/pull/4727:91,security,availab,available,91,"[PyROOT exp] Remove -Wno-unused-but-set-parameter flag for clang; The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4727
https://github.com/root-project/root/pull/4727:111,testability,test,tested,111,"[PyROOT exp] Remove -Wno-unused-but-set-parameter flag for clang; The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4727
https://github.com/root-project/root/pull/4731:98,integrability,protocol,protocol,98,"[ROOT-10491][PyROOT] Don't set tp_iter for vector<bool>; tp_iter is used to implement an iterator protocol for Python using the. ""data"" member function of std::vector. However, the specialization. `vector<bool>` is not required to have this member function, which. breaks the iterator. Removing the tp_iter field does not break iterating. vector<bool> in Python, it falls back to the old iterator mechanism via. the get/setitem special functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4731
https://github.com/root-project/root/pull/4731:98,interoperability,protocol,protocol,98,"[ROOT-10491][PyROOT] Don't set tp_iter for vector<bool>; tp_iter is used to implement an iterator protocol for Python using the. ""data"" member function of std::vector. However, the specialization. `vector<bool>` is not required to have this member function, which. breaks the iterator. Removing the tp_iter field does not break iterating. vector<bool> in Python, it falls back to the old iterator mechanism via. the get/setitem special functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4731
https://github.com/root-project/root/pull/4731:313,reliability,doe,does,313,"[ROOT-10491][PyROOT] Don't set tp_iter for vector<bool>; tp_iter is used to implement an iterator protocol for Python using the. ""data"" member function of std::vector. However, the specialization. `vector<bool>` is not required to have this member function, which. breaks the iterator. Removing the tp_iter field does not break iterating. vector<bool> in Python, it falls back to the old iterator mechanism via. the get/setitem special functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4731
https://github.com/root-project/root/pull/4732:143,interoperability,standard,standard,143,Fix TH1::GetStdDev with negative weights (ROOT-8412); When the variance is negative (this can happen when having negative weights) return 0 as standard deviation instead of making the sqrt of the abs of the variance. . This fixes ROOT-8412,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4732
https://github.com/root-project/root/pull/4733:276,usability,user,users,276,"[PyROOT] Warn when instantiating with parenthesis, add a case when using brackets; This PR introduces two changes to old PyROOT:. 1. Issue a deprecation warning when instantiating a template with the parenthesis syntax. This was suggested in the ROOT retreat in December, for users to be fully aware that the parenthesis syntax is going to disappear in favour of the square brackets one. 2. Add a missing case when instantiating templates with square brackets. It corresponds to the case when the template has not been previously instantiated with the type/s we want.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4733
https://github.com/root-project/root/pull/4734:83,deployability,Depend,Depending,83,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4734:83,integrability,Depend,Depending,83,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4734:83,modifiability,Depend,Depending,83,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4734:112,modifiability,extens,extension,112,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4734:83,safety,Depend,Depending,83,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4734:83,testability,Depend,Depending,83,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4734:45,usability,dialog,dialog,45,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4734:68,usability,support,support,68,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4734:172,usability,support,support,172,"[rbrowser] provide FileType selector in file dialog, better Windows support [WIP]; Depending from selected file extension, show only appropriate files. Preliminary windows support in RFileDialog",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4734
https://github.com/root-project/root/pull/4735:128,integrability,messag,message,128,"Fix ""Deprecation of -r flag from rootcling"" ; This fixes the deprecation taken root-project/root#4716. We print the deprecation message but we still do what's intended. cc: @reikdas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4735
https://github.com/root-project/root/pull/4735:128,interoperability,messag,message,128,"Fix ""Deprecation of -r flag from rootcling"" ; This fixes the deprecation taken root-project/root#4716. We print the deprecation message but we still do what's intended. cc: @reikdas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4735
https://github.com/root-project/root/pull/4736:1,energy efficiency,core,core,1,"[core] Do not complain about llvm symbols in process before loading libCling:; Since 08e767cb06, no llvm symbols are exported, and thus. none are subject to relocation, and thus existing llvm. symbols do not affect libCling and there is not need to. complain about existing llvm symbols.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4736
https://github.com/root-project/root/pull/4736:60,energy efficiency,load,loading,60,"[core] Do not complain about llvm symbols in process before loading libCling:; Since 08e767cb06, no llvm symbols are exported, and thus. none are subject to relocation, and thus existing llvm. symbols do not affect libCling and there is not need to. complain about existing llvm symbols.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4736
https://github.com/root-project/root/pull/4736:146,integrability,sub,subject,146,"[core] Do not complain about llvm symbols in process before loading libCling:; Since 08e767cb06, no llvm symbols are exported, and thus. none are subject to relocation, and thus existing llvm. symbols do not affect libCling and there is not need to. complain about existing llvm symbols.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4736
https://github.com/root-project/root/pull/4736:60,performance,load,loading,60,"[core] Do not complain about llvm symbols in process before loading libCling:; Since 08e767cb06, no llvm symbols are exported, and thus. none are subject to relocation, and thus existing llvm. symbols do not affect libCling and there is not need to. complain about existing llvm symbols.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4736
https://github.com/root-project/root/pull/4736:14,safety,compl,complain,14,"[core] Do not complain about llvm symbols in process before loading libCling:; Since 08e767cb06, no llvm symbols are exported, and thus. none are subject to relocation, and thus existing llvm. symbols do not affect libCling and there is not need to. complain about existing llvm symbols.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4736
https://github.com/root-project/root/pull/4736:250,safety,compl,complain,250,"[core] Do not complain about llvm symbols in process before loading libCling:; Since 08e767cb06, no llvm symbols are exported, and thus. none are subject to relocation, and thus existing llvm. symbols do not affect libCling and there is not need to. complain about existing llvm symbols.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4736
https://github.com/root-project/root/pull/4736:14,security,compl,complain,14,"[core] Do not complain about llvm symbols in process before loading libCling:; Since 08e767cb06, no llvm symbols are exported, and thus. none are subject to relocation, and thus existing llvm. symbols do not affect libCling and there is not need to. complain about existing llvm symbols.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4736
https://github.com/root-project/root/pull/4736:250,security,compl,complain,250,"[core] Do not complain about llvm symbols in process before loading libCling:; Since 08e767cb06, no llvm symbols are exported, and thus. none are subject to relocation, and thus existing llvm. symbols do not affect libCling and there is not need to. complain about existing llvm symbols.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4736
https://github.com/root-project/root/pull/4737:237,interoperability,standard,standard,237,"[PyROOT exp] Disable warnings -Wmissing-field-initializers for py3.8; Warnings appear due to PEP 590 adding the tp_vectorcall field to some. structs which remain uninitialized in CPyCppyy. Following the conventions upstream, because the standard ensures a. zero-initialization, it's safe the leave them uninitialized such as also. done in the Python codebase itself. See discussion here:. https://bitbucket.org/wlav/cppyy/issues/186/warnings-with-python-38-due-to-vectorcall",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4737
https://github.com/root-project/root/pull/4737:283,safety,safe,safe,283,"[PyROOT exp] Disable warnings -Wmissing-field-initializers for py3.8; Warnings appear due to PEP 590 adding the tp_vectorcall field to some. structs which remain uninitialized in CPyCppyy. Following the conventions upstream, because the standard ensures a. zero-initialization, it's safe the leave them uninitialized such as also. done in the Python codebase itself. See discussion here:. https://bitbucket.org/wlav/cppyy/issues/186/warnings-with-python-38-due-to-vectorcall",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4737
https://github.com/root-project/root/pull/4738:239,availability,operat,operators,239,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:437,deployability,Patch,Patch,437,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:1,energy efficiency,core,core,1,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:70,energy efficiency,alloc,allocator,70,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:253,integrability,discover,discovered,253,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:253,interoperability,discover,discovered,253,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:63,performance,memor,memory,63,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:126,performance,memor,memory,126,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:296,performance,time,time,296,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:437,safety,Patch,Patch,437,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:437,security,Patch,Patch,437,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:56,usability,custom,custom,56,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:63,usability,memor,memory,63,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:126,usability,memor,memory,126,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4738:253,usability,discov,discovered,253,[core] Hide libNew from symbol resolution.; libNew is a custom memory allocator used in ROOT to output more information about memory pressure and used for interprocess communication in TMapFile. It essentially overrides the new and delete operators. We discovered that dlopening libNew at random time can trigger earthquakes because it allows the dynamic linker to sometimes resolve new and delete to the symbols from libNew and libc++. Patch by Alexander Penev (@alexander-penev) and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4738
https://github.com/root-project/root/pull/4739:220,availability,error,error,220,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:49,deployability,updat,updates,49,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:143,deployability,updat,updates,143,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:226,integrability,messag,messages,226,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:226,interoperability,messag,messages,226,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:220,performance,error,error,220,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:49,safety,updat,updates,49,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:143,safety,updat,updates,143,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:158,safety,safe,safety,158,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:220,safety,error,error,220,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:49,security,updat,updates,49,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:143,security,updat,updates,143,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:197,testability,understand,understandable,197,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:35,usability,document,documentation,35,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:129,usability,document,documentation,129,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:220,usability,error,error,220,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4739:474,usability,user,users,474,"[RF] Collection of small fixes and documentation updates; Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4739
https://github.com/root-project/root/pull/4740:35,testability,Simpl,Simple,35,"grammar fix in TLegend: to -> too; Simple grammar fix correcting ""to"" to ""too"" and adjusting confusing period usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4740
https://github.com/root-project/root/pull/4740:35,usability,Simpl,Simple,35,"grammar fix in TLegend: to -> too; Simple grammar fix correcting ""to"" to ""too"" and adjusting confusing period usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4740
https://github.com/root-project/root/pull/4741:12,performance,I/O,I/O,12,"[RF] Enable I/O for RooNDKeysPdf; [ROOT-10341] To enable serialisation, several members of RooNDKeysPdf. had to be removed or their type had to be changed. A few members. cannot be serialised and therefore have to be recomputed when necessary. Some first cleaning up was also done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4741
https://github.com/root-project/root/pull/4742:117,availability,avail,available,117,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:46,deployability,depend,dependent,46,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:84,deployability,modul,modules,84,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:179,deployability,depend,dependencies,179,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:219,deployability,build,builds,219,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:288,deployability,depend,dependencies,288,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:406,deployability,modul,modules,406,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:515,deployability,patch,patch,515,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:527,deployability,fail,failing,527,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:279,energy efficiency,load,load,279,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:484,energy efficiency,load,loading,484,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:46,integrability,depend,dependent,46,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:179,integrability,depend,dependencies,179,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:288,integrability,depend,dependencies,288,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:494,interoperability,share,shared,494,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:46,modifiability,depend,dependent,46,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:84,modifiability,modul,modules,84,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:179,modifiability,depend,dependencies,179,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:288,modifiability,depend,dependencies,288,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:406,modifiability,modul,modules,406,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:279,performance,load,load,279,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:484,performance,load,loading,484,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:117,reliability,availab,available,117,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:527,reliability,fail,failing,527,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:46,safety,depend,dependent,46,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:84,safety,modul,modules,84,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:117,safety,avail,available,117,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:179,safety,depend,dependencies,179,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:288,safety,depend,dependencies,288,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:406,safety,modul,modules,406,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:515,safety,patch,patch,515,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:535,safety,test,tests,535,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:117,security,availab,available,117,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:515,security,patch,patch,515,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:46,testability,depend,dependent,46,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:179,testability,depend,dependencies,179,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:288,testability,depend,dependencies,288,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4742:535,testability,test,tests,535,"[cxxmodules] Teach ACLiC to work when not all dependent libs are resolved.; The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4742
https://github.com/root-project/root/pull/4744:35,integrability,filter,filters,35,"[rbrowser] better windows support, filters in FileDialog; 1. List all windows volumes like C:, Q:,... 2. Resolve windows links when appears. 3. Let configure file types in FileDialog (also when starts from client).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4744
https://github.com/root-project/root/pull/4744:148,integrability,configur,configure,148,"[rbrowser] better windows support, filters in FileDialog; 1. List all windows volumes like C:, Q:,... 2. Resolve windows links when appears. 3. Let configure file types in FileDialog (also when starts from client).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4744
https://github.com/root-project/root/pull/4744:148,modifiability,configur,configure,148,"[rbrowser] better windows support, filters in FileDialog; 1. List all windows volumes like C:, Q:,... 2. Resolve windows links when appears. 3. Let configure file types in FileDialog (also when starts from client).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4744
https://github.com/root-project/root/pull/4744:148,security,configur,configure,148,"[rbrowser] better windows support, filters in FileDialog; 1. List all windows volumes like C:, Q:,... 2. Resolve windows links when appears. 3. Let configure file types in FileDialog (also when starts from client).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4744
https://github.com/root-project/root/pull/4744:26,usability,support,support,26,"[rbrowser] better windows support, filters in FileDialog; 1. List all windows volumes like C:, Q:,... 2. Resolve windows links when appears. 3. Let configure file types in FileDialog (also when starts from client).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4744
https://github.com/root-project/root/pull/4746:33,energy efficiency,draw,drawable,33,[rbrowser] use std::multimap for drawable provider registry; While nullptr entry may appear several times,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4746
https://github.com/root-project/root/pull/4746:51,interoperability,registr,registry,51,[rbrowser] use std::multimap for drawable provider registry; While nullptr entry may appear several times,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4746
https://github.com/root-project/root/pull/4746:100,performance,time,times,100,[rbrowser] use std::multimap for drawable provider registry; While nullptr entry may appear several times,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4746
https://github.com/root-project/root/pull/4747:17,deployability,patch,patch,17,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:127,deployability,log,logic,127,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:476,deployability,updat,updates,476,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:524,deployability,patch,patch,524,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:17,safety,patch,patch,17,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:127,safety,log,logic,127,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:476,safety,updat,updates,476,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:524,safety,patch,patch,524,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:17,security,patch,patch,17,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:127,security,log,logic,127,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:476,security,updat,updates,476,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:524,security,patch,patch,524,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:533,security,modif,modify,533,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4747:127,testability,log,logic,127,"[Exp PyROOT] Add patch for TROOT::Initialize in clingwrapper; The following PR introduced some changes in the TCling shutdown. logic:. https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the. functionality it relies on (TROOT::Initialize) is not yet in the. mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,. so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to. keep this patch to modify our copy of Cppyy to invoke. TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4747
https://github.com/root-project/root/pull/4748:17,deployability,instal,installation,17,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:196,deployability,instal,installation,196,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:322,deployability,configurat,configuration,322,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:134,integrability,filter,filter,134,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:322,integrability,configur,configuration,322,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:301,interoperability,specif,specified,301,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:322,modifiability,configur,configuration,322,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:344,modifiability,variab,variable,344,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:453,modifiability,variab,variable,453,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:374,reliability,doe,doesn,374,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:322,security,configur,configuration,322,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:256,usability,command,command,256,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:413,usability,command,command,413,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4748:466,usability,custom,customized,466,"[Exp PyROOT] Fix installation bug introduced in 1d2e76; As reported in:. https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-10501?filter=allopenissues. commit 1d2e76 deletes the host's Python installation. Here two conditions are introduced to run the command:. - the flag pyroot_experimental was specified during the configuration;. - the variable CMAKE_INSTALL_PREFIX doesn't start with ""/usr"", making. the command run only if the above mentioned variable was customized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4748
https://github.com/root-project/root/pull/4749:17,deployability,build,building,17,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4750.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4749
https://github.com/root-project/root/pull/4749:181,interoperability,plug,plugin,181,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4750.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4749
https://github.com/root-project/root/pull/4749:37,safety,test,tests,37,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4750.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4749
https://github.com/root-project/root/pull/4749:37,testability,test,tests,37,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4750.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4749
https://github.com/root-project/root/pull/4749:273,usability,Close,Closes,273,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4750.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4749
https://github.com/root-project/root/pull/4749:287,usability,Close,Closes,287,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4750.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4749
https://github.com/root-project/root/pull/4750:17,deployability,build,building,17,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4749.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4750
https://github.com/root-project/root/pull/4750:181,interoperability,plug,plugin,181,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4749.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4750
https://github.com/root-project/root/pull/4750:37,safety,test,tests,37,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4749.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4750
https://github.com/root-project/root/pull/4750:37,testability,test,tests,37,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4749.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4750
https://github.com/root-project/root/pull/4750:273,usability,Close,Closes,273,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4749.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4750
https://github.com/root-project/root/pull/4750:287,usability,Close,Closes,287,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF; See [this comment](https://sft.its.cern.ch/jira/browse/ROOT-10472?focusedCommentId=106666&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106666) on JIRA for an explanation. Closes #4702. Closes #4749.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4750
https://github.com/root-project/root/pull/4751:519,availability,consist,consisting,519,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:8,deployability,Instal,Install,8,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:43,deployability,instal,install,43,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:165,deployability,instal,install,165,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:235,deployability,contain,contain,235,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:385,deployability,stack,stackoverflow,385,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:591,deployability,instal,install,591,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:609,deployability,instal,install,609,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:82,usability,behavi,behavior,82,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4751:519,usability,consist,consisting,519,"[CMake] Install pcms with file(GLOB ...) + install(FILES ...); Due to the default behavior of CMake. https://gitlab.kitware.com/cmake/cmake/issues/17122. when using install(DIRECTORY ... PATTERN), if there are some folders. that don't contain the given PATTERN they are also created as empty. folders. This was causing the problem already addressed in 1d2e76. As suggested in. https://stackoverflow.com/questions/55451084/cmake-files-matching-pattern-copies-empty-directories/55722518#55722518. we apply the workaround consisting in addressing the '*pcm' files with. file(GLOB ...) and then install them with install(FILES ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4751
https://github.com/root-project/root/pull/4752:49,availability,error,errors,49,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:203,availability,error,errors,203,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:76,deployability,build,building,76,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:106,deployability,build,build,106,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:152,deployability,fail,fails,152,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:56,energy efficiency,current,currently,56,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:760,integrability,configur,configured,760,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:885,integrability,configur,configured,885,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:760,modifiability,configur,configured,760,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:885,modifiability,configur,configured,885,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:49,performance,error,errors,49,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:203,performance,error,errors,203,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:152,reliability,fail,fails,152,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:49,safety,error,errors,49,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:203,safety,error,errors,203,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:760,security,configur,configured,760,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:885,security,configur,configured,885,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:49,usability,error,errors,49,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4752:203,usability,error,errors,203,"Fix compiling tutorials with Python 3; Fixes the errors currently seen when building for conda. After the build `pyc` files are generated and this step fails for some of the tutorials with the following errors:. ```. compiling .pyc files... File ""tutorials/pyroot/gui_ex.py"", line 20. print 'returning 0'. ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print('returning 0')? File ""tutorials/pyroot/parse_CSV_file_with_TTree_ReadStream.py"", line 92. print ""Outputting %s -> %s"" % (afile, output_ROOT_file_name). ^. SyntaxError: invalid syntax. Sorry: TabError: inconsistent use of tabs and spaces in indentation (ROOTwriter.py, line 63). File ""tutorials/histfactory/makeQuickModel.py"", line 114. print ""It seems that pyROOT isn't properly configured"". ^. SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""It seems that pyROOT isn't properly configured"")? Sorry: TabError: inconsistent use of tabs and spaces in indentation (writer.py, line 123). number of files: 6175. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4752
https://github.com/root-project/root/pull/4755:40,availability,error,errors,40,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:115,availability,error,error-bars-drawn-in-wrong-place-if-setlogx,115,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:182,availability,error,error,182,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:12,deployability,Log,Logx,12,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:234,deployability,log,log,234,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:238,deployability,scale,scale,238,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:22,energy efficiency,draw,drawing,22,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:126,energy efficiency,draw,drawn-in-wrong-place-if-setlogx,126,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:198,energy efficiency,draw,drawn,198,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:238,energy efficiency,scale,scale,238,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:238,modifiability,scal,scale,238,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:40,performance,error,errors,40,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:115,performance,error,error-bars-drawn-in-wrong-place-if-setlogx,115,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:182,performance,error,error,182,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:238,performance,scale,scale,238,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:12,safety,Log,Logx,12,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:40,safety,error,errors,40,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:115,safety,error,error-bars-drawn-in-wrong-place-if-setlogx,115,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:182,safety,error,error,182,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:234,safety,log,log,234,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:12,security,Log,Logx,12,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:234,security,log,log,234,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:12,testability,Log,Logx,12,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:234,testability,log,log,234,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:40,usability,error,errors,40,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:115,usability,error,error-bars-drawn-in-wrong-place-if-setlogx,115,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4755:182,usability,error,error,182,correct for Logx when drawing histogram errors; Fixes the issue raised in the [forum](https://root-forum.cern.ch/t/error-bars-drawn-in-wrong-place-if-setlogx/37507?u=mwilkins) where error bars were drawn in the wrong place if using a log scale in x. Resolves the [JIRA task](https://sft.its.cern.ch/jira/browse/ROOT-10505).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4755
https://github.com/root-project/root/pull/4756:96,deployability,updat,updated,96,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t..; 'wmat' values were not updated when the function is called with nlmat<0, as they. should be to mimic the Geant3 behaviour. This fix should be also propagated to the patches branch. Thank you.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4756
https://github.com/root-project/root/pull/4756:238,deployability,patch,patches,238,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t..; 'wmat' values were not updated when the function is called with nlmat<0, as they. should be to mimic the Geant3 behaviour. This fix should be also propagated to the patches branch. Thank you.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4756
https://github.com/root-project/root/pull/4756:96,safety,updat,updated,96,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t..; 'wmat' values were not updated when the function is called with nlmat<0, as they. should be to mimic the Geant3 behaviour. This fix should be also propagated to the patches branch. Thank you.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4756
https://github.com/root-project/root/pull/4756:238,safety,patch,patches,238,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t..; 'wmat' values were not updated when the function is called with nlmat<0, as they. should be to mimic the Geant3 behaviour. This fix should be also propagated to the patches branch. Thank you.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4756
https://github.com/root-project/root/pull/4756:96,security,updat,updated,96,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t..; 'wmat' values were not updated when the function is called with nlmat<0, as they. should be to mimic the Geant3 behaviour. This fix should be also propagated to the patches branch. Thank you.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4756
https://github.com/root-project/root/pull/4756:238,security,patch,patches,238,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t..; 'wmat' values were not updated when the function is called with nlmat<0, as they. should be to mimic the Geant3 behaviour. This fix should be also propagated to the patches branch. Thank you.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4756
https://github.com/root-project/root/pull/4756:185,usability,behavi,behaviour,185,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t..; 'wmat' values were not updated when the function is called with nlmat<0, as they. should be to mimic the Geant3 behaviour. This fix should be also propagated to the patches branch. Thank you.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4756
https://github.com/root-project/root/pull/4757:33,deployability,build,builds,33,Disable SetLibraryPath for RPATH builds; As discussed with @Axel-Naumann on mattermost: https://mattermost.web.cern.ch/root/pl/3en1hqnc9tbftqakg3s3jy4b4c. The conda build has been patching this out since it was first released. There was some issues when building with `runtime_cxxmodules` but those were fixed in #4710.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4757
https://github.com/root-project/root/pull/4757:165,deployability,build,build,165,Disable SetLibraryPath for RPATH builds; As discussed with @Axel-Naumann on mattermost: https://mattermost.web.cern.ch/root/pl/3en1hqnc9tbftqakg3s3jy4b4c. The conda build has been patching this out since it was first released. There was some issues when building with `runtime_cxxmodules` but those were fixed in #4710.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4757
https://github.com/root-project/root/pull/4757:180,deployability,patch,patching,180,Disable SetLibraryPath for RPATH builds; As discussed with @Axel-Naumann on mattermost: https://mattermost.web.cern.ch/root/pl/3en1hqnc9tbftqakg3s3jy4b4c. The conda build has been patching this out since it was first released. There was some issues when building with `runtime_cxxmodules` but those were fixed in #4710.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4757
https://github.com/root-project/root/pull/4757:217,deployability,releas,released,217,Disable SetLibraryPath for RPATH builds; As discussed with @Axel-Naumann on mattermost: https://mattermost.web.cern.ch/root/pl/3en1hqnc9tbftqakg3s3jy4b4c. The conda build has been patching this out since it was first released. There was some issues when building with `runtime_cxxmodules` but those were fixed in #4710.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4757
https://github.com/root-project/root/pull/4757:254,deployability,build,building,254,Disable SetLibraryPath for RPATH builds; As discussed with @Axel-Naumann on mattermost: https://mattermost.web.cern.ch/root/pl/3en1hqnc9tbftqakg3s3jy4b4c. The conda build has been patching this out since it was first released. There was some issues when building with `runtime_cxxmodules` but those were fixed in #4710.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4757
https://github.com/root-project/root/pull/4757:180,safety,patch,patching,180,Disable SetLibraryPath for RPATH builds; As discussed with @Axel-Naumann on mattermost: https://mattermost.web.cern.ch/root/pl/3en1hqnc9tbftqakg3s3jy4b4c. The conda build has been patching this out since it was first released. There was some issues when building with `runtime_cxxmodules` but those were fixed in #4710.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4757
https://github.com/root-project/root/pull/4757:180,security,patch,patching,180,Disable SetLibraryPath for RPATH builds; As discussed with @Axel-Naumann on mattermost: https://mattermost.web.cern.ch/root/pl/3en1hqnc9tbftqakg3s3jy4b4c. The conda build has been patching this out since it was first released. There was some issues when building with `runtime_cxxmodules` but those were fixed in #4710.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4757
https://github.com/root-project/root/pull/4758:94,safety,test,tests,94,[cxxmodules] Resolve weak symbols from the non-system libs.; This should fix a good number of tests on osx. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4758
https://github.com/root-project/root/pull/4758:94,testability,test,tests,94,[cxxmodules] Resolve weak symbols from the non-system libs.; This should fix a good number of tests on osx. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4758
https://github.com/root-project/root/pull/4759:221,testability,simpl,simplified,221,"[RF] Fix filled plotting of RooCurve.; [RF-8932] When a RooCurve is plotted as a filled polygon, one point has. to be added at the lower left of the plot to close the polygon. A few lines of code have been cleaned up and simplified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4759
https://github.com/root-project/root/pull/4759:157,usability,close,close,157,"[RF] Fix filled plotting of RooCurve.; [RF-8932] When a RooCurve is plotted as a filled polygon, one point has. to be added at the lower left of the plot to close the polygon. A few lines of code have been cleaned up and simplified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4759
https://github.com/root-project/root/pull/4759:221,usability,simpl,simplified,221,"[RF] Fix filled plotting of RooCurve.; [RF-8932] When a RooCurve is plotted as a filled polygon, one point has. to be added at the lower left of the plot to close the polygon. A few lines of code have been cleaned up and simplified.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4759
https://github.com/root-project/root/pull/4760:298,energy efficiency,draw,drawoption-f,298,"[RF] Fix filled plotting of RooCurve.; [RF-8932] When a RooCurve is plotted as a filled polygon, one point has. to be added at the lower left of the plot to close the polygon. A few lines of code have been cleaned up and simplified. See also here:. https://root-forum.cern.ch/t/odd-behaviour-using-drawoption-f/19104. https://root-forum.cern.ch/t/plotting-issue-with-multiple-filled-pdfs-using-addto/25746",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4760
https://github.com/root-project/root/pull/4760:221,testability,simpl,simplified,221,"[RF] Fix filled plotting of RooCurve.; [RF-8932] When a RooCurve is plotted as a filled polygon, one point has. to be added at the lower left of the plot to close the polygon. A few lines of code have been cleaned up and simplified. See also here:. https://root-forum.cern.ch/t/odd-behaviour-using-drawoption-f/19104. https://root-forum.cern.ch/t/plotting-issue-with-multiple-filled-pdfs-using-addto/25746",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4760
https://github.com/root-project/root/pull/4760:157,usability,close,close,157,"[RF] Fix filled plotting of RooCurve.; [RF-8932] When a RooCurve is plotted as a filled polygon, one point has. to be added at the lower left of the plot to close the polygon. A few lines of code have been cleaned up and simplified. See also here:. https://root-forum.cern.ch/t/odd-behaviour-using-drawoption-f/19104. https://root-forum.cern.ch/t/plotting-issue-with-multiple-filled-pdfs-using-addto/25746",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4760
https://github.com/root-project/root/pull/4760:221,usability,simpl,simplified,221,"[RF] Fix filled plotting of RooCurve.; [RF-8932] When a RooCurve is plotted as a filled polygon, one point has. to be added at the lower left of the plot to close the polygon. A few lines of code have been cleaned up and simplified. See also here:. https://root-forum.cern.ch/t/odd-behaviour-using-drawoption-f/19104. https://root-forum.cern.ch/t/plotting-issue-with-multiple-filled-pdfs-using-addto/25746",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4760
https://github.com/root-project/root/pull/4760:282,usability,behavi,behaviour-using-drawoption-f,282,"[RF] Fix filled plotting of RooCurve.; [RF-8932] When a RooCurve is plotted as a filled polygon, one point has. to be added at the lower left of the plot to close the polygon. A few lines of code have been cleaned up and simplified. See also here:. https://root-forum.cern.ch/t/odd-behaviour-using-drawoption-f/19104. https://root-forum.cern.ch/t/plotting-issue-with-multiple-filled-pdfs-using-addto/25746",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4760
https://github.com/root-project/root/pull/4761:376,availability,operat,operation,376,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:860,availability,avail,available,860,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:917,availability,operat,operation,917,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1046,availability,operat,operation,1046,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:78,deployability,modul,module,78,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:336,deployability,modul,modules,336,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:601,deployability,log,logic,601,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:693,deployability,modul,modules,693,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:853,deployability,modul,module,853,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1088,deployability,patch,patch,1088,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:414,energy efficiency,optim,optimize,414,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:905,energy efficiency,CPU,CPU,905,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1019,energy efficiency,profil,profiles,1019,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1218,energy efficiency,reduc,reduction,1218,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:273,interoperability,semant,semantically,273,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:78,modifiability,modul,module,78,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:336,modifiability,modul,modules,336,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
