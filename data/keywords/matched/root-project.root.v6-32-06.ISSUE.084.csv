id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/12650:516,testability,simpl,simple,516,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:188,usability,minim,minimum,188,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:499,usability,perform,performance,499,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:516,usability,simpl,simple,516,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:586,usability,perform,performance,586,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12650:655,usability,perform,performance,655,"Fix TTreeCache Scaling with the number of clusters/baskets.; On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple `TTree::Draw` of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12650
https://github.com/root-project/root/pull/12651:48,availability,cluster,clusters,48,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:198,availability,cluster,clusters,198,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:400,availability,cluster,clusters,400,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:424,availability,cluster,cluster,424,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:546,availability,repair,repairs,546,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:631,availability,down,down,631,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:48,deployability,cluster,clusters,48,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:198,deployability,cluster,clusters,198,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:400,deployability,cluster,clusters,400,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:424,deployability,cluster,cluster,424,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:271,energy efficiency,estimat,estimated,271,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:589,energy efficiency,Draw,Draw,589,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:234,integrability,buffer,buffer,234,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:281,integrability,buffer,buffer,281,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:329,integrability,buffer,buffer,329,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:447,integrability,buffer,buffer,447,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:21,modifiability,Scal,Scaling,21,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:312,performance,time,times,312,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:558,performance,perform,performance,558,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:643,performance,perform,performance,643,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:712,performance,perform,performance,712,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:546,reliability,repair,repairs,546,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:575,testability,simpl,simple,575,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:247,usability,minim,minimum,247,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:558,usability,perform,performance,558,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:575,usability,simpl,simple,575,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:643,usability,perform,performance,643,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/pull/12651:712,usability,perform,performance,712,"v628: Fix TTreeCache Scaling with the number of clusters/baskets.; See https://github.com/root-project/root/pull/12650. On an extreme example:. ```. 15,272,928 entries. 152,739 baskets (and as many clusters). 10,000 Actual TTreeCache buffer size (minimum allowed). 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size). 400 bytes per baskets. 100 entries per baskets (i.e. per clusters). 25 number of cluster per TTreeCache buffer for single branch with default size. 1 float per entry (reading a single branch). ```. This repairs the performance of a simple TTree::Draw of a single branch. from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12651
https://github.com/root-project/root/issues/12652:781,availability,sli,slice,781,"[RF] Plots of nested `RooSimultaneous` ignore `ProjWData`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:953,availability,sli,slice,953,"[RF] Plots of nested `RooSimultaneous` ignore `ProjWData`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1237,availability,sli,sliced,1237,"ject %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2306,availability,Operat,Operating,2306,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2381,availability,down,download,2381,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1483,deployability,build,build,1483," the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2294,deployability,version,version,2294,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2363,deployability,instal,install,2363,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2256,energy efficiency,Draw,Draw,2256,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2294,integrability,version,version,2294,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2294,modifiability,version,version,2294,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:781,reliability,sli,slice,781,"[RF] Plots of nested `RooSimultaneous` ignore `ProjWData`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:953,reliability,sli,slice,953,"[RF] Plots of nested `RooSimultaneous` ignore `ProjWData`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1237,reliability,sli,sliced,1237,"ject %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1029,safety,except,except,1029,"neous` ignore `ProjWData`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1437,safety,input,input,1437," <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2462,testability,context,context,2462,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:2491,testability,context,context,2491,"imultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG dev3. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:449,usability,clear,clear,449,"[RF] Plots of nested `RooSimultaneous` ignore `ProjWData`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:497,usability,behavi,behavior,497,"[RF] Plots of nested `RooSimultaneous` ignore `ProjWData`; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in rang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1117,usability,behavi,behavior,1117,"b](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(fra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1135,usability,clear,clear,1135,".com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1292,usability,behavi,behavior,1292,"ou find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT ve",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12652:1437,usability,input,input,1437," <!--. A clear and concise description of what the wrong behavior is. -->. Nested `RooSimultaneous` are flattened into a single `RooSimultaneous` with a `RooSuperCategory` as index. . When plotting a `RooSimultaneous`, if the index category is derived its servers are searched inside the `ProjWData` set, and if not found the plot becomes a slice in the categories. However, the only server of a `RooSuperCategory` is the internal `RooMultiCategory`, so in case of a nested `RooSimultaneous` the plot is always a slice. This is basically https://github.com/root-project/root/issues/12020, except during plots and not generation. The solution is probably the same. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Categories are summed over and not sliced. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0, 'c12': 1}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). g = ROOT.RooGaussian('g', '', x, ROOT.RooFit.RooConst(0.5), ROOT.RooFit.RooConst(0.1)). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u, 'c12': g}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). c1.setIndex(0). for i in range(50):. proto.add({c1, c2}). c1.setIndex(1). for i in range(50):. proto.add({c1, c2}). . frame = x.frame(). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only gauss. c1.setIndex(0). s2.plotOn(frame, ProjWData = ({c1, c2}, proto)) # only uniform. frame.Draw(). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT master from LCG",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12652
https://github.com/root-project/root/issues/12653:898,availability,slo,slot,898,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1260,availability,slo,slot,1260,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1325,availability,Operat,Operating,1325,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1400,availability,down,download,1400,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:5,deployability,Fail,Failed,5,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:587,deployability,build,build,587,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:600,deployability,version,version,600,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:642,deployability,fail,fails,642,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:706,deployability,Fail,Failed,706,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1190,deployability,build,build,1190,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1281,deployability,version,version,1281,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1313,deployability,version,version,1313,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1382,deployability,instal,install,1382,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:600,integrability,version,version,600,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1281,integrability,version,version,1281,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1313,integrability,version,version,1313,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:600,modifiability,version,version,600,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1281,modifiability,version,version,1281,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1313,modifiability,version,version,1313,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:5,reliability,Fail,Failed,5,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:642,reliability,fail,fails,642,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:706,reliability,Fail,Failed,706,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:898,reliability,slo,slot,898,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1260,reliability,slo,slot,1260,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1144,safety,input,input,1144,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1454,testability,context,context,1454,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1483,testability,context,context,1483,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:447,usability,clear,clear,447,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:495,usability,behavi,behavior,495,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:778,usability,behavi,behavior,778,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:796,usability,clear,clear,796,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:999,usability,behavi,behavior,999,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/issues/12653:1144,usability,input,input,1144,"[RF] Failed to get attribute RooMomentMorphND from ROOT; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. My PyROOT scripts uses `RooMomentMorphND` and I am using LCG dev3 nightly build ( ROOT version 6.29/01). Staring this morning it fails to get RooMomentMorphND, reporting . ```. AttributeError: Failed to get attribute RooMomentMorphND from ROOT. ```. . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. ### To Reproduce. LCG dev3 nightly slot at cvmfs . ```. import ROOT . print ( ROOT.RooMomentMorphND). ```. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ### Setup. LCG dev3 nightly slot at cvmfs ( ROOT version 6.29/01). <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12653
https://github.com/root-project/root/pull/12654:149,deployability,depend,depends,149,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:413,deployability,observ,observable,413,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:1049,deployability,patch,patch,1049,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:34,integrability,wrap,wrapped,34,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:54,integrability,Filter,FilteringDiagConsumer,54,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:140,integrability,filter,filtered,140,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:149,integrability,depend,depends,149,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:480,integrability,wrap,wrapped,480,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:836,integrability,Wrap,WrapInput,836,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:149,modifiability,depend,depends,149,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:126,reliability,diagno,diagnostic,126,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:778,reliability,pra,pragma,778,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:791,reliability,diagno,diagnositc,791,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:149,safety,depend,depends,149,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:1015,safety,test,tested,1015,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:1049,safety,patch,patch,1049,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:1068,safety,test,tests,1068,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:1049,security,patch,patch,1049,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:126,testability,diagno,diagnostic,126,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:149,testability,depend,depends,149,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:413,testability,observ,observable,413,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:791,testability,diagno,diagnositc,791,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:1015,testability,test,tested,1015,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12654:1068,testability,test,tests,1068,"[cling] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. Alternatively, as discussed with @Axel-Naumann, we could insert `#pragma clang diagnositc ...` directives in [`Interpreter::WrapInput()`](https://github.com/root-project/root/blob/master/interpreter/cling/lib/Interpreter/Interpreter.cpp#L1130), but I see that as much less elegant. ## Checklist:. - [X] tested changes locally. - [X] the patch passes cling tests. This PR fixes #11562.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12654
https://github.com/root-project/root/pull/12655:177,integrability,event,eventually,177,"[RF] Speed up implementation of `RooHelpers::cloneTreeWithSameParameters()` and friends; Some time ago, I introduced the `RooHelpers::cloneTreeWithSameParameters()` function to eventually speed up cloning a RooAbsArg tree and then redirecting the parameters in a single pass. This speeds up the likelihood creation in ATLAS Higgs combination fits for example, because the parameter redirection pass is quite expensive. Things are now rewritten such that the parameters are not cloned to begin with, and therefore also don't need to be redirected to the original ones. Since `RooHelpers::cloneTreeWithSameParameters()` and its implementation helpers are now generalizations of `RooAbsArg::cloneTree()` and `RooAbsCollection::snapshot()`, these methods are not implemented in terms of the RooHelpers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12655
https://github.com/root-project/root/pull/12655:247,modifiability,paramet,parameters,247,"[RF] Speed up implementation of `RooHelpers::cloneTreeWithSameParameters()` and friends; Some time ago, I introduced the `RooHelpers::cloneTreeWithSameParameters()` function to eventually speed up cloning a RooAbsArg tree and then redirecting the parameters in a single pass. This speeds up the likelihood creation in ATLAS Higgs combination fits for example, because the parameter redirection pass is quite expensive. Things are now rewritten such that the parameters are not cloned to begin with, and therefore also don't need to be redirected to the original ones. Since `RooHelpers::cloneTreeWithSameParameters()` and its implementation helpers are now generalizations of `RooAbsArg::cloneTree()` and `RooAbsCollection::snapshot()`, these methods are not implemented in terms of the RooHelpers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12655
https://github.com/root-project/root/pull/12655:372,modifiability,paramet,parameter,372,"[RF] Speed up implementation of `RooHelpers::cloneTreeWithSameParameters()` and friends; Some time ago, I introduced the `RooHelpers::cloneTreeWithSameParameters()` function to eventually speed up cloning a RooAbsArg tree and then redirecting the parameters in a single pass. This speeds up the likelihood creation in ATLAS Higgs combination fits for example, because the parameter redirection pass is quite expensive. Things are now rewritten such that the parameters are not cloned to begin with, and therefore also don't need to be redirected to the original ones. Since `RooHelpers::cloneTreeWithSameParameters()` and its implementation helpers are now generalizations of `RooAbsArg::cloneTree()` and `RooAbsCollection::snapshot()`, these methods are not implemented in terms of the RooHelpers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12655
https://github.com/root-project/root/pull/12655:458,modifiability,paramet,parameters,458,"[RF] Speed up implementation of `RooHelpers::cloneTreeWithSameParameters()` and friends; Some time ago, I introduced the `RooHelpers::cloneTreeWithSameParameters()` function to eventually speed up cloning a RooAbsArg tree and then redirecting the parameters in a single pass. This speeds up the likelihood creation in ATLAS Higgs combination fits for example, because the parameter redirection pass is quite expensive. Things are now rewritten such that the parameters are not cloned to begin with, and therefore also don't need to be redirected to the original ones. Since `RooHelpers::cloneTreeWithSameParameters()` and its implementation helpers are now generalizations of `RooAbsArg::cloneTree()` and `RooAbsCollection::snapshot()`, these methods are not implemented in terms of the RooHelpers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12655
https://github.com/root-project/root/pull/12655:94,performance,time,time,94,"[RF] Speed up implementation of `RooHelpers::cloneTreeWithSameParameters()` and friends; Some time ago, I introduced the `RooHelpers::cloneTreeWithSameParameters()` function to eventually speed up cloning a RooAbsArg tree and then redirecting the parameters in a single pass. This speeds up the likelihood creation in ATLAS Higgs combination fits for example, because the parameter redirection pass is quite expensive. Things are now rewritten such that the parameters are not cloned to begin with, and therefore also don't need to be redirected to the original ones. Since `RooHelpers::cloneTreeWithSameParameters()` and its implementation helpers are now generalizations of `RooAbsArg::cloneTree()` and `RooAbsCollection::snapshot()`, these methods are not implemented in terms of the RooHelpers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12655
https://github.com/root-project/root/pull/12655:641,usability,help,helpers,641,"[RF] Speed up implementation of `RooHelpers::cloneTreeWithSameParameters()` and friends; Some time ago, I introduced the `RooHelpers::cloneTreeWithSameParameters()` function to eventually speed up cloning a RooAbsArg tree and then redirecting the parameters in a single pass. This speeds up the likelihood creation in ATLAS Higgs combination fits for example, because the parameter redirection pass is quite expensive. Things are now rewritten such that the parameters are not cloned to begin with, and therefore also don't need to be redirected to the original ones. Since `RooHelpers::cloneTreeWithSameParameters()` and its implementation helpers are now generalizations of `RooAbsArg::cloneTree()` and `RooAbsCollection::snapshot()`, these methods are not implemented in terms of the RooHelpers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12655
https://github.com/root-project/root/pull/12656:140,deployability,integr,integrals,140,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:301,deployability,observ,observables,301,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:455,deployability,observ,observables,455,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:533,energy efficiency,model,model,533,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:921,energy efficiency,CPU,CPU,921,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:140,integrability,integr,integrals,140,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:271,integrability,Batch,BatchMode,271,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:411,integrability,Batch,BatchMode,411,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:641,integrability,Batch,BatchMode,641,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:140,interoperability,integr,integrals,140,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:10,modifiability,scal,scalar,10,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:17,modifiability,interm,intermediate,17,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:140,modifiability,integr,integrals,140,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:317,modifiability,scal,scalar,317,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:424,modifiability,reu,reused,424,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:777,modifiability,paramet,parameters,777,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:110,performance,perform,performance,110,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:271,performance,Batch,BatchMode,271,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:411,performance,Batch,BatchMode,411,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:641,performance,Batch,BatchMode,641,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:676,performance,cach,caching,676,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:916,performance,Time,Time,916,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:921,performance,CPU,CPU,921,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:140,reliability,integr,integrals,140,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:543,safety,test,testRooFuncWrapper,543,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:140,security,integr,integrals,140,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:533,security,model,model,533,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:140,testability,integr,integrals,140,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:301,testability,observ,observables,301,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:455,testability,observ,observables,455,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:543,testability,test,testRooFuncWrapper,543,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:110,usability,perform,performance,110,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12656:513,usability,minim,minimization,513,"[RF] Move scalar intermediate results out of the loops in generated code; It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt. ------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ------------------------------------------------------------------------------------------. NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100. NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100. NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100. NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100. NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100. NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100. NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100. NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100. NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100. NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100. NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100. NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100. NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100. NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100. NllCodeSquash_AD/3/1000/iterations:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12656
https://github.com/root-project/root/pull/12657:389,deployability,log,logic,389,"[ntuple] Do not try to resolve `ROOT::Experimental::ClusterSize_t`; On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12657
https://github.com/root-project/root/pull/12657:389,safety,log,logic,389,"[ntuple] Do not try to resolve `ROOT::Experimental::ClusterSize_t`; On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12657
https://github.com/root-project/root/pull/12657:535,safety,test,test,535,"[ntuple] Do not try to resolve `ROOT::Experimental::ClusterSize_t`; On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12657
https://github.com/root-project/root/pull/12657:573,safety,test,tested,573,"[ntuple] Do not try to resolve `ROOT::Experimental::ClusterSize_t`; On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12657
https://github.com/root-project/root/pull/12657:389,security,log,logic,389,"[ntuple] Do not try to resolve `ROOT::Experimental::ClusterSize_t`; On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12657
https://github.com/root-project/root/pull/12657:389,testability,log,logic,389,"[ntuple] Do not try to resolve `ROOT::Experimental::ClusterSize_t`; On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12657
https://github.com/root-project/root/pull/12657:535,testability,test,test,535,"[ntuple] Do not try to resolve `ROOT::Experimental::ClusterSize_t`; On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12657
https://github.com/root-project/root/pull/12657:573,testability,test,tested,573,"[ntuple] Do not try to resolve `ROOT::Experimental::ClusterSize_t`; On Windows, the type `ROOT::Experimental::ClusterSize_t` is resolved to the underlying type `ROOT::Experimental::RClusterSize`. `ROOT::Experimental::ClusterSize_t` is already in its canonical form and `typedef` resolution should not be attempted. TL;DR, if the type is resolved to `ROOT::Experimental::RClusterSize`, the logic in `RFieldBase::Create()` falls back to creating a `RClassField` instance, which is obviously not intended. This fixes the `ntuple_packing` test on Windows. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12657
https://github.com/root-project/root/pull/12658:286,integrability,Sub,Submitting,286,[RF] RooProjectedPdf support extended pdfs and normalization ranges; This is a suggestion for two improvements to the class:. 1. The projected pdf should be extended if the pdf it is projecting is also extended. 2. The projection should respect the normalization range if one is given. Submitting this PR to solicit feedback on these proposals.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12658
https://github.com/root-project/root/pull/12658:29,modifiability,exten,extended,29,[RF] RooProjectedPdf support extended pdfs and normalization ranges; This is a suggestion for two improvements to the class:. 1. The projected pdf should be extended if the pdf it is projecting is also extended. 2. The projection should respect the normalization range if one is given. Submitting this PR to solicit feedback on these proposals.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12658
https://github.com/root-project/root/pull/12658:157,modifiability,exten,extended,157,[RF] RooProjectedPdf support extended pdfs and normalization ranges; This is a suggestion for two improvements to the class:. 1. The projected pdf should be extended if the pdf it is projecting is also extended. 2. The projection should respect the normalization range if one is given. Submitting this PR to solicit feedback on these proposals.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12658
https://github.com/root-project/root/pull/12658:202,modifiability,exten,extended,202,[RF] RooProjectedPdf support extended pdfs and normalization ranges; This is a suggestion for two improvements to the class:. 1. The projected pdf should be extended if the pdf it is projecting is also extended. 2. The projection should respect the normalization range if one is given. Submitting this PR to solicit feedback on these proposals.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12658
https://github.com/root-project/root/pull/12658:21,usability,support,support,21,[RF] RooProjectedPdf support extended pdfs and normalization ranges; This is a suggestion for two improvements to the class:. 1. The projected pdf should be extended if the pdf it is projecting is also extended. 2. The projection should respect the normalization range if one is given. Submitting this PR to solicit feedback on these proposals.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12658
https://github.com/root-project/root/pull/12658:316,usability,feedback,feedback,316,[RF] RooProjectedPdf support extended pdfs and normalization ranges; This is a suggestion for two improvements to the class:. 1. The projected pdf should be extended if the pdf it is projecting is also extended. 2. The projection should respect the normalization range if one is given. Submitting this PR to solicit feedback on these proposals.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12658
https://github.com/root-project/root/issues/12659:635,availability,error,error,635,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:19,deployability,fail,fails,19,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:227,deployability,build,build,227,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:342,deployability,build,building,342,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:351,deployability,modul,module,351,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:373,deployability,build,building,373,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:382,deployability,modul,module,382,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:449,deployability,modul,module-includes,449,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:938,deployability,updat,updates,938,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:1186,deployability,version,version,1186,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:326,energy efficiency,Core,Core,326,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:359,energy efficiency,Core,Core,359,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:1186,integrability,version,version,1186,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:351,modifiability,modul,module,351,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:382,modifiability,modul,module,382,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:449,modifiability,modul,module-includes,449,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:1186,modifiability,version,version,1186,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:635,performance,error,error,635,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:1092,performance,time,time,1092,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:19,reliability,fail,fails,19,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:351,safety,modul,module,351,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:382,safety,modul,module,382,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:449,safety,modul,module-includes,449,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:635,safety,error,error,635,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:938,safety,updat,updates,938,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:938,security,updat,updates,938,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/issues/12659:635,usability,error,error,635,"compiling v6.28.02 fails under opensuse TW with gcc-13; Dear all,. after . git clone https://github.com/root-project/root.git. cd root. git checkout -b v6-28-02 v6-28-02. mkdir root_build. cd root_build. cmake ../root. cmake --build -j4. I get:. ... [ 75%] Built target rootcling_stage1. [ 75%] Generating G__Core.cxx, ../lib/Core.pcm. While building module 'Core':. While building module 'std' imported from input_line_1:1:. In file included from <module-includes>:4:. In file included from /usr/include/c++/13/bitset:52:. In file included from /usr/include/c++/13/string:47:. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: error: redefinition of '__distance'. __distance(_InputIterator __first, _InputIterator __last,. ^. /usr/include/c++/13/bits/stl_iterator_base_funcs.h:81:5: note: previous definition is here. __distance(_InputIterator __first, _InputIterator __last,. ^. ... This is under opensuse Tumbleweed with latest updates. The default compiler is gcc-13. . It looks similar to an previous issue with gcc-12: https://github.com/root-project/root/issues/10478. The last time I built root (v6.26.10 in December 2022) I had no problems but I don't know what the gcc version was back then. . Could you please have a look? Thanks & Cheers,. --Sven.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12659
https://github.com/root-project/root/pull/12660:9,availability,error,error,9,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/pull/12660:262,deployability,contain,container,262,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/pull/12660:134,energy efficiency,model,model,134,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/pull/12660:9,performance,error,error,9,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/pull/12660:112,performance,cach,cache,112,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/pull/12660:280,performance,cach,cache,280,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/pull/12660:9,safety,error,error,9,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/pull/12660:134,security,model,model,134,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/pull/12660:9,usability,error,error,9,"[RF] Fix error in RooProdPdf that comes from wrong `addOwned()`; For some of the args created in the RooProdPdf cache, the ownership. model was wrong. They were attempted to be added to a list that is. actually not owning, but they should be added to the owning container of. the cache. This fixes an issue with 6.28 reported on the forum:. https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12660
https://github.com/root-project/root/issues/12661:197,availability,error,error,197,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:214,availability,Error,Error,214,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:335,deployability,contain,contains,335,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:42,modifiability,paramet,parameter,42,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:197,performance,error,error,197,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:214,performance,Error,Error,214,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:12,reliability,doe,does,12,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:197,safety,error,error,197,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:214,safety,Error,Error,214,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:296,security,access,accessing,296,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:21,usability,support,support,21,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:197,usability,error,error,197,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/issues/12661:214,usability,Error,Error,214,TTreeReader does not support enum type as parameter; As seen in https://root-forum.cern.ch/t/ttreereaderarray-with-enum-type/54283:. ```. TTreeReaderArray<someEnum> test_someEnum ... ```. leads to error like. ```. Error in <TTreeReaderArrayBase::CreateProxy()>: The template argument type T of T accessing branch test_struct.e1 (which contains data of type Int_t) is not known to ROOT. You will need to create a dictionary for it. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12661
https://github.com/root-project/root/pull/12662:16,usability,support,support,16,TTreeReader add support for enum type as template args; Fix #12661.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12662
https://github.com/root-project/root/pull/12663:51,deployability,compos,composite,51,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:197,deployability,updat,updated,197,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:19,integrability,pub,publish-unit-test-result-action,19,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:51,modifiability,compos,composite,51,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:77,performance,time,time-in-case-annotation,77,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:5,safety,Test,Test,5,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:32,safety,test,test-result-action,32,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:167,safety,test,tested,167,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:197,safety,updat,updated,197,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:197,security,updat,updated,197,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:5,testability,Test,Test,5,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:27,testability,unit,unit-test-result-action,27,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12663:167,testability,test,tested,167,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…; …est-time-in-case-annotation. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12663
https://github.com/root-project/root/pull/12664:356,availability,mask,mask,356,"[ntuple] Add support for unique pointers; Adds a nullable field as a base class for unique pointer support. A follow-up PR will add `std::optional` support using the same base class. The nullable field is usually stored like a collection that can have zero or one element per entry. Optionally, nullable fields can be stored in ""dense mode"", with a bitmap mask and default-constructed values for the null entries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12664
https://github.com/root-project/root/pull/12664:13,usability,support,support,13,"[ntuple] Add support for unique pointers; Adds a nullable field as a base class for unique pointer support. A follow-up PR will add `std::optional` support using the same base class. The nullable field is usually stored like a collection that can have zero or one element per entry. Optionally, nullable fields can be stored in ""dense mode"", with a bitmap mask and default-constructed values for the null entries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12664
https://github.com/root-project/root/pull/12664:99,usability,support,support,99,"[ntuple] Add support for unique pointers; Adds a nullable field as a base class for unique pointer support. A follow-up PR will add `std::optional` support using the same base class. The nullable field is usually stored like a collection that can have zero or one element per entry. Optionally, nullable fields can be stored in ""dense mode"", with a bitmap mask and default-constructed values for the null entries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12664
https://github.com/root-project/root/pull/12664:148,usability,support,support,148,"[ntuple] Add support for unique pointers; Adds a nullable field as a base class for unique pointer support. A follow-up PR will add `std::optional` support using the same base class. The nullable field is usually stored like a collection that can have zero or one element per entry. Optionally, nullable fields can be stored in ""dense mode"", with a bitmap mask and default-constructed values for the null entries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12664
https://github.com/root-project/root/pull/12665:413,availability,cluster,clusters,413,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:671,availability,cluster,clusters,671,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:413,deployability,cluster,clusters,413,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:671,deployability,cluster,clusters,671,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:685,deployability,fail,fail,685,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:406,integrability,event,events,406,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:498,integrability,event,events,498,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:202,performance,disk,disk,202,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:344,performance,disk,disk,344,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:435,performance,memor,memory,435,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:685,reliability,fail,fail,685,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:478,safety,Valid,Validation,478,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:478,security,Validat,Validation,478,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:13,usability,support,support,13,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:58,usability,support,support,58,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:389,usability,support,supporting,389,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12665:435,usability,memor,memory,435,"[ntuple] Add support for (Split)Index64 column types; Add support for 64bit split and unsplit column types. It also makes them the default for index columns. When compressed, the difference to 32bit on-disk offsets is [almost none](https://docs.google.com/spreadsheets/d/1M7DR5obCOG0aTx_5zTLBjXJZb1uXWkHXPBcUpDIkSEc/edit?usp=sharing). 64bit on-disk index columns are the missing piece for supporting large events/clusters (>512MB). In memory, offsets are already 64bit, always. Validation of large events is for a follow-up PR. Uncompressed, 64bit index columns may still hurt, so there is an option to use 32bit columns instead. In this case, the attempt to write large clusters will fail/throw.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12665
https://github.com/root-project/root/pull/12666:21,usability,support,support,21,[RF] Add code-squash support for RooPolyVar and RooPolynomial; This PR adds support for RooPolyVar and also adds two utility functions to print the squashed code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12666
https://github.com/root-project/root/pull/12666:76,usability,support,support,76,[RF] Add code-squash support for RooPolyVar and RooPolynomial; This PR adds support for RooPolyVar and also adds two utility functions to print the squashed code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12666
https://github.com/root-project/root/pull/12667:139,energy efficiency,model,model,139,[ntuple] Remove enum class ENTupleShowFormat; Simplifies `RNTuple::Show` and fixes the ntpl005 tutorial. Show now uses unconditionally the model bound to the reader.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12667
https://github.com/root-project/root/pull/12667:139,security,model,model,139,[ntuple] Remove enum class ENTupleShowFormat; Simplifies `RNTuple::Show` and fixes the ntpl005 tutorial. Show now uses unconditionally the model bound to the reader.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12667
https://github.com/root-project/root/pull/12667:46,testability,Simpl,Simplifies,46,[ntuple] Remove enum class ENTupleShowFormat; Simplifies `RNTuple::Show` and fixes the ntpl005 tutorial. Show now uses unconditionally the model bound to the reader.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12667
https://github.com/root-project/root/pull/12667:46,usability,Simpl,Simplifies,46,[ntuple] Remove enum class ENTupleShowFormat; Simplifies `RNTuple::Show` and fixes the ntpl005 tutorial. Show now uses unconditionally the model bound to the reader.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12667
https://github.com/root-project/root/pull/12668:51,interoperability,prox,proxy-server,51,"[RF] Fixes for nested RooSimultaneous pdfs; 1. Fix proxy-server desync for nested RooSimultaneous. 2. Remove obsolete `RooSimultaneous::plotOn()` override. 3. Fix plotting of nested RooSimultanous when projection with data over index category. More detail in the commit descriptions. Closes #12652. FYI, @elusian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12668
https://github.com/root-project/root/pull/12668:284,usability,Close,Closes,284,"[RF] Fixes for nested RooSimultaneous pdfs; 1. Fix proxy-server desync for nested RooSimultaneous. 2. Remove obsolete `RooSimultaneous::plotOn()` override. 3. Fix plotting of nested RooSimultanous when projection with data over index category. More detail in the commit descriptions. Closes #12652. FYI, @elusian",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12668
https://github.com/root-project/root/pull/12669:472,energy efficiency,load,loaded,472,[v628][meta] GetClass better handling of typedef autoloading.; Handle the case where a typedef as a dictionary entry and thus an autoload entry (rootmap case) and this typedef point to an instance a class template with a default paramter. In this case we do not have a (forward) declaration of the typedef in the rootmap file (because we can't have a forward declaration of the class template). In those case our only source of information is in the list of type which is loaded as part of the dictionary for the typedef. If in addition the dictionary for the target of the typedef is in another library we actually need to load that library based on the resolved name of the typedef). This fixes #12378.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12669
https://github.com/root-project/root/pull/12669:624,energy efficiency,load,load,624,[v628][meta] GetClass better handling of typedef autoloading.; Handle the case where a typedef as a dictionary entry and thus an autoload entry (rootmap case) and this typedef point to an instance a class template with a default paramter. In this case we do not have a (forward) declaration of the typedef in the rootmap file (because we can't have a forward declaration of the class template). In those case our only source of information is in the list of type which is loaded as part of the dictionary for the typedef. If in addition the dictionary for the target of the typedef is in another library we actually need to load that library based on the resolved name of the typedef). This fixes #12378.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12669
https://github.com/root-project/root/pull/12669:472,performance,load,loaded,472,[v628][meta] GetClass better handling of typedef autoloading.; Handle the case where a typedef as a dictionary entry and thus an autoload entry (rootmap case) and this typedef point to an instance a class template with a default paramter. In this case we do not have a (forward) declaration of the typedef in the rootmap file (because we can't have a forward declaration of the class template). In those case our only source of information is in the list of type which is loaded as part of the dictionary for the typedef. If in addition the dictionary for the target of the typedef is in another library we actually need to load that library based on the resolved name of the typedef). This fixes #12378.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12669
https://github.com/root-project/root/pull/12669:624,performance,load,load,624,[v628][meta] GetClass better handling of typedef autoloading.; Handle the case where a typedef as a dictionary entry and thus an autoload entry (rootmap case) and this typedef point to an instance a class template with a default paramter. In this case we do not have a (forward) declaration of the typedef in the rootmap file (because we can't have a forward declaration of the class template). In those case our only source of information is in the list of type which is loaded as part of the dictionary for the typedef. If in addition the dictionary for the target of the typedef is in another library we actually need to load that library based on the resolved name of the typedef). This fixes #12378.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12669
https://github.com/root-project/root/pull/12671:74,integrability,buffer,buffer,74,"[VecOps] Add VecOps::ResetView; This is a low-level function to reset the buffer for which this RVec is acting as a view. Before this commit, the only way to reset the pointed-to address of a non-owning RVec was to construct a new RVec and swap it with the old one, which is much more expensive than the two assignments ResetView performs. It is immediately useful for RDF bulk processing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12671
https://github.com/root-project/root/pull/12671:330,performance,perform,performs,330,"[VecOps] Add VecOps::ResetView; This is a low-level function to reset the buffer for which this RVec is acting as a view. Before this commit, the only way to reset the pointed-to address of a non-owning RVec was to construct a new RVec and swap it with the old one, which is much more expensive than the two assignments ResetView performs. It is immediately useful for RDF bulk processing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12671
https://github.com/root-project/root/pull/12671:330,usability,perform,performs,330,"[VecOps] Add VecOps::ResetView; This is a low-level function to reset the buffer for which this RVec is acting as a view. Before this commit, the only way to reset the pointed-to address of a non-owning RVec was to construct a new RVec and swap it with the old one, which is much more expensive than the two assignments ResetView performs. It is immediately useful for RDF bulk processing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12671
https://github.com/root-project/root/issues/12673:6704,availability,error,error,6704,"ling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6943,availability,error,error,6943,"<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6965,availability,error,error,6965,"<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:872,deployability,stack,stack,872,"[ntuple] Crash when using RNTuple at prompt; The crash happens when trying to directly use a RNTuple object that was stored in a file at the prompt rather than going through `_file0->Get<ROOT::Experimental::RNTuple>(""Events"")` (which works). This particular file was produced with `RNTupleImporter`, but I guess/hope it does not matter. . ```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1533,deployability,Stack,StackTrace,1533,"TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2397,deployability,build,build-foo,2397,"d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2407,deployability,instal,install,2407,"nixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2599,deployability,build,build-foo,2599,"95. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2609,deployability,instal,install,2609,"00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2879,deployability,build,build-foo,2879,".cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2889,deployability,instal,install,2889," #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3058,deployability,build,build-foo,3058,"allbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3068,deployability,instal,install,3068,"cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3359,deployability,build,build-foo,3359,"e/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, cla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3369,deployability,instal,install,3369,"lwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::Sourc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3610,deployability,build,build-foo,3610,"l/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3620,deployability,instal,install,3620,"Cling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::Pars",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3769,deployability,build,build-foo,3769,"ng::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3779,deployability,instal,install,3779," const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d88",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3964,deployability,build,build-foo,3964,"e(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:3974,deployability,instal,install,3974,"CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4219,deployability,build,build-foo,4219,"arser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4229,deployability,instal,install,4229,"rsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llv",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4465,deployability,build,build-foo,4465,"mallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/rel",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4475,deployability,instal,install,4475,"r<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4728,deployability,build,build-foo,4728,"blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Trans",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4738,deployability,instal,install,4738,"/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4939,deployability,build,build-foo,4939,"hdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_trai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4949,deployability,instal,install,4949,"perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5129,deployability,build,build-foo,5129,"lang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5139,deployability,instal,install,5139,"ser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in clin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5297,deployability,build,build-foo,5297,"clGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5307,deployability,instal,install,5307,"lang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/inst",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5493,deployability,build,build-foo,5493,". #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5503,deployability,instal,install,5503,"0007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5808,deployability,build,build-foo,5808,"rnalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::Proc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5818,deployability,instal,install,5818,"ration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6078,deployability,build,build-foo,6078,"rom /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6088,deployability,instal,install,6088,"/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6297,deployability,build,build-foo,6297,"-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::Dispatc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6307,deployability,instal,install,6307,"all/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8125,deployability,stack,stack,8125,"0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8454,deployability,stack,stack,8454,"x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9236,deployability,build,build-foo,9236,"re running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9246,deployability,instal,install,9246,"g. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9438,deployability,build,build-foo,9438,"the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9448,deployability,instal,install,9448,"E stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9718,deployability,build,build-foo,9718,".cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9728,deployability,instal,install,9728," #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9897,deployability,build,build-foo,9897,"allbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9907,deployability,instal,install,9907,"cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:10198,deployability,build,build-foo,10198,"e/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, cla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:10208,deployability,instal,install,10208,"lwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::Sourc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:10449,deployability,build,build-foo,10449,"l/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:10459,deployability,instal,install,10459,"Cling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::Pars",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:10608,deployability,build,build-foo,10608,"ng::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:10618,deployability,instal,install,10618," const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d88",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:10803,deployability,build,build-foo,10803,"e(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:10813,deployability,instal,install,10813,"CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11058,deployability,build,build-foo,11058,"arser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11068,deployability,instal,install,11068,"rsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llv",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11304,deployability,build,build-foo,11304,"mallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/rel",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11314,deployability,instal,install,11314,"r<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11567,deployability,build,build-foo,11567,"blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Trans",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11577,deployability,instal,install,11577,"/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11778,deployability,build,build-foo,11778,"hdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_trai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11788,deployability,instal,install,11788,"perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11968,deployability,build,build-foo,11968,"lang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11978,deployability,instal,install,11978,"ser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in clin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12136,deployability,build,build-foo,12136,"clGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12146,deployability,instal,install,12146,"lang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/inst",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12332,deployability,build,build-foo,12332,". #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12342,deployability,instal,install,12342,"0007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12647,deployability,build,build-foo,12647,"0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===========================================================. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12657,deployability,instal,install,12657,"0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===========================================================. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12917,deployability,build,build-foo,12917,"0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===========================================================. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12927,deployability,instal,install,12927,"0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===========================================================. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:13136,deployability,build,build-foo,13136,"0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===========================================================. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:13146,deployability,instal,install,13146,"0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===========================================================. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1192,energy efficiency,optim,optimized,1192,"rimental::RNTuple>(""Events"")` (which works). This particular file was produced with `RNTupleImporter`, but I guess/hope it does not matter. . ```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1334,energy efficiency,optim,optimized,1334,"```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1438,energy efficiency,optim,optimized,1438,"DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1481,energy efficiency,core,core,1481,"e0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalS",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1572,energy efficiency,core,core,1572,"ed_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1721,energy efficiency,core,core,1721,"nts<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1859,energy efficiency,core,core,1859,"the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2037,energy efficiency,core,core,2037,"x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwith",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2189,energy efficiency,core,core,2189,"<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5653,energy efficiency,alloc,allocator,5653,"er) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:5959,energy efficiency,alloc,allocator,5959,"Cling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6578,energy efficiency,core,core,6578,"teInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6688,energy efficiency,optim,optimized,6688,"tionOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6989,energy efficiency,core,core,6989,":Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. =======================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7095,energy efficiency,core,core,7095,"ib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see que",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7220,energy efficiency,core,core,7220,"t&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 enviro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7347,energy efficiency,optim,optimized,7347,"4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7369,energy efficiency,core,core,7369,"eterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7478,energy efficiency,core,core,7478,"ompRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7554,energy efficiency,core,core,7554,"0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7695,energy efficiency,core,core,7695," out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ..",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7835,energy efficiency,core,core,7835,"try=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7902,energy efficiency,optim,optimized,7902,"pt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallba",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8698,energy efficiency,core,core,8698,"base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8876,energy efficiency,core,core,8876,"ccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwith",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9028,energy efficiency,core,core,9028,"he lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12492,energy efficiency,alloc,allocator,12492,"er) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===============================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:12798,energy efficiency,alloc,allocator,12798,"0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===========================================================. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:13414,energy efficiency,core,core,13414,"0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 ""ROOT_prompt_2""nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. ===========================================================. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:217,integrability,Event,Events,217,"[ntuple] Crash when using RNTuple at prompt; The crash happens when trying to directly use a RNTuple object that was stored in a file at the prompt rather than going through `_file0->Get<ROOT::Experimental::RNTuple>(""Events"")` (which works). This particular file was produced with `RNTupleImporter`, but I guess/hope it does not matter. . ```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:688,integrability,Event,Events,688,"[ntuple] Crash when using RNTuple at prompt; The crash happens when trying to directly use a RNTuple object that was stored in a file at the prompt rather than going through `_file0->Get<ROOT::Experimental::RNTuple>(""Events"")` (which works). This particular file was produced with `RNTupleImporter`, but I guess/hope it does not matter. . ```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:720,integrability,Event,Events,720,"[ntuple] Crash when using RNTuple at prompt; The crash happens when trying to directly use a RNTuple object that was stored in a file at the prompt rather than going through `_file0->Get<ROOT::Experimental::RNTuple>(""Events"")` (which works). This particular file was produced with `RNTupleImporter`, but I guess/hope it does not matter. . ```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6934,integrability,Event,Events,6934,"ar_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8388,integrability,sub,submit,8388,"tem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8228,modifiability,variab,variable,8228,"c/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1192,performance,optimiz,optimized,1192,"rimental::RNTuple>(""Events"")` (which works). This particular file was produced with `RNTupleImporter`, but I guess/hope it does not matter. . ```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1334,performance,optimiz,optimized,1334,"```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1438,performance,optimiz,optimized,1438,"DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2266,performance,Multiplex,MultiplexInterpreterCallbacks,2266,"tpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2465,performance,Multiplex,MultiplexExternalSemaSource,2465,"./core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVecto",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6688,performance,optimiz,optimized,6688,"tionOptions, cling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6704,performance,error,error,6704,"ling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6943,performance,error,error,6943,"<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6965,performance,error,error,6965,"<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7347,performance,optimiz,optimized,7347,"4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:7902,performance,optimiz,optimized,7902,"pt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallba",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9105,performance,Multiplex,MultiplexInterpreterCallbacks,9105," the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9304,performance,Multiplex,MultiplexExternalSemaSource,9304,"rum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVecto",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:320,reliability,doe,does,320,"[ntuple] Crash when using RNTuple at prompt; The crash happens when trying to directly use a RNTuple object that was stored in a file at the prompt rather than going through `_file0->Get<ROOT::Experimental::RNTuple>(""Events"")` (which works). This particular file was produced with `RNTupleImporter`, but I guess/hope it does not matter. . ```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6704,safety,error,error,6704,"ling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6943,safety,error,error,6943,"<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6965,safety,error,error,6965,"<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:1761,security,sign,signal,1761,"olation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLoc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2730,security,Ident,IdentifierInfo,2730,"nixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:2778,security,Token,Token,2778,"d>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:4645,security,Access,AccessSpecifier,4645,"007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9569,security,Ident,IdentifierInfo,9569,"==============================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:9617,security,Token,Token,9617,"==. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*, clang::CXXScopeSpec&, clang::IdentifierInfo*&, clang::SourceLocation, clang::Token const&, clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #13 0x00007f174c7d02fe in clang::Parser::TryAnnotateName(clang::CorrectionCandidateCallback*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #14 0x00007f174c79f729 in clang::Parser::ParseStatementOrDeclarationAfterAttributes(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*, clang::ParsedAttributesWithRange&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #15 0x00007f174c79fab4 in clang::Parser::ParseStatementOrDeclaration(llvm::SmallVector<clang::Stmt*, 32u>&, clang::Parser::ParsedStmtContext, clang::SourceLocation*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #16 0x00007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:11484,security,Access,AccessSpecifier,11484,"007f174c7a7902 in clang::Parser::ParseCompoundStatementBody(bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #17 0x00007f174c7a9bcc in clang::Parser::ParseFunctionStatementBody(clang::Decl*, clang::Parser::ParseScope&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #18 0x00007f174c7d5ac5 in clang::Parser::ParseFunctionDefinition(clang::ParsingDeclarator&, clang::Parser::ParsedTemplateInfo const&, clang::Parser::LateParsedAttrList*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #19 0x00007f174c70dd20 in clang::Parser::ParseDeclGroup(clang::ParsingDeclSpec&, clang::DeclaratorContext, clang::SourceLocation*, clang::Parser::ForRangeInit*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #20 0x00007f174c7d1e54 in clang::Parser::ParseDeclarationOrFunctionDefinition(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) [clone .part.0] () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #21 0x00007f174c7d8830 in clang::Parser::ParseExternalDeclaration(clang::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #22 0x00007f174c7d9900 in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #23 0x00007f174be0d87a in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #24 0x00007f174be0e9b0 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #25 0x00007f174bd71127 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:878,testability,trace,trace,878,"[ntuple] Crash when using RNTuple at prompt; The crash happens when trying to directly use a RNTuple object that was stored in a file at the prompt rather than going through `_file0->Get<ROOT::Experimental::RNTuple>(""Events"")` (which works). This particular file was produced with `RNTupleImporter`, but I guess/hope it does not matter. . ```. $ root -l data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple. root [0]. Attaching file data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple as _file0... (TFile *) 0x55fecfbb7140. root [1] _file0->ls(). TFile**		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. TFile*		data/Run2012BC_DoubleMuParked_Muons.zstd.ntuple	. KEY: ROOT::Experimental::RNTuple	Events;1	object title. root [2] Events<Enter>. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f17510ea707 in __GI___wait4 (pid=109605, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f17510ea6cb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffd9df79db8, options=options. entry=0) at waitpid.c:38. #2 0x00007f17510627fb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f1751960d69 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f17519606f4 in TUnixSystem::DispatchSignals (this=0x55fecde2a420, sig=kSigSegmentationViolation) at ../core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8131,testability,trace,trace,8131,"7f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8460,testability,trace,trace,8460,"de2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6704,usability,error,error,6704,"ling::Value*, cling::Transaction**, unsigned long) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #26 0x00007f174bd7152d in cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6943,usability,error,error,6943,"<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:6965,usability,error,error,6965,"<char> > const&, cling::Value*, cling::Transaction**, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #27 0x00007f174be638ab in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #28 0x00007f174bc85e4d in HandleInterpreterException (metaProcessor=0x55fecea7b020, input_line=0x55fecfb58800 ""#line 1 \""ROOT_prompt_2\""\nEvents"", compRes=. 0x7ffd9df7f23c: cling::Interpreter::kSuccess, result=result. entry=0x7ffd9df7f250) at ../core/metacling/src/TCling.cxx:2428. #29 0x00007f174bca2557 in TCling::ProcessLine (this=0x55fecde8e9d0, line=<optimized out>, error=0x7ffd9df7f60c) at /usr/include/c++/12.2.1/bits/unique_ptr.h:191. #30 0x00007f1751c052e5 in TRint::ProcessLineNr (this=this. entry=0x55fecde5ddd0, filestem=filestem. entry=0x7f1751c163f8 ""ROOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error. entry=0x0) at ../core/rint/src/TRint.cxx:801. #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8051,usability,hint,hint,8051,"ndleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648. #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this. entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306. #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TCling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8265,usability,help,help,8265,"f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061. #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406. #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/issues/12673:8536,usability,help,help,8536,"cde2a420) at ../core/base/src/TSystem.cxx:356. #36 0x00007f17518098cb in TApplication::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/base/src/TApplication.cxx:1677. #37 0x00007f1751c07062 in TRint::Run (this=this. entry=0x55fecde5ddd0, retrn=retrn. entry=false) at ../core/rint/src/TRint.cxx:501. #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84. ===========================================================. The lines below might hint at the cause of the crash. If you see question. marks as part of the stack trace, try to recompile with debugging information. enabled and export CLING_DEBUG=1 environment variable before running. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603. #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this. entry=0x55fece888730, R=..., S=S. entry=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:772. #9 0x00007f174bce8e51 in TClingCallbacks::LookupObject (this=0x55fece888730, R=..., S=0x55fecdea0250) at ../core/metacling/src/TClingCallbacks.cxx:402. #10 0x00007f174bd7939f in cling::MultiplexInterpreterCallbacks::LookupObject(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #11 0x00007f174c94bf1c in clang::MultiplexExternalSemaSource::LookupUnqualified(clang::LookupResult&, clang::Scope*) () from /home/blue/ROOT/relwithdebinfo-perf/cmake-build-foo/install/lib/libCling.so. #12 0x00007f174cb36a92 in clang::Sema::ClassifyName(clang::Scope*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12673
https://github.com/root-project/root/pull/12675:590,energy efficiency,reduc,reduces,590,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:52,integrability,Batch,BatchMode,52,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:242,integrability,event,event,242,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:536,integrability,Batch,BatchMode,536,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:662,integrability,Batch,BatchMode,662,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:52,performance,Batch,BatchMode,52,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:536,performance,Batch,BatchMode,536,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:662,performance,Batch,BatchMode,662,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:370,security,ident,identical,370,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12675:280,usability,support,support,280,"[RF] Implement `RooPolynomial` plus `RooPolyVar` in BatchMode and remove some old code; The existing implementation in RooBatchCompute for polynomials was not. adequate, because it couldn't deal with coefficients that are different. for each event. This PR is re-implementing the support for RooPolynomial, and also. re-uses the same code for the `RooPolyVar`, which is identical to the. `RooPolynomial` apart from the base class. Also, this PR is removing the old `RooAbsReal::evaluateSpan()` family of functions that was used for the BatchMode before ROOT 6.26. Furthermore, this PR also reduces the use of the `RunContext` class that was connected to the old BatchMode implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12675
https://github.com/root-project/root/pull/12676:2109,availability,cluster,clusters,2109,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2328,availability,cluster,cluster,2328,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:235,deployability,updat,updated,235,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1240,deployability,Updat,UpdateSchema,1240,"any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1946,deployability,contain,contain,1946,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2109,deployability,cluster,clusters,2109,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2123,deployability,contain,contain,2123,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2328,deployability,cluster,cluster,2328,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2541,deployability,updat,updated,2541,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:41,energy efficiency,model,model,41,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:119,energy efficiency,model,model,119,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:223,energy efficiency,model,model,223,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2690,energy efficiency,optim,optimization,2690,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:650,integrability,Complian,Compliant,650,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1414,integrability,translat,translated,1414,"st on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` loc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:594,interoperability,specif,specifies,594,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1132,interoperability,specif,specifies,1132,"nded in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1307,interoperability,specif,specifies,1307,"w flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1414,interoperability,translat,translated,1414,"st on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` loc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:47,modifiability,extens,extension,47,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:125,modifiability,extens,extension,125,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1740,modifiability,Exten,ExtendToFitColumnRange,1740,"ad back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1781,modifiability,exten,extends,1781," firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR http",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:250,performance,time,time,250,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:425,performance,disk,disk,425,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1168,performance,disk,disk,1168,"roject/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1351,performance,disk,disk,1351,", `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1675,performance,memor,memory,1675,"ould yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2690,performance,optimiz,optimization,2690,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:82,safety,compl,completes,82,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:235,safety,updat,updated,235,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:650,safety,Compl,Compliant,650,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1240,safety,Updat,UpdateSchema,1240,"any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2511,safety,test,tested,2511,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2541,safety,updat,updated,2541,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:41,security,model,model,41,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:82,security,compl,completes,82,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:119,security,model,model,119,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:223,security,model,model,223,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:235,security,updat,updated,235,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:650,security,Compl,Compliant,650,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1240,security,Updat,UpdateSchema,1240,"any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2541,security,updat,updated,2541,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:2511,testability,test,tested,2511,"ields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [x] Possible optimization: `UnsealPage()` should be a no-op for zero pages; this is to be handled in PR https://github.com/root-project/root/pull/12279. This PR fixes #10020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:384,usability,indicat,indicates,384,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:864,usability,support,supported,864,"[ntuple] Finalize implementation of late model extension (2/2); This pull request completes the implementation of late model extension landed in https://github.com/root-project/root/pull/12376. In particular, it allows the model to be updated at any time, even if entries have been already filled. To do so, a new flag is added to the column description, `kFlagDeferredColumn`, which indicates that the index of the first on-disk element in the column is not zero (i.e., the column was added at a later point during write). If the flag is set, an additional 64bit integer ($firstElementIndex$) specifies the global index of the first stored element. Compliant implementations should yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in by",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12676:1675,usability,memor,memory,1675,"ould yield synthetic data pages made up of `0x00` bytes when trying to read back elements in the range $[0, firstElementIndex-1]$. This ensures zero-initialized values for fields of any supported C++ type, including `std::variant<Ts...>` and collections such as `std::vector<T>`. ## Changes or fixes:. - Allow for including the index of the first element in a column in the column description. This introduces the column flag `kFlagDeferredColumn` which specifies that the column has no on-disk data for elements preceding the given element index. - `RPageSink::UpdateSchema()` now takes an additional argument (firstEntry) that specifies the first entry that stores an on-disk value for the fields in the changeset. The entry index is translated to column element index by `EntryToColumnElementIndex()`. - `RPage::MakePageZero()`: this function returns a page that is comprised of `0x00` bytes only. - Introduce locator type `kTypePageZero`. This locator type represents unmaterialized (i.e., in-memory only) zero pages for deferred columns. - Add `RPageRange::ExtendToFitColumnRange()`: this function extends a RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic `RPageInfo`s as needed to cover the entire range. `RPageInfo`s are constructed to contain as many elements given a page size limit in bytes; the locator for the referenced pages is `kPageZero`. This function is used to make up `RPageRange`s for clusters that contain deferred columns. - Add `RClusterDescriptorBuilder::AddDeferredColumnRanges()`, which makes up `RColumnRange` and `RPageRange`s that make sense for deferred columns that are otherwise missing in a cluster. - RPageStorageFile: add ability to populate the zero page from `kTypePageZero` locators. - RVariantField: allow reading values with dispatch `tag == 0`. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). - [x] RPageStorageDaos: populate the zero page from `kTypePageZero` locators. (for a follow-up PR?). - [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12676
https://github.com/root-project/root/pull/12677:36,availability,error,error,36,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:186,availability,error,errors,186,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:550,availability,error,errors,550,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:42,deployability,log,logging,42,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:231,energy efficiency,current,current,231,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:630,energy efficiency,GPU,GPU,630,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:736,energy efficiency,GPU,GPU,736,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:239,integrability,batch,batchcompure,239,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:600,integrability,Batch,BatchMode,600,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:794,integrability,batch,batchcompute,794,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:467,modifiability,paramet,parameter,467,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:721,modifiability,pac,packing,721,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:36,performance,error,error,36,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:186,performance,error,errors,186,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:239,performance,batch,batchcompure,239,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:550,performance,error,errors,550,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:600,performance,Batch,BatchMode,600,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:630,performance,GPU,GPU,630,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:736,performance,GPU,GPU,736,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:794,performance,batch,batchcompute,794,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:36,safety,error,error,36,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:42,safety,log,logging,42,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:186,safety,error,errors,186,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:550,safety,error,errors,550,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:42,security,log,logging,42,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:42,testability,log,logging,42,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:5,usability,Support,Support,5,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:36,usability,error,error,36,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:186,usability,error,errors,186,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:550,usability,error,errors,550,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:578,usability,help,helps,578,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12677:767,usability,help,helper,767,"[RF] Support pdf normalization with error logging in RooBatchCompute; So far, the pdf normalization could not be done in RooBatchCompute,. because it requires the tracking of evaluation errors. This could not be implemented in the current batchcompure library,. because information could not flow back from the compute functions to. the calling object. This is now made possible by taking the `ExtraArgs`. array by reference, meaning it can also be used as an output parameter. by the compute function to return for example the number of evaluation. errors. This change greatly helps to speed up the BatchMode, expecially on the. GPU because the normalization can now be done on the device. To be able to also do the NaN-packing on the GPU device, the `RooNaNPacker` helper class was moved to `batchcompute`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12677
https://github.com/root-project/root/pull/12678:281,deployability,updat,updated,281,[cppyy] [from upstream] implicit conversion from a tuple of arguments; # This Pull request:. back port to allow `__cast_cpp__ `to return tuple for an implicit temporary if a temporary can be accepted by C++. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12678
https://github.com/root-project/root/pull/12678:33,interoperability,convers,conversion,33,[cppyy] [from upstream] implicit conversion from a tuple of arguments; # This Pull request:. back port to allow `__cast_cpp__ `to return tuple for an implicit temporary if a temporary can be accepted by C++. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12678
https://github.com/root-project/root/pull/12678:251,safety,test,tested,251,[cppyy] [from upstream] implicit conversion from a tuple of arguments; # This Pull request:. back port to allow `__cast_cpp__ `to return tuple for an implicit temporary if a temporary can be accepted by C++. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12678
https://github.com/root-project/root/pull/12678:281,safety,updat,updated,281,[cppyy] [from upstream] implicit conversion from a tuple of arguments; # This Pull request:. back port to allow `__cast_cpp__ `to return tuple for an implicit temporary if a temporary can be accepted by C++. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12678
https://github.com/root-project/root/pull/12678:281,security,updat,updated,281,[cppyy] [from upstream] implicit conversion from a tuple of arguments; # This Pull request:. back port to allow `__cast_cpp__ `to return tuple for an implicit temporary if a temporary can be accepted by C++. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12678
https://github.com/root-project/root/pull/12678:251,testability,test,tested,251,[cppyy] [from upstream] implicit conversion from a tuple of arguments; # This Pull request:. back port to allow `__cast_cpp__ `to return tuple for an implicit temporary if a temporary can be accepted by C++. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12678
https://github.com/root-project/root/issues/12679:0,energy efficiency,Draw,Draw,0,"Draw two TF1 ; When two TF1 are drawn with option SAME the 2nd one might be partially drawn in case . there is a range defined on it. See:. https://root-forum.cern.ch/t/draw-two-tf1/54510/. a better repoducer is:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12679
https://github.com/root-project/root/issues/12679:32,energy efficiency,draw,drawn,32,"Draw two TF1 ; When two TF1 are drawn with option SAME the 2nd one might be partially drawn in case . there is a range defined on it. See:. https://root-forum.cern.ch/t/draw-two-tf1/54510/. a better repoducer is:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12679
https://github.com/root-project/root/issues/12679:86,energy efficiency,draw,drawn,86,"Draw two TF1 ; When two TF1 are drawn with option SAME the 2nd one might be partially drawn in case . there is a range defined on it. See:. https://root-forum.cern.ch/t/draw-two-tf1/54510/. a better repoducer is:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12679
https://github.com/root-project/root/issues/12679:169,energy efficiency,draw,draw-two-,169,"Draw two TF1 ; When two TF1 are drawn with option SAME the 2nd one might be partially drawn in case . there is a range defined on it. See:. https://root-forum.cern.ch/t/draw-two-tf1/54510/. a better repoducer is:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12679
https://github.com/root-project/root/issues/12679:562,energy efficiency,Draw,Draw,562,"Draw two TF1 ; When two TF1 are drawn with option SAME the 2nd one might be partially drawn in case . there is a range defined on it. See:. https://root-forum.cern.ch/t/draw-two-tf1/54510/. a better repoducer is:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12679
https://github.com/root-project/root/issues/12679:579,energy efficiency,Draw,Draw,579,"Draw two TF1 ; When two TF1 are drawn with option SAME the 2nd one might be partially drawn in case . there is a range defined on it. See:. https://root-forum.cern.ch/t/draw-two-tf1/54510/. a better repoducer is:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12679
https://github.com/root-project/root/issues/12680:1007,performance,content,contents,1007,"A ""3D"" vector - vector<vector<vector<>>> - mistreated by TTree Scan and TBrowser; . ### Describe the bug. 1) The TTree::Scan() can't properly display a vector<vector<vector<>>>. It always shows a single element of value 0. 2) The TBrowser shows such vectors as having 0 elements. 3) 1D and 2D vectors work OK. ### Expected behaviour. 1) TTree::Scan() showing all the elements of the 3D vector like for 2D and 1D vector. 2) TBrowser being able to show all the values and proper number of elements of the 3D vector, like for 2D and 1D vectors. ### To Reproduce. Please run the attached macro or store a 3D vector in a TTree. [ttree_vector_bug.zip](https://github.com/root-project/root/files/11268478/ttree_vector_bug.zip). ### Setup. self-compiled ROOT 6.28.00, Fedora 37. ### Additional context. This bug is quite important for 2 reasons:. 1) For users trying to access the TTree with TBrowser the vector seems empty and they think they have the wrong data files. 2) There is no easy way to check the vector contents with Scan() quickly not working, which makes debugging experiment much harder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12680
https://github.com/root-project/root/issues/12680:862,security,access,access,862,"A ""3D"" vector - vector<vector<vector<>>> - mistreated by TTree Scan and TBrowser; . ### Describe the bug. 1) The TTree::Scan() can't properly display a vector<vector<vector<>>>. It always shows a single element of value 0. 2) The TBrowser shows such vectors as having 0 elements. 3) 1D and 2D vectors work OK. ### Expected behaviour. 1) TTree::Scan() showing all the elements of the 3D vector like for 2D and 1D vector. 2) TBrowser being able to show all the values and proper number of elements of the 3D vector, like for 2D and 1D vectors. ### To Reproduce. Please run the attached macro or store a 3D vector in a TTree. [ttree_vector_bug.zip](https://github.com/root-project/root/files/11268478/ttree_vector_bug.zip). ### Setup. self-compiled ROOT 6.28.00, Fedora 37. ### Additional context. This bug is quite important for 2 reasons:. 1) For users trying to access the TTree with TBrowser the vector seems empty and they think they have the wrong data files. 2) There is no easy way to check the vector contents with Scan() quickly not working, which makes debugging experiment much harder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12680
https://github.com/root-project/root/issues/12680:786,testability,context,context,786,"A ""3D"" vector - vector<vector<vector<>>> - mistreated by TTree Scan and TBrowser; . ### Describe the bug. 1) The TTree::Scan() can't properly display a vector<vector<vector<>>>. It always shows a single element of value 0. 2) The TBrowser shows such vectors as having 0 elements. 3) 1D and 2D vectors work OK. ### Expected behaviour. 1) TTree::Scan() showing all the elements of the 3D vector like for 2D and 1D vector. 2) TBrowser being able to show all the values and proper number of elements of the 3D vector, like for 2D and 1D vectors. ### To Reproduce. Please run the attached macro or store a 3D vector in a TTree. [ttree_vector_bug.zip](https://github.com/root-project/root/files/11268478/ttree_vector_bug.zip). ### Setup. self-compiled ROOT 6.28.00, Fedora 37. ### Additional context. This bug is quite important for 2 reasons:. 1) For users trying to access the TTree with TBrowser the vector seems empty and they think they have the wrong data files. 2) There is no easy way to check the vector contents with Scan() quickly not working, which makes debugging experiment much harder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12680
https://github.com/root-project/root/issues/12680:323,usability,behavi,behaviour,323,"A ""3D"" vector - vector<vector<vector<>>> - mistreated by TTree Scan and TBrowser; . ### Describe the bug. 1) The TTree::Scan() can't properly display a vector<vector<vector<>>>. It always shows a single element of value 0. 2) The TBrowser shows such vectors as having 0 elements. 3) 1D and 2D vectors work OK. ### Expected behaviour. 1) TTree::Scan() showing all the elements of the 3D vector like for 2D and 1D vector. 2) TBrowser being able to show all the values and proper number of elements of the 3D vector, like for 2D and 1D vectors. ### To Reproduce. Please run the attached macro or store a 3D vector in a TTree. [ttree_vector_bug.zip](https://github.com/root-project/root/files/11268478/ttree_vector_bug.zip). ### Setup. self-compiled ROOT 6.28.00, Fedora 37. ### Additional context. This bug is quite important for 2 reasons:. 1) For users trying to access the TTree with TBrowser the vector seems empty and they think they have the wrong data files. 2) There is no easy way to check the vector contents with Scan() quickly not working, which makes debugging experiment much harder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12680
https://github.com/root-project/root/issues/12680:846,usability,user,users,846,"A ""3D"" vector - vector<vector<vector<>>> - mistreated by TTree Scan and TBrowser; . ### Describe the bug. 1) The TTree::Scan() can't properly display a vector<vector<vector<>>>. It always shows a single element of value 0. 2) The TBrowser shows such vectors as having 0 elements. 3) 1D and 2D vectors work OK. ### Expected behaviour. 1) TTree::Scan() showing all the elements of the 3D vector like for 2D and 1D vector. 2) TBrowser being able to show all the values and proper number of elements of the 3D vector, like for 2D and 1D vectors. ### To Reproduce. Please run the attached macro or store a 3D vector in a TTree. [ttree_vector_bug.zip](https://github.com/root-project/root/files/11268478/ttree_vector_bug.zip). ### Setup. self-compiled ROOT 6.28.00, Fedora 37. ### Additional context. This bug is quite important for 2 reasons:. 1) For users trying to access the TTree with TBrowser the vector seems empty and they think they have the wrong data files. 2) There is no easy way to check the vector contents with Scan() quickly not working, which makes debugging experiment much harder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12680
https://github.com/root-project/root/pull/12681:2771,availability,state,stateless,2771,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4475,availability,error,error,4475,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:153,deployability,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:821,deployability,patch,patches,821,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1155,deployability,observ,observables,1155," 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1635,deployability,version,version,1635,"o https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1865,deployability,manag,management,1865,"txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1951,deployability,build,buildLoopBegin,1951," 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last no",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2377,deployability,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2608,deployability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2679,deployability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2837,deployability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3309,deployability,manag,management,3309," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3606,deployability,Compos,Composition,3606,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3753,deployability,modul,modules,3753,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3765,deployability,modul,modules,3765,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3822,deployability,modul,modules,3822,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4023,deployability,observ,observables,4023,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4249,deployability,modul,modules,4249,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4363,deployability,build,building,4363,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1367,energy efficiency,Optim,Optimize,1367,". https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1865,energy efficiency,manag,management,1865,"txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3309,energy efficiency,manag,management,3309," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1008,integrability,Batch,BatchMode,1008,"ckports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1132,integrability,Batch,BatchMode,1132,"ter to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1635,integrability,version,version,1635,"o https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1990,integrability,translat,translate,1990," some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2024,integrability,translat,translate,2024,"e squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2377,integrability,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2388,integrability,pub,public,2388,"of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2424,integrability,interfac,interface,2424,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2608,integrability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2679,integrability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2771,integrability,state,stateless,2771,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2837,integrability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3160,integrability,interfac,interface,3160,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3444,integrability,interfac,interface,3444,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4415,integrability,wrap,wrapper,4415,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1795,interoperability,Format,Format,1795,"t are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation de",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1990,interoperability,translat,translate,1990," some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2024,interoperability,translat,translate,2024,"e squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2424,interoperability,interfac,interface,2424,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2608,interoperability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2679,interoperability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2837,interoperability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3160,interoperability,interfac,interface,3160,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3192,interoperability,format,format,3192,"test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3444,interoperability,interfac,interface,3444,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4415,interoperability,wrapper,wrapper,4415,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:901,modifiability,scal,scalar,901,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:908,modifiability,interm,intermediate,908,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:990,modifiability,reu,reuse,990,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1126,modifiability,Reu,Reuse,1126,"d to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c513",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1635,modifiability,version,version,1635,"o https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2377,modifiability,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2424,modifiability,interfac,interface,2424,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2608,modifiability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2679,modifiability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2837,modifiability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3160,modifiability,interfac,interface,3160,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3444,modifiability,interfac,interface,3444,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3606,modifiability,Compos,Composition,3606,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3623,modifiability,inherit,inheritance,3623,"his commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3753,modifiability,modul,modules,3753,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3765,modifiability,modul,modules,3765,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3822,modifiability,modul,modules,3822,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4046,modifiability,paramet,parameter,4046,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4249,modifiability,modul,modules,4249,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4772,modifiability,paramet,parameter,4772,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1008,performance,Batch,BatchMode,1008,"ckports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1132,performance,Batch,BatchMode,1132,"ter to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1367,performance,Optimiz,Optimize,1367,". https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3302,performance,memor,memory,3302,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4475,performance,error,error,4475,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2608,reliability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2679,reliability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2837,reliability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:153,safety,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:821,safety,patch,patches,821,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1740,safety,test,testRooFuncWrapper,1740,"OT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1865,safety,manag,management,1865,"txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1936,safety,Avoid,Avoid,1936," in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2195,safety,test,test,2195,"fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2377,safety,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2718,safety,test,test,2718,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3200,safety,test,testRooDataHist,3200,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3257,safety,test,test,3257,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3309,safety,manag,management,3309," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3560,safety,test,tests,3560,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3574,safety,Test,TestStatistics,3574,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3753,safety,modul,modules,3753,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3765,safety,modul,modules,3765,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3822,safety,modul,modules,3822,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4091,safety,Test,Test,4091,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4135,safety,test,testRooFuncWrapper,4135,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4249,safety,modul,modules,4249,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4475,safety,error,error,4475,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:153,security,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:821,security,patch,patches,821,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2608,security,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2679,security,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2837,security,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1155,testability,observ,observables,1155," 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1740,testability,test,testRooFuncWrapper,1740,"OT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2195,testability,test,test,2195,"fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2377,testability,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2608,testability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2679,testability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2698,testability,mock,mock,2698,"wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2718,testability,test,test,2718,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2837,testability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3200,testability,test,testRooDataHist,3200,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3257,testability,test,test,3257,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3560,testability,test,tests,3560,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3574,testability,Test,TestStatistics,3574,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4023,testability,observ,observables,4023,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4091,testability,Test,Test,4091,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4135,testability,test,testRooFuncWrapper,4135,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:1821,usability,command,command,1821,"hes` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enab",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2571,usability,support,support,2571,"Normalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:2646,usability,support,support,2646,"of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3302,usability,memor,memory,3302,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:3434,usability,minim,minimizer,3434,"mplementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4102,usability,prototyp,prototype,4102,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12681:4475,usability,error,error,4475,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12681
https://github.com/root-project/root/pull/12682:11,energy efficiency,core,core,11,"[RF][math][core] Fix some C++20 warnings; * Fix unused variable warning in `TMPWorkerExecutor` by moving variable in the only code branch where it's actually used. * Fix some warnings about deprecated enum arithmetics by using `constexpr static int` instead of `enum`. * Fix warnings about the deprecation of `volatile` in C++ by not using it. With these changes, I can compile RooFit again without seeing warnings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12682
https://github.com/root-project/root/pull/12682:55,modifiability,variab,variable,55,"[RF][math][core] Fix some C++20 warnings; * Fix unused variable warning in `TMPWorkerExecutor` by moving variable in the only code branch where it's actually used. * Fix some warnings about deprecated enum arithmetics by using `constexpr static int` instead of `enum`. * Fix warnings about the deprecation of `volatile` in C++ by not using it. With these changes, I can compile RooFit again without seeing warnings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12682
https://github.com/root-project/root/pull/12682:105,modifiability,variab,variable,105,"[RF][math][core] Fix some C++20 warnings; * Fix unused variable warning in `TMPWorkerExecutor` by moving variable in the only code branch where it's actually used. * Fix some warnings about deprecated enum arithmetics by using `constexpr static int` instead of `enum`. * Fix warnings about the deprecation of `volatile` in C++ by not using it. With these changes, I can compile RooFit again without seeing warnings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12682
https://github.com/root-project/root/pull/12683:28,interoperability,format,formating,28,[skip-ci] Fix wrong doxygen formating; SetTitle doc was miss-formatted.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12683
https://github.com/root-project/root/pull/12683:61,interoperability,format,formatted,61,[skip-ci] Fix wrong doxygen formating; SetTitle doc was miss-formatted.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12683
https://github.com/root-project/root/issues/12684:237,availability,error,error,237,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:154,deployability,contain,containing,154,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:173,deployability,contain,containing,173,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:270,deployability,Build,BuildOld,270,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:465,deployability,Build,Build,465,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:539,deployability,Build,BuildOld,539,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:716,integrability,pub,public,716,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:237,performance,error,error,237,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:670,performance,memor,memory,670,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:237,safety,error,error,237,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:237,usability,error,error,237,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12684:670,usability,memor,memory,670,"TStreamerInfo mis-handle `std::unique_ptr<std::vector<T>>`; As seen (and worked around) in https://github.com/root-project/root/pull/12503 reading a file containing a class containing a `std::unique_ptr<std::vector<double>>` leads to an error like:. ```. TStreamerInfo::BuildOld: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element. ```. This is technically due to the fact that `TStreamerInfo::Build` calculates (incorrectly) the data member type to be `kAnyp` while `BuildOld` calculates (correctly) it to be `kSTLp`. Reproducer:. ```. // MyClass.h. #ifndef MyClass_h. #define MyClass_h. #include <memory>. #include <vector>. class MyClass. {. public:. std::unique_ptr<std::vector<int>> _vec;. ClassDef(MyClass, 1);. };. #endif. ```. ```. // readMyClass.C. void readMyClass(). {. TFile f(""f.root"", ""read"");. auto obj = f.Get<MyClass>(""obj"");. for(int x : *obj->_vec) {. std::cout << x << std::endl;. }. }. ```. ```. // writeMyClass.C. void writeMyClass(). {. MyClass obj;. obj._vec = std::make_unique<std::vector<int>>();. obj._vec->push_back(1);. obj._vec->push_back(2);. obj._vec->push_back(3);. TFile f(""f.root"", ""recreate"");. f.WriteObject(&obj, ""obj"");. }. ```. ```. root.exe -l -q -e '.L MyClass.h+' -e '.x writeMyClass.C'. root.exe -l -q -e '.L MyClass.h+' -e '.x readMyClass.C'. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12684
https://github.com/root-project/root/issues/12685:678,deployability,fail,failed,678,"`TEnum::GetEnum` does NOT process typedefs; Currently if the parameter to `TEnum::GetEnums` ends in a typedef/alias, it can not find the enums. With the example:. ```. enum EFruit {kApple=78, kBanana=29, kCitrus=34};. // std::vector<EFruit> vec;. using EFruit_t = EFruit;. void repro(). {. auto type = ""std::vector<EFruit>::value_type"";. cout << gInterpreter->ClassInfo_IsEnum(type) << endl;. cout << TEnum::GetEnum(type) << endl;. auto resolved = TClassEdit::ResolveTypedef (type, kTRUE);. cout << TEnum::GetEnum(resolved.c_str()) << endl;. cout << TEnum::GetEnum(""EFruit_t"") << endl;. }. ```. We get:. ```. 1. 0. 0x267f2a0. 0. ```. Where the two '0' indicates that the lookup failed. This is seen in https://github.com/root-project/root/issues/10454 and holds up (per se) https://github.com/root-project/root/pull/11412.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12685
https://github.com/root-project/root/issues/12685:44,energy efficiency,Current,Currently,44,"`TEnum::GetEnum` does NOT process typedefs; Currently if the parameter to `TEnum::GetEnums` ends in a typedef/alias, it can not find the enums. With the example:. ```. enum EFruit {kApple=78, kBanana=29, kCitrus=34};. // std::vector<EFruit> vec;. using EFruit_t = EFruit;. void repro(). {. auto type = ""std::vector<EFruit>::value_type"";. cout << gInterpreter->ClassInfo_IsEnum(type) << endl;. cout << TEnum::GetEnum(type) << endl;. auto resolved = TClassEdit::ResolveTypedef (type, kTRUE);. cout << TEnum::GetEnum(resolved.c_str()) << endl;. cout << TEnum::GetEnum(""EFruit_t"") << endl;. }. ```. We get:. ```. 1. 0. 0x267f2a0. 0. ```. Where the two '0' indicates that the lookup failed. This is seen in https://github.com/root-project/root/issues/10454 and holds up (per se) https://github.com/root-project/root/pull/11412.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12685
https://github.com/root-project/root/issues/12685:61,modifiability,paramet,parameter,61,"`TEnum::GetEnum` does NOT process typedefs; Currently if the parameter to `TEnum::GetEnums` ends in a typedef/alias, it can not find the enums. With the example:. ```. enum EFruit {kApple=78, kBanana=29, kCitrus=34};. // std::vector<EFruit> vec;. using EFruit_t = EFruit;. void repro(). {. auto type = ""std::vector<EFruit>::value_type"";. cout << gInterpreter->ClassInfo_IsEnum(type) << endl;. cout << TEnum::GetEnum(type) << endl;. auto resolved = TClassEdit::ResolveTypedef (type, kTRUE);. cout << TEnum::GetEnum(resolved.c_str()) << endl;. cout << TEnum::GetEnum(""EFruit_t"") << endl;. }. ```. We get:. ```. 1. 0. 0x267f2a0. 0. ```. Where the two '0' indicates that the lookup failed. This is seen in https://github.com/root-project/root/issues/10454 and holds up (per se) https://github.com/root-project/root/pull/11412.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12685
https://github.com/root-project/root/issues/12685:17,reliability,doe,does,17,"`TEnum::GetEnum` does NOT process typedefs; Currently if the parameter to `TEnum::GetEnums` ends in a typedef/alias, it can not find the enums. With the example:. ```. enum EFruit {kApple=78, kBanana=29, kCitrus=34};. // std::vector<EFruit> vec;. using EFruit_t = EFruit;. void repro(). {. auto type = ""std::vector<EFruit>::value_type"";. cout << gInterpreter->ClassInfo_IsEnum(type) << endl;. cout << TEnum::GetEnum(type) << endl;. auto resolved = TClassEdit::ResolveTypedef (type, kTRUE);. cout << TEnum::GetEnum(resolved.c_str()) << endl;. cout << TEnum::GetEnum(""EFruit_t"") << endl;. }. ```. We get:. ```. 1. 0. 0x267f2a0. 0. ```. Where the two '0' indicates that the lookup failed. This is seen in https://github.com/root-project/root/issues/10454 and holds up (per se) https://github.com/root-project/root/pull/11412.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12685
https://github.com/root-project/root/issues/12685:678,reliability,fail,failed,678,"`TEnum::GetEnum` does NOT process typedefs; Currently if the parameter to `TEnum::GetEnums` ends in a typedef/alias, it can not find the enums. With the example:. ```. enum EFruit {kApple=78, kBanana=29, kCitrus=34};. // std::vector<EFruit> vec;. using EFruit_t = EFruit;. void repro(). {. auto type = ""std::vector<EFruit>::value_type"";. cout << gInterpreter->ClassInfo_IsEnum(type) << endl;. cout << TEnum::GetEnum(type) << endl;. auto resolved = TClassEdit::ResolveTypedef (type, kTRUE);. cout << TEnum::GetEnum(resolved.c_str()) << endl;. cout << TEnum::GetEnum(""EFruit_t"") << endl;. }. ```. We get:. ```. 1. 0. 0x267f2a0. 0. ```. Where the two '0' indicates that the lookup failed. This is seen in https://github.com/root-project/root/issues/10454 and holds up (per se) https://github.com/root-project/root/pull/11412.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12685
https://github.com/root-project/root/issues/12685:652,usability,indicat,indicates,652,"`TEnum::GetEnum` does NOT process typedefs; Currently if the parameter to `TEnum::GetEnums` ends in a typedef/alias, it can not find the enums. With the example:. ```. enum EFruit {kApple=78, kBanana=29, kCitrus=34};. // std::vector<EFruit> vec;. using EFruit_t = EFruit;. void repro(). {. auto type = ""std::vector<EFruit>::value_type"";. cout << gInterpreter->ClassInfo_IsEnum(type) << endl;. cout << TEnum::GetEnum(type) << endl;. auto resolved = TClassEdit::ResolveTypedef (type, kTRUE);. cout << TEnum::GetEnum(resolved.c_str()) << endl;. cout << TEnum::GetEnum(""EFruit_t"") << endl;. }. ```. We get:. ```. 1. 0. 0x267f2a0. 0. ```. Where the two '0' indicates that the lookup failed. This is seen in https://github.com/root-project/root/issues/10454 and holds up (per se) https://github.com/root-project/root/pull/11412.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12685
https://github.com/root-project/root/issues/12686:131,deployability,build,build,131,"Some warnings in argparse2help with Python 3.12; some warnings in `argparse2help` with Python 3.12 . ```. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4886/9448] Generating ../../man/hadd.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4890/9448] Generating ../../man/rootcling.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6779/9448] Generating ../../ginclude/rootclingCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6833/9448] Generating ../ginclude/rootCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12686
https://github.com/root-project/root/issues/12686:308,deployability,build,build,308,"Some warnings in argparse2help with Python 3.12; some warnings in `argparse2help` with Python 3.12 . ```. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4886/9448] Generating ../../man/hadd.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4890/9448] Generating ../../man/rootcling.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6779/9448] Generating ../../ginclude/rootclingCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6833/9448] Generating ../ginclude/rootCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12686
https://github.com/root-project/root/issues/12686:490,deployability,build,build,490,"Some warnings in argparse2help with Python 3.12; some warnings in `argparse2help` with Python 3.12 . ```. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4886/9448] Generating ../../man/hadd.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4890/9448] Generating ../../man/rootcling.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6779/9448] Generating ../../ginclude/rootclingCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6833/9448] Generating ../ginclude/rootCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12686
https://github.com/root-project/root/issues/12686:699,deployability,build,build,699,"Some warnings in argparse2help with Python 3.12; some warnings in `argparse2help` with Python 3.12 . ```. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4886/9448] Generating ../../man/hadd.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4890/9448] Generating ../../man/rootcling.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6779/9448] Generating ../../ginclude/rootclingCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6833/9448] Generating ../ginclude/rootCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12686
https://github.com/root-project/root/issues/12686:900,deployability,build,build,900,"Some warnings in argparse2help with Python 3.12; some warnings in `argparse2help` with Python 3.12 . ```. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4886/9448] Generating ../../man/hadd.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [4890/9448] Generating ../../man/rootcling.1. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6779/9448] Generating ../../ginclude/rootclingCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). [6833/9448] Generating ../ginclude/rootCommandLineOptionsHelp.h. /home/blue/ROOT/bulk-dbg/build/misc/argparse2help.py:57: SyntaxWarning: invalid escape sequence '\ '. options = ""\ "".join(listOptions). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12686
https://github.com/root-project/root/pull/12687:9,deployability,build,build,9,"[RF] Fix build due to changed compute() signature; There was a bad interaction between commit 8a67cf611c changing the signature of `compute()` to take a non-const reference, requiring an lvalue, and commit aa47d71aae introducing a new call to that same function with a temporary argument. Fix it in the same way as other call sites were changed in commit 8a67cf611c, by introducing a local variable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12687
https://github.com/root-project/root/pull/12687:390,modifiability,variab,variable,390,"[RF] Fix build due to changed compute() signature; There was a bad interaction between commit 8a67cf611c changing the signature of `compute()` to take a non-const reference, requiring an lvalue, and commit aa47d71aae introducing a new call to that same function with a temporary argument. Fix it in the same way as other call sites were changed in commit 8a67cf611c, by introducing a local variable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12687
https://github.com/root-project/root/pull/12687:40,security,sign,signature,40,"[RF] Fix build due to changed compute() signature; There was a bad interaction between commit 8a67cf611c changing the signature of `compute()` to take a non-const reference, requiring an lvalue, and commit aa47d71aae introducing a new call to that same function with a temporary argument. Fix it in the same way as other call sites were changed in commit 8a67cf611c, by introducing a local variable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12687
https://github.com/root-project/root/pull/12687:118,security,sign,signature,118,"[RF] Fix build due to changed compute() signature; There was a bad interaction between commit 8a67cf611c changing the signature of `compute()` to take a non-const reference, requiring an lvalue, and commit aa47d71aae introducing a new call to that same function with a temporary argument. Fix it in the same way as other call sites were changed in commit 8a67cf611c, by introducing a local variable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12687
https://github.com/root-project/root/pull/12687:67,usability,interact,interaction,67,"[RF] Fix build due to changed compute() signature; There was a bad interaction between commit 8a67cf611c changing the signature of `compute()` to take a non-const reference, requiring an lvalue, and commit aa47d71aae introducing a new call to that same function with a temporary argument. Fix it in the same way as other call sites were changed in commit 8a67cf611c, by introducing a local variable.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12687
https://github.com/root-project/root/pull/12688:58,deployability,version,version,58,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:73,deployability,version,version,73,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:141,deployability,releas,released,141,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:159,deployability,log,log,159,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:224,deployability,releas,releases,224,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:20,integrability,pub,publish-test-result-action,20,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:58,integrability,version,version,58,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:73,integrability,version,version,73,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:100,integrability,pub,publish-unit-test-result-action,100,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:192,integrability,pub,publish-unit-test-result-action,192,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:316,integrability,pub,publish-unit-test-result-action,316,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:58,modifiability,version,version,58,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:73,modifiability,version,version,73,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:260,performance,time,times,260,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:28,safety,test,test-result-action,28,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:113,safety,test,test-result-action,113,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:159,safety,log,log,159,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:205,safety,test,test-result-action,205,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:255,safety,test,test,255,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:329,safety,test,test-result-action,329,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:159,security,log,log,159,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:28,testability,test,test-result-action,28,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:108,testability,unit,unit-test-result-action,108,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:159,testability,log,log,159,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:200,testability,unit,unit-test-result-action,200,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:255,testability,test,test,255,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12688:324,testability,unit,unit-test-result-action,324,"[CI] Bump `EnricoMi/publish-test-result-action` to latest version; . New version v2.7.0 of EnricoMi/publish-unit-test-result-action was just released ([change log](https://github.com/EnricoMi/publish-unit-test-result-action/releases/tag/v2.7.0)), it adds test times to case annotations:. https://github.com/EnricoMi/publish-unit-test-result-action/issues/431. Thanks @EnricoMi!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12688
https://github.com/root-project/root/pull/12689:222,availability,error,errors,222,"[ntuple] Fix mismatch class vs struct for RNTupleModelChangeset; Clang complains:. ```. warning: 'RNTupleModelChangeset' defined as a struct here but previously declared as a class; this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12689
https://github.com/root-project/root/pull/12689:13,interoperability,mismatch,mismatch,13,"[ntuple] Fix mismatch class vs struct for RNTupleModelChangeset; Clang complains:. ```. warning: 'RNTupleModelChangeset' defined as a struct here but previously declared as a class; this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12689
https://github.com/root-project/root/pull/12689:222,performance,error,errors,222,"[ntuple] Fix mismatch class vs struct for RNTupleModelChangeset; Clang complains:. ```. warning: 'RNTupleModelChangeset' defined as a struct here but previously declared as a class; this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12689
https://github.com/root-project/root/pull/12689:71,safety,compl,complains,71,"[ntuple] Fix mismatch class vs struct for RNTupleModelChangeset; Clang complains:. ```. warning: 'RNTupleModelChangeset' defined as a struct here but previously declared as a class; this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12689
https://github.com/root-project/root/pull/12689:190,safety,valid,valid,190,"[ntuple] Fix mismatch class vs struct for RNTupleModelChangeset; Clang complains:. ```. warning: 'RNTupleModelChangeset' defined as a struct here but previously declared as a class; this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12689
https://github.com/root-project/root/pull/12689:222,safety,error,errors,222,"[ntuple] Fix mismatch class vs struct for RNTupleModelChangeset; Clang complains:. ```. warning: 'RNTupleModelChangeset' defined as a struct here but previously declared as a class; this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12689
https://github.com/root-project/root/pull/12689:71,security,compl,complains,71,"[ntuple] Fix mismatch class vs struct for RNTupleModelChangeset; Clang complains:. ```. warning: 'RNTupleModelChangeset' defined as a struct here but previously declared as a class; this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12689
https://github.com/root-project/root/pull/12689:222,usability,error,errors,222,"[ntuple] Fix mismatch class vs struct for RNTupleModelChangeset; Clang complains:. ```. warning: 'RNTupleModelChangeset' defined as a struct here but previously declared as a class; this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12689
https://github.com/root-project/root/pull/12690:149,deployability,manag,manages,149,"[RF] Support RooNLLVarNew on the GPU; The BatchMode is invoked differently since ROOT 6.26, with a new NLL class and the new RooFitDriver class that manages the evalutaion of the computation graph.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12690
https://github.com/root-project/root/pull/12690:33,energy efficiency,GPU,GPU,33,"[RF] Support RooNLLVarNew on the GPU; The BatchMode is invoked differently since ROOT 6.26, with a new NLL class and the new RooFitDriver class that manages the evalutaion of the computation graph.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12690
https://github.com/root-project/root/pull/12690:149,energy efficiency,manag,manages,149,"[RF] Support RooNLLVarNew on the GPU; The BatchMode is invoked differently since ROOT 6.26, with a new NLL class and the new RooFitDriver class that manages the evalutaion of the computation graph.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12690
https://github.com/root-project/root/pull/12690:42,integrability,Batch,BatchMode,42,"[RF] Support RooNLLVarNew on the GPU; The BatchMode is invoked differently since ROOT 6.26, with a new NLL class and the new RooFitDriver class that manages the evalutaion of the computation graph.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12690
https://github.com/root-project/root/pull/12690:33,performance,GPU,GPU,33,"[RF] Support RooNLLVarNew on the GPU; The BatchMode is invoked differently since ROOT 6.26, with a new NLL class and the new RooFitDriver class that manages the evalutaion of the computation graph.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12690
https://github.com/root-project/root/pull/12690:42,performance,Batch,BatchMode,42,"[RF] Support RooNLLVarNew on the GPU; The BatchMode is invoked differently since ROOT 6.26, with a new NLL class and the new RooFitDriver class that manages the evalutaion of the computation graph.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12690
https://github.com/root-project/root/pull/12690:149,safety,manag,manages,149,"[RF] Support RooNLLVarNew on the GPU; The BatchMode is invoked differently since ROOT 6.26, with a new NLL class and the new RooFitDriver class that manages the evalutaion of the computation graph.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12690
https://github.com/root-project/root/pull/12690:5,usability,Support,Support,5,"[RF] Support RooNLLVarNew on the GPU; The BatchMode is invoked differently since ROOT 6.26, with a new NLL class and the new RooFitDriver class that manages the evalutaion of the computation graph.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12690
https://github.com/root-project/root/pull/12691:2771,availability,state,stateless,2771,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4475,availability,error,error,4475,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:153,deployability,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:821,deployability,patch,patches,821,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1155,deployability,observ,observables,1155," 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1635,deployability,version,version,1635,"o https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1865,deployability,manag,management,1865,"txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1951,deployability,build,buildLoopBegin,1951," 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last no",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2377,deployability,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2608,deployability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2679,deployability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2837,deployability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3309,deployability,manag,management,3309," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3606,deployability,Compos,Composition,3606,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3753,deployability,modul,modules,3753,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3765,deployability,modul,modules,3765,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3822,deployability,modul,modules,3822,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4023,deployability,observ,observables,4023,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4249,deployability,modul,modules,4249,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4363,deployability,build,building,4363,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1367,energy efficiency,Optim,Optimize,1367,". https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1865,energy efficiency,manag,management,1865,"txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3309,energy efficiency,manag,management,3309," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1008,integrability,Batch,BatchMode,1008,"ckports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1132,integrability,Batch,BatchMode,1132,"ter to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1635,integrability,version,version,1635,"o https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1990,integrability,translat,translate,1990," some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2024,integrability,translat,translate,2024,"e squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2377,integrability,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2388,integrability,pub,public,2388,"of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2424,integrability,interfac,interface,2424,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2608,integrability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2679,integrability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2771,integrability,state,stateless,2771,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2837,integrability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3160,integrability,interfac,interface,3160,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3444,integrability,interfac,interface,3444,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4415,integrability,wrap,wrapper,4415,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1795,interoperability,Format,Format,1795,"t are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation de",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1990,interoperability,translat,translate,1990," some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2024,interoperability,translat,translate,2024,"e squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2424,interoperability,interfac,interface,2424,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2608,interoperability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2679,interoperability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2837,interoperability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3160,interoperability,interfac,interface,3160,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3192,interoperability,format,format,3192,"test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3444,interoperability,interfac,interface,3444,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4415,interoperability,wrapper,wrapper,4415,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:901,modifiability,scal,scalar,901,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:908,modifiability,interm,intermediate,908,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:990,modifiability,reu,reuse,990,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1126,modifiability,Reu,Reuse,1126,"d to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c513",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1635,modifiability,version,version,1635,"o https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2377,modifiability,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2424,modifiability,interfac,interface,2424,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2608,modifiability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2679,modifiability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2837,modifiability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3160,modifiability,interfac,interface,3160,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3444,modifiability,interfac,interface,3444,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3606,modifiability,Compos,Composition,3606,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3623,modifiability,inherit,inheritance,3623,"his commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3753,modifiability,modul,modules,3753,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3765,modifiability,modul,modules,3765,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3822,modifiability,modul,modules,3822,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4046,modifiability,paramet,parameter,4046,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4249,modifiability,modul,modules,4249,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4772,modifiability,paramet,parameter,4772,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1008,performance,Batch,BatchMode,1008,"ckports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1132,performance,Batch,BatchMode,1132,"ter to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1367,performance,Optimiz,Optimize,1367,". https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3302,performance,memor,memory,3302,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4475,performance,error,error,4475,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2608,reliability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2679,reliability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2837,reliability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:153,safety,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:821,safety,patch,patches,821,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1740,safety,test,testRooFuncWrapper,1740,"OT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1865,safety,manag,management,1865,"txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1936,safety,Avoid,Avoid,1936," in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2195,safety,test,test,2195,"fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2377,safety,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2718,safety,test,test,2718,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3200,safety,test,testRooDataHist,3200,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3257,safety,test,test,3257,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3309,safety,manag,management,3309," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3560,safety,test,tests,3560,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3574,safety,Test,TestStatistics,3574,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3753,safety,modul,modules,3753,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3765,safety,modul,modules,3765,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3822,safety,modul,modules,3822,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4091,safety,Test,Test,4091,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4135,safety,test,testRooFuncWrapper,4135,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4249,safety,modul,modules,4249,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4475,safety,error,error,4475,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:153,security,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:821,security,patch,patches,821,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 16; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2608,security,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2679,security,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2837,security,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1155,testability,observ,observables,1155," 1. https://github.com/root-project/root/pull/12640. 2. https://github.com/root-project/root/pull/12638. 3. https://github.com/root-project/root/pull/12636. 4. https://github.com/root-project/root/pull/12614. 5. https://github.com/root-project/root/pull/12643. 6. https://github.com/root-project/root/pull/12641. 7. https://github.com/root-project/root/pull/12647. 8. https://github.com/root-project/root/pull/12660. 9. https://github.com/root-project/root/pull/12668. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1740,testability,test,testRooFuncWrapper,1740,"OT `master` (as of `4afc9f56bb`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2195,testability,test,test,2195,"fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2377,testability,depend,dependency,2377,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2608,testability,integr,integrals,2608,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2679,testability,integr,integrals,2679,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2698,testability,mock,mock,2698,"wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2718,testability,test,test,2718,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2837,testability,integr,integration,2837,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3200,testability,test,testRooDataHist,3200,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3257,testability,test,test,3257,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3560,testability,test,tests,3560,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3574,testability,Test,TestStatistics,3574,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4023,testability,observ,observables,4023,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4091,testability,Test,Test,4091,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4135,testability,test,testRooFuncWrapper,4135,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:1821,usability,command,command,1821,"hes` (as of `to fill out after merging`). ```txt. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enab",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2571,usability,support,support,2571,"Normalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:2646,usability,support,support,2646,"of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3302,usability,memor,memory,3302,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:3434,usability,minim,minimizer,3434,"mplementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4102,usability,prototyp,prototype,4102,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12691:4475,usability,error,error,4475,"er with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12691
https://github.com/root-project/root/pull/12692:18,reliability,diagno,diagnostics,18,"[DF] Re-introduce diagnostics for Define expr returning void; The fallback DefineImpl overload that was supposed to fire an helpful static_assert in this case was out of sync with the main overload, so it could not do its job.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12692
https://github.com/root-project/root/pull/12692:18,testability,diagno,diagnostics,18,"[DF] Re-introduce diagnostics for Define expr returning void; The fallback DefineImpl overload that was supposed to fire an helpful static_assert in this case was out of sync with the main overload, so it could not do its job.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12692
https://github.com/root-project/root/pull/12692:124,usability,help,helpful,124,"[DF] Re-introduce diagnostics for Define expr returning void; The fallback DefineImpl overload that was supposed to fire an helpful static_assert in this case was out of sync with the main overload, so it could not do its job.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12692
https://github.com/root-project/root/pull/12694:88,energy efficiency,draw,drawiing,88,"Fix for TF1::SetRangerUser; Fix https://github.com/root-project/root/issues/12679. When drawiing 2 TF1 with different ranges the 2nd one (drawn iwth SAME) was not correct. Reproducer:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12694
https://github.com/root-project/root/pull/12694:138,energy efficiency,draw,drawn,138,"Fix for TF1::SetRangerUser; Fix https://github.com/root-project/root/issues/12679. When drawiing 2 TF1 with different ranges the 2nd one (drawn iwth SAME) was not correct. Reproducer:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12694
https://github.com/root-project/root/pull/12694:533,energy efficiency,Draw,Draw,533,"Fix for TF1::SetRangerUser; Fix https://github.com/root-project/root/issues/12679. When drawiing 2 TF1 with different ranges the 2nd one (drawn iwth SAME) was not correct. Reproducer:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12694
https://github.com/root-project/root/pull/12694:550,energy efficiency,Draw,Draw,550,"Fix for TF1::SetRangerUser; Fix https://github.com/root-project/root/issues/12679. When drawiing 2 TF1 with different ranges the 2nd one (drawn iwth SAME) was not correct. Reproducer:. ```. {. auto C = new TCanvas();. auto f1 = new TF1(""f1"",""1 + 0.5*cos(30*x)"",2.5,4);. f1->SetNpx(250);. f1->GetXaxis()->SetRangeUser(3,3.5);. f1->SetMarkerStyle(20);. f1->SetMarkerColor(2);. auto f2 = new TF1(""f2"",""1 + 0.5*cos(30*x)"",2.5,4);. f2->SetNpx(250);. f2->GetXaxis()->SetRangeUser(3.3,3.4);. f2->SetLineColor(4);. f2->SetLineWidth(4);. f1->Draw("" p"");. f2->Draw(""same L"");. C->SetGridx();. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12694
https://github.com/root-project/root/pull/12695:239,availability,servic,services,239,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:532,availability,error,error,532,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:863,availability,error,error,863,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:186,deployability,build,build,186,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:239,deployability,servic,services,239,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:631,deployability,stack,stack,631,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:207,integrability,buffer,buffer-overflow,207,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:239,integrability,servic,services,239,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:538,integrability,messag,message,538,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:538,interoperability,messag,message,538,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:239,modifiability,servic,services,239,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:532,performance,error,error,532,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:703,performance,perform,perform,703,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:863,performance,error,error,863,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:766,reliability,doe,does,766,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:340,safety,test,testReport,340,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:532,safety,error,error,532,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:863,safety,error,error,863,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:340,testability,test,testReport,340,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:637,testability,trace,trace,637,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:532,usability,error,error,532,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:703,usability,perform,perform,703,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12695:863,usability,error,error,863,"Fix to https://github.com/root-project/root/pull/12650; Address: https://github.com/root-project/root/pull/12650#issuecomment-1517450219. From @hahnjo:. Hi @pcanal, our AddressSanitizer build reports a heap-buffer-overflow: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit https://github.com/root-project/root/commit/2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does TMath::BinarySearch return in case the element is not found? Answer: yep it was missing the error handling (return value of -1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12695
https://github.com/root-project/root/pull/12696:20,availability,error,error,20,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:207,availability,error,error,207,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:63,energy efficiency,load,loaded,63,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:113,energy efficiency,load,loads,113,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:171,energy efficiency,CPU,CPU,171,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:240,energy efficiency,load,loaded,240,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:325,energy efficiency,load,loaded,325,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:443,energy efficiency,Load,LoadMacro,443,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:498,energy efficiency,load,loaded,498,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:656,energy efficiency,load,loaded,656,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:793,energy efficiency,load,loaded-before-roofit-initialisation-began,793,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:581,integrability,batch,batchcompute,581,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:20,performance,error,error,20,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:63,performance,load,loaded,63,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:113,performance,load,loads,113,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:128,performance,perform,performant,128,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:171,performance,CPU,CPU,171,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:207,performance,error,error,207,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:240,performance,load,loaded,240,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:325,performance,load,loaded,325,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:443,performance,Load,LoadMacro,443,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:498,performance,load,loaded,498,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:516,performance,time,time,516,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:581,performance,batch,batchcompute,581,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:656,performance,load,loaded,656,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:793,performance,load,loaded-before-roofit-initialisation-began,793,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:20,safety,error,error,20,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:207,safety,error,error,207,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:613,safety,except,exception,613,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:20,usability,error,error,20,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:128,usability,perform,performant,128,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:175,usability,support,supports,175,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12696:207,usability,error,error,207,"[RF] Don't throw an error if `roobatchcompute` lib was already loaded; The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via. `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:. https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12696
https://github.com/root-project/root/pull/12697:412,availability,error,error,412,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:153,deployability,fail,fails,153,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:306,deployability,stack,stackoverflow,306,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:449,deployability,build,builds,449,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:767,interoperability,convers,conversion,767,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:1207,interoperability,convers,conversion,1207,"nter constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:412,performance,error,error,412,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:153,reliability,fail,fails,153,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:412,safety,error,error,412,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:3945,safety,test,tested,3945,"clude/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:420:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(const array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:400:41: note: candidate constructor not viable: requires 0 arguments, but 2 were provided. _LIBCPP_INLINE_VISIBILITY constexpr span() noexcept : __data{nullptr}, __size{0} {}. ```. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:3945,testability,test,tested,3945,"clude/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:420:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(const array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:400:41: note: candidate constructor not viable: requires 0 arguments, but 2 were provided. _LIBCPP_INLINE_VISIBILITY constexpr span() noexcept : __data{nullptr}, __size{0} {}. ```. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:412,usability,error,error,412,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:649,usability,Command,CommandLineTools,649,"[ntuple][cxx20] RNTupleSerialize: do not use iterators to construct `std::span`; Constructing a `std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:1089,usability,Command,CommandLineTools,1089,"std::span<T>` from a pair of `std::vector<T>::iterator` fails in Apple clang with libc++. Revert to the pointer/pointer constructor, which should work in both GCC/clang and libstdc++/libc++. See also: https://stackoverflow.com/questions/72935737/stdspan-on-apple-clang-cant-be-constructed. This fixes the following error seen in the nighlies for cxx20 builds. ```. std::span<const DescriptorId_t> fieldList{onDiskFields.begin() + fieldListOffset, onDiskFields.end()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:1551,usability,Command,CommandLineTools,1551,"d()};. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:405:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:1924,usability,Command,CommandLineTools,1924," *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:406:41: note: candidate constructor not viable: no known conversion from 'std::__wrap_iter<const unsigned long long *>' to 'std::span<const unsigned long long, 18446744073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 ar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:2308,usability,Command,CommandLineTools,2308,"44073709551615>::pointer' (aka 'const unsigned long long *') for 1st argument. _LIBCPP_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:2549,usability,Command,CommandLineTools,2549,"dLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:424:19: note: candidate template ignored: requirement '__is_span_compatible_container<std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:420:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. const",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:2772,usability,Command,CommandLineTools,2772,"ue' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span( _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:420:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(const array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:400:41: note: candidate constructor n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:3062,usability,Command,CommandLineTools,3062,"clude/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:420:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(const array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:400:41: note: candidate constructor not viable: requires 0 arguments, but 2 were provided. _LIBCPP_INLINE_VISIBILITY constexpr span() noexcept : __data{nullptr}, __size{0} {}. ```. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:3369,usability,Command,CommandLineTools,3369,"clude/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:420:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(const array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:400:41: note: candidate constructor not viable: requires 0 arguments, but 2 were provided. _LIBCPP_INLINE_VISIBILITY constexpr span() noexcept : __data{nullptr}, __size{0} {}. ```. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/pull/12697:3682,usability,Command,CommandLineTools,3682,"clude/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]. constexpr span(const _Container& __c,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'. constexpr span(const span<_OtherElementType, _OtherExtent>& __other,. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided. constexpr span (const span&) noexcept = default;. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:420:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided. constexpr span(const array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}. ^. /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:400:41: note: candidate constructor not viable: requires 0 arguments, but 2 were provided. _LIBCPP_INLINE_VISIBILITY constexpr span() noexcept : __data{nullptr}, __size{0} {}. ```. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12697
https://github.com/root-project/root/issues/12698:883,availability,Operat,Operating,883,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:71,deployability,build,builds,71,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:201,deployability,build,builds,201,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:288,deployability,build,builds,288,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:369,deployability,build,build,369,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:587,deployability,build,build,587,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:782,deployability,build,builds,782,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:863,deployability,version,version,863,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:1,energy efficiency,core,core,1,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:863,integrability,version,version,863,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:863,modifiability,version,version,863,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:375,reliability,doe,does,375,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:610,reliability,doe,does,610,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:1007,testability,context,context,1007,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/issues/12698:767,usability,behavi,behavior,767,"[core] Difference in `typedef`/`using` resolution in Windows and Linux builds; ### Describe the bug. As seen as part of https://github.com/root-project/root/pull/12657 (which fixed an issue on Windows builds), `TClassEdit::ResolveTypedef()` returns different results in Windows and Linux builds. This should be investigated. The issue can be easily reproduced: a Linux build does not resolve the `using` type alias, as seen below. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::ClusterSize_t"". ```. whereas a Windows build, for some reason does,. ```c++. root [0] TClassEdit::ResolveTypedef(""ROOT::Experimental::ClusterSize_t""). (std::string) ""ROOT::Experimental::RClusterSize"". ```. ### Expected behavior. Both builds should be probably resolving the `using ` declaration. ### Setup. 1. ROOT version: master. 2. Operating system: Archlinux x86_64 (GNU/Linux), and Microsoft Windows x86_64 built from the `master` branch. ### Additional context. `ROOT::Experimental::ClusterSize_t` is an alias of type `ROOT::Experimental::RClusterSize` (see https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx#L63)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12698
https://github.com/root-project/root/pull/12699:160,deployability,integr,integration,160,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:287,deployability,integr,integration,287,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:372,deployability,integr,integration,372,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:412,deployability,integr,integral,412,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:559,deployability,integr,integration,559,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:160,integrability,integr,integration,160,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:287,integrability,integr,integration,287,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:372,integrability,integr,integration,372,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:412,integrability,integr,integral,412,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:559,integrability,integr,integration,559,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:160,interoperability,integr,integration,160,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:287,interoperability,integr,integration,287,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:372,interoperability,integr,integration,372,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:412,interoperability,integr,integral,412,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:559,interoperability,integr,integration,559,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:31,modifiability,variab,variable,31,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:160,modifiability,integr,integration,160,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:172,modifiability,variab,variables,172,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:287,modifiability,integr,integration,287,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:299,modifiability,variab,variables,299,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:372,modifiability,integr,integration,372,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:384,modifiability,variab,variables,384,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:412,modifiability,integr,integral,412,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:559,modifiability,integr,integration,559,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:571,modifiability,variab,variables,571,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:160,reliability,integr,integration,160,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:287,reliability,integr,integration,287,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:340,reliability,doe,doesn,340,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:372,reliability,integr,integration,372,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:412,reliability,integr,integral,412,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:559,reliability,integr,integration,559,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:160,security,integr,integration,160,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:287,security,integr,integration,287,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:372,security,integr,integration,372,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:412,security,integr,integral,412,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:559,security,integr,integration,559,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:160,testability,integr,integration,160,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:287,testability,integr,integration,287,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:372,testability,integr,integration,372,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:412,testability,integr,integral,412,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:559,testability,integr,integration,559,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12699:639,usability,Close,Closes,639,"[RF] Sopport `RooRealIntegral` variable re-expression also for clones; In the RooRealIntegral constructor, there is a code section to figure out if the list of integration variables can be re-expressed in lvalues that are higher in the expression tree. To check this, the clients of the integration variables are followed recursively. This doesn't work if *copies* of the integration variables are passes to the integral, because they have no clients. Therefore, when filling the initial list of leaf servers, they need to be filled with the instances of the integration variables that are in the actual computation graph of the function. Closes #12646.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12699
https://github.com/root-project/root/pull/12700:7,deployability,Updat,Updated,7,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:70,deployability,Updat,Updates,70,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:305,deployability,updat,updated,305,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:7,safety,Updat,Updated,7,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:70,safety,Updat,Updates,70,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:275,safety,test,tested,275,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:305,safety,updat,updated,305,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:7,security,Updat,Updated,7,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:70,security,Updat,Updates,70,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:305,security,updat,updated,305,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:275,testability,test,tested,275,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:101,usability,document,documentation,101,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/pull/12700:231,usability,document,documentation,231,[geom] Updated reference docs for hyperboloid.; # This Pull request:. Updates the TGeoHype reference documentation. ## Changes or fixes:. The definition of stin/stout were incorrect. https://root-forum.cern.ch/t/tgeohype-reference-documentation/54605/2. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12700
https://github.com/root-project/root/issues/12701:1453,availability,Operat,Operating,1453,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1528,availability,down,download,1528,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:194,deployability,version,version,194,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:329,deployability,modul,modules,329,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:412,deployability,modul,modules,412,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:538,deployability,build,build,538,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:706,deployability,build,build,706,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1002,deployability,build,build,1002,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1078,deployability,instal,installed,1078,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1094,deployability,instal,install,1094,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1282,deployability,Build,Build,1282,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1292,deployability,instal,install,1292,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1441,deployability,version,version,1441,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1510,deployability,instal,install,1510,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1572,deployability,version,version,1572,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1616,deployability,version,version,1616,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:194,integrability,version,version,194,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1441,integrability,version,version,1441,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1572,integrability,version,version,1572,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1616,integrability,version,version,1616,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1790,integrability,sub,subsequently,1790,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1821,integrability,repositor,repository,1821,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1821,interoperability,repositor,repository,1821,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:194,modifiability,version,version,194,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:299,modifiability,pac,package,299,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:329,modifiability,modul,modules,329,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:412,modifiability,modul,modules,412,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1441,modifiability,version,version,1441,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1572,modifiability,version,version,1572,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1616,modifiability,version,version,1616,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:5,reliability,doe,does,5,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:137,reliability,doe,does,137,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:329,safety,modul,modules,329,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:412,safety,modul,modules,412,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:645,safety,detect,detected,645,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:956,safety,input,input,956,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:645,security,detect,detected,645,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1172,testability,verif,verify,1172,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1692,testability,context,context,1692,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1721,testability,context,context,1721,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:50,usability,support,supported,50,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:162,usability,support,support,162,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:476,usability,support,supported,476,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:500,usability,behavi,behavior,500,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:581,usability,support,supported,581,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:811,usability,behavi,behavior,811,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:956,usability,input,input,956,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1209,usability,support,supported,1209,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1367,usability,confirm,confirm,1367,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/issues/12701:1629,usability,support,supports,1629,"ROOT does not properly recognize if `io_uring` is supported; - [x] Checked for duplicates. ### Describe the bug. Alma Linux 9 by default does not have `io_uring` support, even though its kernel version is recent enough (5.14). ROOT only checks if `io_uring` is present by checking if the `liburing` package is present (in [cmake/modules/Findliburing.cmake](https://github.com/root-project/root/blob/master/cmake/modules/Findliburing.cmake)), but not if `io_uring` is actually supported. ### Expected behavior. ~ROOT should not be able to build with the `uring` option if it is not supported by the kernel~ . The presence of `io_uring` should be detected at runtime and a warning could be shown if ROOT was build with `uring` even though `io_uring` is not present. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. On a AL9 instance with `liburing` installed (`dnf install liburing`), run. ```. grep -i uring /boot/config-$(uname -r). ```. to verify that `io_uring` is indeed not supported. The output should be. ```. # CONFIG_IO_URING is not set. ```. Build and install ROOT with `-During=on`. Run. ```. root-config --has-uring. ```. to confirm ROOT was in fact built with this option. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT version: master (but most likely every ROOT version that supports the `uring` option). OS: Alma Linux 9. ### Additional context. <!--. Add any other context about the problem here. -->. A similar issue was opened (and subsequently fixed) in the ZFS repository: https://github.com/openzfs/zfs/issues/13648",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12701
https://github.com/root-project/root/pull/12702:676,energy efficiency,Draw,Draw,676,"[RF] Implement correct sampling for RooGamma with `gamma < 1`; This fixes the JIRA ticket ROOT-4188:. https://sft.its.cern.ch/jira/browse/ROOT-4188. The solution to the problem was already written in the linked JIRA ticket by @lmoneta. This fix can be validated with this macro:. ```c++. void repro(). {. RooRealVar x{""x"", """", 0.0005, 0.001};. RooRealVar gamma{""gamma"", """", 0.5};. RooRealVar beta{""beta"", """", 2};. RooRealVar mu{""mu"", """", 0};. RooGamma pdf{""pdf"", """", x, gamma, beta, mu};. std::unique_ptr<RooDataSet> data{pdf.generate(x, 1000000)};. auto frame = x.frame(RooFit::Title(""RooGamma(x, 0.5, 2, 0)""));. TCanvas c1;. data->plotOn(frame);. pdf.plotOn(frame);. frame->Draw();. c1.SaveAs(""plot.png"");. }. ```. Result before this PR:. ![plot](https://user-images.githubusercontent.com/6578603/234061105-3fff0cc9-d040-4b55-93bd-20a34f48da55.png). And with this PR:. ![plot_new](https://user-images.githubusercontent.com/6578603/234061143-66e64f5c-eb81-489d-8ccd-c0e2a188dbff.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12702
https://github.com/root-project/root/pull/12702:252,safety,valid,validated,252,"[RF] Implement correct sampling for RooGamma with `gamma < 1`; This fixes the JIRA ticket ROOT-4188:. https://sft.its.cern.ch/jira/browse/ROOT-4188. The solution to the problem was already written in the linked JIRA ticket by @lmoneta. This fix can be validated with this macro:. ```c++. void repro(). {. RooRealVar x{""x"", """", 0.0005, 0.001};. RooRealVar gamma{""gamma"", """", 0.5};. RooRealVar beta{""beta"", """", 2};. RooRealVar mu{""mu"", """", 0};. RooGamma pdf{""pdf"", """", x, gamma, beta, mu};. std::unique_ptr<RooDataSet> data{pdf.generate(x, 1000000)};. auto frame = x.frame(RooFit::Title(""RooGamma(x, 0.5, 2, 0)""));. TCanvas c1;. data->plotOn(frame);. pdf.plotOn(frame);. frame->Draw();. c1.SaveAs(""plot.png"");. }. ```. Result before this PR:. ![plot](https://user-images.githubusercontent.com/6578603/234061105-3fff0cc9-d040-4b55-93bd-20a34f48da55.png). And with this PR:. ![plot_new](https://user-images.githubusercontent.com/6578603/234061143-66e64f5c-eb81-489d-8ccd-c0e2a188dbff.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12702
https://github.com/root-project/root/pull/12702:252,security,validat,validated,252,"[RF] Implement correct sampling for RooGamma with `gamma < 1`; This fixes the JIRA ticket ROOT-4188:. https://sft.its.cern.ch/jira/browse/ROOT-4188. The solution to the problem was already written in the linked JIRA ticket by @lmoneta. This fix can be validated with this macro:. ```c++. void repro(). {. RooRealVar x{""x"", """", 0.0005, 0.001};. RooRealVar gamma{""gamma"", """", 0.5};. RooRealVar beta{""beta"", """", 2};. RooRealVar mu{""mu"", """", 0};. RooGamma pdf{""pdf"", """", x, gamma, beta, mu};. std::unique_ptr<RooDataSet> data{pdf.generate(x, 1000000)};. auto frame = x.frame(RooFit::Title(""RooGamma(x, 0.5, 2, 0)""));. TCanvas c1;. data->plotOn(frame);. pdf.plotOn(frame);. frame->Draw();. c1.SaveAs(""plot.png"");. }. ```. Result before this PR:. ![plot](https://user-images.githubusercontent.com/6578603/234061105-3fff0cc9-d040-4b55-93bd-20a34f48da55.png). And with this PR:. ![plot_new](https://user-images.githubusercontent.com/6578603/234061143-66e64f5c-eb81-489d-8ccd-c0e2a188dbff.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12702
https://github.com/root-project/root/pull/12702:757,usability,user,user-images,757,"[RF] Implement correct sampling for RooGamma with `gamma < 1`; This fixes the JIRA ticket ROOT-4188:. https://sft.its.cern.ch/jira/browse/ROOT-4188. The solution to the problem was already written in the linked JIRA ticket by @lmoneta. This fix can be validated with this macro:. ```c++. void repro(). {. RooRealVar x{""x"", """", 0.0005, 0.001};. RooRealVar gamma{""gamma"", """", 0.5};. RooRealVar beta{""beta"", """", 2};. RooRealVar mu{""mu"", """", 0};. RooGamma pdf{""pdf"", """", x, gamma, beta, mu};. std::unique_ptr<RooDataSet> data{pdf.generate(x, 1000000)};. auto frame = x.frame(RooFit::Title(""RooGamma(x, 0.5, 2, 0)""));. TCanvas c1;. data->plotOn(frame);. pdf.plotOn(frame);. frame->Draw();. c1.SaveAs(""plot.png"");. }. ```. Result before this PR:. ![plot](https://user-images.githubusercontent.com/6578603/234061105-3fff0cc9-d040-4b55-93bd-20a34f48da55.png). And with this PR:. ![plot_new](https://user-images.githubusercontent.com/6578603/234061143-66e64f5c-eb81-489d-8ccd-c0e2a188dbff.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12702
https://github.com/root-project/root/pull/12702:891,usability,user,user-images,891,"[RF] Implement correct sampling for RooGamma with `gamma < 1`; This fixes the JIRA ticket ROOT-4188:. https://sft.its.cern.ch/jira/browse/ROOT-4188. The solution to the problem was already written in the linked JIRA ticket by @lmoneta. This fix can be validated with this macro:. ```c++. void repro(). {. RooRealVar x{""x"", """", 0.0005, 0.001};. RooRealVar gamma{""gamma"", """", 0.5};. RooRealVar beta{""beta"", """", 2};. RooRealVar mu{""mu"", """", 0};. RooGamma pdf{""pdf"", """", x, gamma, beta, mu};. std::unique_ptr<RooDataSet> data{pdf.generate(x, 1000000)};. auto frame = x.frame(RooFit::Title(""RooGamma(x, 0.5, 2, 0)""));. TCanvas c1;. data->plotOn(frame);. pdf.plotOn(frame);. frame->Draw();. c1.SaveAs(""plot.png"");. }. ```. Result before this PR:. ![plot](https://user-images.githubusercontent.com/6578603/234061105-3fff0cc9-d040-4b55-93bd-20a34f48da55.png). And with this PR:. ![plot_new](https://user-images.githubusercontent.com/6578603/234061143-66e64f5c-eb81-489d-8ccd-c0e2a188dbff.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12702
https://github.com/root-project/root/pull/12703:156,deployability,depend,depends,156,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:420,deployability,observ,observable,420,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:41,integrability,wrap,wrapped,41,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:61,integrability,Filter,FilteringDiagConsumer,61,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:147,integrability,filter,filtered,147,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:156,integrability,depend,depends,156,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:487,integrability,wrap,wrapped,487,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:156,modifiability,depend,depends,156,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:133,reliability,diagno,diagnostic,133,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:156,safety,depend,depends,156,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:133,testability,diagno,diagnostic,133,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:156,testability,depend,depends,156,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/pull/12703:420,testability,observ,observable,420,"[cling][v6-28] Ignore -Wunused-result in wrapped code; Make `FilteringDiagConsumer` also ignore -Wunused-result. Whether or not such diagnostic is filtered depends on `CompilationOptions::IgnorePromptDiags`. In particular, `IgnorePromptDiags` should _only_ be enabled for code parsed via `Interpreter::EvaluateInternal()`. Thus, as of this commit `IgnorePromptDiags` defaults to 0 in `makeDefaultCompilationOpts()`. The observable effect of this change is ignoring `-Wunused-result` for wrapped code, e.g. ```c++. [[nodiscard]] int f() { return 0; }. // This yields `warning: ignoring return value of function declared with 'nodiscard' attribute [-Wunused-result]`. void g() { f(); }. f(); // but this should not. ```. This PR is a backport of #12654.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12703
https://github.com/root-project/root/issues/12704:16,availability,error,error,16,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:85,availability,error,error,85,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:285,availability,error,error,285,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:332,deployability,observ,observables,332,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:366,energy efficiency,current,currently,366,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:16,performance,error,error,16,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:85,performance,error,error,85,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:285,performance,error,error,285,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:16,safety,error,error,16,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:85,safety,error,error,85,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:285,safety,error,error,285,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:332,testability,observ,observables,332,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:16,usability,error,error,16,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:85,usability,error,error,85,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/issues/12704:285,usability,error,error,285,"[RF] Off-by-one error in Roofit/Histfactory/HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12704
https://github.com/root-project/root/pull/12705:210,deployability,updat,updated,210,Don't check CMAKE_GENERATOR use MSVC instead; ## Changes or fixes:. Fix shared library output name if the generator is not `Visual Studio` but e.g. `Ninja`. ## Checklist:. - [x] tested changes locally. - [x] ~~updated the docs (if necessary)~~.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12705
https://github.com/root-project/root/pull/12705:72,interoperability,share,shared,72,Don't check CMAKE_GENERATOR use MSVC instead; ## Changes or fixes:. Fix shared library output name if the generator is not `Visual Studio` but e.g. `Ninja`. ## Checklist:. - [x] tested changes locally. - [x] ~~updated the docs (if necessary)~~.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12705
https://github.com/root-project/root/pull/12705:178,safety,test,tested,178,Don't check CMAKE_GENERATOR use MSVC instead; ## Changes or fixes:. Fix shared library output name if the generator is not `Visual Studio` but e.g. `Ninja`. ## Checklist:. - [x] tested changes locally. - [x] ~~updated the docs (if necessary)~~.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12705
https://github.com/root-project/root/pull/12705:210,safety,updat,updated,210,Don't check CMAKE_GENERATOR use MSVC instead; ## Changes or fixes:. Fix shared library output name if the generator is not `Visual Studio` but e.g. `Ninja`. ## Checklist:. - [x] tested changes locally. - [x] ~~updated the docs (if necessary)~~.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12705
https://github.com/root-project/root/pull/12705:210,security,updat,updated,210,Don't check CMAKE_GENERATOR use MSVC instead; ## Changes or fixes:. Fix shared library output name if the generator is not `Visual Studio` but e.g. `Ninja`. ## Checklist:. - [x] tested changes locally. - [x] ~~updated the docs (if necessary)~~.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12705
https://github.com/root-project/root/pull/12705:178,testability,test,tested,178,Don't check CMAKE_GENERATOR use MSVC instead; ## Changes or fixes:. Fix shared library output name if the generator is not `Visual Studio` but e.g. `Ninja`. ## Checklist:. - [x] tested changes locally. - [x] ~~updated the docs (if necessary)~~.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12705
https://github.com/root-project/root/pull/12705:124,usability,Visual,Visual,124,Don't check CMAKE_GENERATOR use MSVC instead; ## Changes or fixes:. Fix shared library output name if the generator is not `Visual Studio` but e.g. `Ninja`. ## Checklist:. - [x] tested changes locally. - [x] ~~updated the docs (if necessary)~~.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12705
https://github.com/root-project/root/pull/12707:20,availability,error,error,20,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:70,availability,error,error,70,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:270,availability,error,error,270,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:317,deployability,observ,observables,317,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:785,deployability,patch,patch,785,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:791,deployability,releas,releases,791,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:351,energy efficiency,current,currently,351,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:20,performance,error,error,20,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:70,performance,error,error,70,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:270,performance,error,error,270,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:20,safety,error,error,20,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:70,safety,error,error,70,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:270,safety,error,error,270,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:785,safety,patch,patch,785,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:785,security,patch,patch,785,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:317,testability,observ,observables,317,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:20,usability,error,error,20,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:70,usability,error,error,70,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12707:270,usability,error,error,270,"[RF] Fix off-by-one error in HistoToWorkspaceFactoryFast; There is an error here that was introduced in `dc65afe`:. https://github.com/root-project/root/blob/6abb8e90d9bea276269f375a67855c4065813343/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx#L760-L762. This error should only be thrown when the number of observables is not 1, 2 or 3, but currently fires if the number is equal to 3. See the change from `dc65afe` here where the mistake is evident:. https://github.com/root-project/root/commit/dc65afe00ec72d18ebc5d31e7b2d6b50c6a20423#diff-42ea09980f1ed2bacde4381f212c35d78be6ddedccf746953dc99d6455525d8aL1256-R1221. The conditional should be. `if (fObsNameVec.empty() || fObsNameVec.size() > 3)`. This needs to be backported to ROOT 6.26 and 6.28 to make it into the next patch releases. Thanks to @CoffeeIntoScience for reporting this bug!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12707
https://github.com/root-project/root/pull/12708:981,availability,error,error,981,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3179,availability,state,stateless,3179,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4883,availability,error,error,4883,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:153,deployability,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:613,deployability,patch,patches,613,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:760,deployability,build,build,760,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:818,deployability,Updat,Update,818,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:987,deployability,log,logging,987,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1563,deployability,observ,observables,1563,"7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2043,deployability,version,version,2043,"er` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2273,deployability,manag,management,2273,"ons. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2359,deployability,build,buildLoopBegin,2359," 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last no",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2785,deployability,depend,dependency,2785,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3016,deployability,integr,integrals,3016,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3087,deployability,integr,integrals,3087,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3245,deployability,integr,integration,3245,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3717,deployability,manag,management,3717," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4014,deployability,Compos,Composition,4014,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4161,deployability,modul,modules,4161,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4173,deployability,modul,modules,4173,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4230,deployability,modul,modules,4230,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4431,deployability,observ,observables,4431,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4657,deployability,modul,modules,4657,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4771,deployability,build,building,4771,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:876,energy efficiency,GPU,GPU,876,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1775,energy efficiency,Optim,Optimize,1775,"d compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2273,energy efficiency,manag,management,2273,"ons. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3717,energy efficiency,manag,management,3717," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1195,integrability,Batch,BatchMode,1195,"t/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1416,integrability,Batch,BatchMode,1416," Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1540,integrability,Batch,BatchMode,1540,"master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2043,integrability,version,version,2043,"er` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2398,integrability,translat,translate,2398," some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2432,integrability,translat,translate,2432,"e squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2785,integrability,depend,dependency,2785,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2796,integrability,pub,public,2796,"of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2832,integrability,interfac,interface,2832,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3016,integrability,integr,integrals,3016,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3087,integrability,integr,integrals,3087,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3179,integrability,state,stateless,3179,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3245,integrability,integr,integration,3245,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3568,integrability,interfac,interface,3568,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3852,integrability,interfac,interface,3852,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4823,integrability,wrap,wrapper,4823,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:902,interoperability,format,format,902,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2203,interoperability,Format,Format,2203,"e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation de",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2398,interoperability,translat,translate,2398," some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2432,interoperability,translat,translate,2432,"e squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2832,interoperability,interfac,interface,2832,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3016,interoperability,integr,integrals,3016,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3087,interoperability,integr,integrals,3087,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3245,interoperability,integr,integration,3245,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3568,interoperability,interfac,interface,3568,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3600,interoperability,format,format,3600,"test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3852,interoperability,interfac,interface,3852,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4823,interoperability,wrapper,wrapper,4823,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1309,modifiability,scal,scalar,1309,"2699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into Cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1316,modifiability,interm,intermediate,1316,"ttps://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashCon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1398,modifiability,reu,reuse,1398,"ect/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to tra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1534,modifiability,Reu,Reuse,1534,"n ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c513",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2043,modifiability,version,version,2043,"er` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2785,modifiability,depend,dependency,2785,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2832,modifiability,interfac,interface,2832,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3016,modifiability,integr,integrals,3016,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3087,modifiability,integr,integrals,3087,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3245,modifiability,integr,integration,3245,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3568,modifiability,interfac,interface,3568,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3852,modifiability,interfac,interface,3852,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4014,modifiability,Compos,Composition,4014,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4031,modifiability,inherit,inheritance,4031,"his commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4161,modifiability,modul,modules,4161,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4173,modifiability,modul,modules,4173,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4230,modifiability,modul,modules,4230,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4454,modifiability,paramet,parameter,4454,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4657,modifiability,modul,modules,4657,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:5180,modifiability,paramet,parameter,5180,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:876,performance,GPU,GPU,876,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:981,performance,error,error,981,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1195,performance,Batch,BatchMode,1195,"t/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1416,performance,Batch,BatchMode,1416," Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1540,performance,Batch,BatchMode,1540,"master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1775,performance,Optimiz,Optimize,1775,"d compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3710,performance,memor,memory,3710,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4883,performance,error,error,4883,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3016,reliability,integr,integrals,3016,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3087,reliability,integr,integrals,3087,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3245,reliability,integr,integration,3245,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:153,safety,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:613,safety,patch,patches,613,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:818,safety,Updat,Update,818,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:837,safety,test,test,837,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:846,safety,test,testNaNPacker,846,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:914,safety,test,testNaNPacker,914,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:981,safety,error,error,981,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:987,safety,log,logging,987,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2148,safety,test,testRooFuncWrapper,2148,"t `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2273,safety,manag,management,2273,"ons. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2344,safety,Avoid,Avoid,2344," in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2603,safety,test,test,2603,"fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2785,safety,depend,dependency,2785,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3126,safety,test,test,3126,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3608,safety,test,testRooDataHist,3608,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3665,safety,test,test,3665,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3717,safety,manag,management,3717," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3968,safety,test,tests,3968,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3982,safety,Test,TestStatistics,3982,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4161,safety,modul,modules,4161,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4173,safety,modul,modules,4173,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4230,safety,modul,modules,4230,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4499,safety,Test,Test,4499,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4543,safety,test,testRooFuncWrapper,4543,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4657,safety,modul,modules,4657,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4883,safety,error,error,4883,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:153,security,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:613,security,patch,patches,613,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:791,security,sign,signature,791,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:818,security,Updat,Update,818,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:987,security,log,logging,987,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3016,security,integr,integrals,3016,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3087,security,integr,integrals,3087,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3245,security,integr,integration,3245,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:837,testability,test,test,837,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:846,testability,test,testNaNPacker,846,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:914,testability,test,testNaNPacker,914,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:987,testability,log,logging,987,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:1563,testability,observ,observables,1563,"7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2148,testability,test,testRooFuncWrapper,2148,"t `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2603,testability,test,test,2603,"fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2785,testability,depend,dependency,2785,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3016,testability,integr,integrals,3016,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3087,testability,integr,integrals,3087,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3106,testability,mock,mock,3106,"wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3126,testability,test,test,3126,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3245,testability,integr,integration,3245,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3608,testability,test,testRooDataHist,3608,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3665,testability,test,test,3665,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3968,testability,test,tests,3968,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3982,testability,Test,TestStatistics,3982,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4431,testability,observ,observables,4431,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4499,testability,Test,Test,4499,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4543,testability,test,testRooFuncWrapper,4543,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:950,usability,Support,Support,950,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:981,usability,error,error,981,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 17; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682. 2. https://github.com/root-project/root/pull/12696. 3. https://github.com/root-project/root/pull/12699. 4. https://github.com/root-project/root/pull/12702. 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2229,usability,command,command,2229,"`RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enab",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:2979,usability,support,support,2979,"Normalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3054,usability,support,support,3054,"of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3710,usability,memor,memory,3710,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:3842,usability,minim,minimizer,3842,"mplementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4510,usability,prototyp,prototype,4510,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12708:4883,usability,error,error,4883,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12708
https://github.com/root-project/root/pull/12709:48,deployability,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 28; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12696. 2. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12709
https://github.com/root-project/root/pull/12709:172,deployability,patch,patches,172,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 28; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12696. 2. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12709
https://github.com/root-project/root/pull/12709:48,safety,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 28; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12696. 2. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12709
https://github.com/root-project/root/pull/12709:172,safety,patch,patches,172,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 28; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12696. 2. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12709
https://github.com/root-project/root/pull/12709:48,security,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 28; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12696. 2. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12709
https://github.com/root-project/root/pull/12709:172,security,patch,patches,172,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 28; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12696. 2. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12709
https://github.com/root-project/root/issues/12710:365,availability,error,error,365,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:378,availability,Error,Error,378,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:462,availability,Error,Error,462,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:546,availability,Error,Error,546,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:831,availability,unavail,unavailable,831,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:890,availability,Error,Error,890,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1012,availability,unavail,unavailable,1012,"nversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=420719",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1076,availability,Error,Error,1076,"ge); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1197,availability,unavail,unavailable,1197,"eType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=8390422",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1258,availability,Error,Error,1258,"etClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCoun",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1373,availability,unavail,unavailable,1373,"rror in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1487,availability,unavail,unavailable,1487,"eCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1551,availability,Error,Error,1551," <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1672,availability,unavail,unavailable,1672,"TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1735,availability,Error,Error,1735,"ync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1855,availability,unavail,unavailable,1855,"t=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1978,availability,unavail,unavailable,1978,"ct>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) beca",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2039,availability,Error,Error,2039,"set=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2159,availability,unavail,unavailable,2159,"Object>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2225,availability,Error,Error,2225,"=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2779,availability,failur,failures,2779," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3134,availability,Operat,Operating,3134," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3471,availability,operat,operation,3471," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:36,deployability,fail,fails,36,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2779,deployability,fail,failures,2779," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3113,deployability,version,version,3113," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:149,integrability,event,events,149,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3113,integrability,version,version,3113," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:16,interoperability,convers,conversion,16,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3419,interoperability,convers,conversion,3419," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3113,modifiability,version,version,3113," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:365,performance,error,error,365,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:378,performance,Error,Error,378,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:462,performance,Error,Error,462,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:546,performance,Error,Error,546,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:890,performance,Error,Error,890,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1076,performance,Error,Error,1076,"ge); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1258,performance,Error,Error,1258,"etClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCoun",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1551,performance,Error,Error,1551," <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1735,performance,Error,Error,1735,"ync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2039,performance,Error,Error,2039,"set=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2225,performance,Error,Error,2225,"=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2779,performance,failur,failures,2779," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:36,reliability,fail,fails,36,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2779,reliability,fail,failures,2779," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:365,safety,error,error,365,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:378,safety,Error,Error,378,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:462,safety,Error,Error,462,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:546,safety,Error,Error,546,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:890,safety,Error,Error,890,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1076,safety,Error,Error,1076,"ge); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1258,safety,Error,Error,1258,"etClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCoun",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1551,safety,Error,Error,1551," <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1735,safety,Error,Error,1735,"ync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2039,safety,Error,Error,2039,"set=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2225,safety,Error,Error,2225,"=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2523,security,checksum,checksum,2523," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2571,security,modif,modified,2571," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3276,testability,context,context,3276," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:365,usability,error,error,365,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:378,usability,Error,Error,378,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:462,usability,Error,Error,462,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:546,usability,Error,Error,546,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:890,usability,Error,Error,890,"[RF] RooDataSet conversion to TTree fails for large datasets (bytecount too large); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1076,usability,Error,Error,1076,"ge); ### Describe the bug. I have a RooDataSet with (say) 100 million events. I try to do. ```. RooDataSet::setDefaultStorageType(RooAbsData::Tree);. const TTree* tree8 = mydataw_z.GetClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1258,usability,Error,Error,1258,"etClonedTree();. ```. This works well for smaller datasets, but for my huge dataset I get the following error:. ```. Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::WriteByteCount>: bytecount too large (more than 1073741822). Error in <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCoun",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1551,usability,Error,Error,1551," <TBufferFile::CheckByteCount>: object of class TObjArray read too many bytes: 1600049012 instead of 526307188. Warning in <TBufferFile::CheckByteCount>: TObjArray::Streamer() not in sync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:1735,usability,Error,Error,1735,"ync with data, fix Streamer(). Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=4216542 pointer will be 0. Error in <TExMap::Remove>: key 2005325560 not found at 371. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2039,usability,Error,Error,2039,"set=2005325560 pointer will be 0. Error in <TExMap::Remove>: key 364036325 not found at 135. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2225,usability,Error,Error,2225,"=364036325 pointer will be 0. Error in <TExMap::Remove>: key 1061746196 not found at 217. Warning in <TBufferFile::CheckObject>: reference to an unavailable class, pointers of that type will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2726,usability,behavi,behavior,2726," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:2832,usability,minim,minimal,2832," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3304,usability,learn,learn,3304," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/issues/12710:3329,usability,efficien,efficient,3329," of unavailable class TObject, offset=1171537962 pointer will be 0. Error in <TExMap::Remove>: key 586225820 not found at 447. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=586225820 pointer will be 0. Error in <TExMap::Remove>: key 423978783 not found at 84. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TList, offset=423978783 pointer will be 0. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TObject, offset=4207193 pointer will be 0. Error in <TExMap::Remove>: key 839042239 not found at 12. Warning in <TBufferFile::CheckObject>: reference to object of unavailable class TBranchRef, offset=839042239 pointer will be 0. Error in <TBufferFile::CheckByteCount>: object of class TTree read too many bytes: 883788679 instead of 526307551. Warning in <TBufferFile::CheckByteCount>: TTree::Streamer() not in sync with data, fix Streamer(). *** Break *** segmentation violation. root.exe(60607,0x102138580) malloc: Incorrect checksum for freed object 0x15c1e1a00: probably modified after being freed. Corrupt value: 0x0. root.exe(60607,0x102138580) malloc: *** set a breakpoint in malloc_error_break to debug. ```. ### Expected behavior. The tree should be written to file without failures. ### To Reproduce. I have prepared a rather minimal example: https://cernbox.cern.ch/s/jhiOyKZJN89I3Hq . It is based on the [RooFit example](https://root.cern/doc/master/rs301__splot_8C.html) because my actual use case is saving the result of the sPlot into a TTree, but the sPlot is not the issue here. . ### Setup. 1. ROOT version: 6.28/02. 2. Operating system: MacOS (but the same happens on lxplus). 3. How you obtained ROOT: macports (but the same happens on lxplus). ### Additional context. I would be glad to learn if there is a more efficient way of saving RooDataSet into a TTree. I tried to find if there is a RooDataSet conversion to RDataFrame but found only the inverse operation. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12710
https://github.com/root-project/root/pull/12711:60,integrability,buffer,buffer,60,[webgeom] support more than 4 vertices in polygon; ROOT raw buffer for the shape may include more than 4 vertices in polygon. . Support such case not seen before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12711
https://github.com/root-project/root/pull/12711:10,usability,support,support,10,[webgeom] support more than 4 vertices in polygon; ROOT raw buffer for the shape may include more than 4 vertices in polygon. . Support such case not seen before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12711
https://github.com/root-project/root/pull/12711:128,usability,Support,Support,128,[webgeom] support more than 4 vertices in polygon; ROOT raw buffer for the shape may include more than 4 vertices in polygon. . Support such case not seen before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12711
https://github.com/root-project/root/pull/12712:308,deployability,build,build,308,"[v624][cmake] Protect against empty COMPILE_DEFINITIONS in genreflex and rootcint commands; Backport of these three PRs to ROOT 6.24:. 1. https://github.com/root-project/root/pull/11111. 2. https://github.com/root-project/root/pull/11408. 3. https://github.com/root-project/root/pull/11462. Like this, I can build the ROOT 6.24 branch in my Arch Linux environment again to debug some RooFit stuff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12712
https://github.com/root-project/root/pull/12712:82,usability,command,commands,82,"[v624][cmake] Protect against empty COMPILE_DEFINITIONS in genreflex and rootcint commands; Backport of these three PRs to ROOT 6.24:. 1. https://github.com/root-project/root/pull/11111. 2. https://github.com/root-project/root/pull/11408. 3. https://github.com/root-project/root/pull/11462. Like this, I can build the ROOT 6.24 branch in my Arch Linux environment again to debug some RooFit stuff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12712
https://github.com/root-project/root/pull/12713:67,integrability,buffer,buffer,67,[webgeom] support more than 4 vertices in polygon [6.28]; ROOT raw buffer for the shape may include more than 4 vertices in polygon. . Support such case not seen before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12713
https://github.com/root-project/root/pull/12713:10,usability,support,support,10,[webgeom] support more than 4 vertices in polygon [6.28]; ROOT raw buffer for the shape may include more than 4 vertices in polygon. . Support such case not seen before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12713
https://github.com/root-project/root/pull/12713:135,usability,Support,Support,135,[webgeom] support more than 4 vertices in polygon [6.28]; ROOT raw buffer for the shape may include more than 4 vertices in polygon. . Support such case not seen before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12713
https://github.com/root-project/root/issues/12715:770,availability,ERROR,ERROR,770,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:2119,availability,operat,operator,2119,"eadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8148,availability,operat,operator,8148,"252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SP",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8349,availability,operat,operator,8349,"17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11595,availability,operat,operator,11595,"::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtype",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11964,availability,operat,operator,11964,":15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22406,availability,Error,Error,22406,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:25,deployability,manag,managed,25,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:381,deployability,unload,unload,381,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:444,deployability,unload,unloading,444,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:1000,deployability,build,build,1000,"ue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:1211,deployability,build,build,1211," the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/mas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:1469,deployability,build,build,1469,"the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:1958,deployability,build,build,1958,"in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/mas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:2168,deployability,build,build,2168,"treamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:2380,deployability,build,build,2380,"id*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TC",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:2572,deployability,build,build,2572,"8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:2752,deployability,build,build,2752,"rInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:2915,deployability,build,build,2915,"::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3071,deployability,build,build,3071," in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3254,deployability,build,build,3254,"23:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:187",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3411,deployability,build,build,3411,"C/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3592,deployability,build,build,3592,"centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3786,deployability,build,build,3786,"san/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::Register",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3941,deployability,build,build,3941,"8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_trai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4169,deployability,build,build,4169,"51b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4659,deployability,build,build,4659,"ctoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5142,deployability,build,build,5142,"char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5337,deployability,build,build,5337,"onst**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5387,deployability,build,build,5387,":vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5523,deployability,build,build,5523,"_cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5573,deployability,build,build,5573," std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5689,deployability,build,build,5689,"EC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5739,deployability,build,build,5739,"x:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5858,deployability,build,build,5858,", void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b047",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5908,deployability,build,build,5908,"basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:6316,deployability,Build,BuildId,6316,) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:6637,deployability,Build,BuildId,6637,a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:6844,deployability,Build,BuildId,6844,/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:6967,deployability,Build,BuildId,6967,3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f9,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7086,deployability,Build,BuildId,7086,"usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7201,deployability,Build,BuildId,7201,".28-220.el8.x86_64/elf/dl-init.c:119:5. #25 0x7f88565ac9bb in _dl_catch_exception (/lib64/libc.so.6+0x1689bb) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7323,deployability,Build,BuildId,7323,"2f9985bf742e6e1ea71e6851f27783568e23d4). #26 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:794:5. #27 0x7f88584aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7475,deployability,modul,module,7475,"84aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7514,deployability,modul,module,7514,"g/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7553,deployability,modul,module,7553,".c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7592,deployability,modul,module,7592,"ch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7631,deployability,modul,module,7631,") (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7670,deployability,modul,module,7670,"27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7732,deployability,Build,BuildId,7732,"libc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7852,deployability,Build,BuildId,7852,"0b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7960,deployability,Build,BuildId,7960,") (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8187,deployability,build,build,8187,"2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TC",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8237,deployability,build,build,8237,"d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Inter",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8267,deployability,Build,BuildId,8267," in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::Crea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8387,deployability,build,build,8387," __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8643,deployability,build,build,8643,"x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8879,deployability,build,build,8879,"e3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:9119,deployability,build,build,9119," T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_trai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:9398,deployability,build,build,9398,"BEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:9556,deployability,build,build,9556,"alIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:9724,deployability,build,build,9724,"0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10214,deployability,build,build,10214,"57cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/ni",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10696,deployability,build,build,10696,"oUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10891,deployability,build,build,10891,"const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10941,deployability,build,build,10941,"::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f885",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11059,deployability,build,build,11059,"or<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11109,deployability,build,build,11109,":char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11209,deployability,build,build,11209,"t/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11259,deployability,build,build,11259,"r/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11360,deployability,build,build,11360,"char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::I",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11410,deployability,build,build,11410,"t*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11639,deployability,build,build,11639,", int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11689,deployability,build,build,11689,"ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/nig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11719,deployability,Build,BuildId,11719,"os8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11844,deployability,build,build,11844,"nitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, un",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12007,deployability,build,build,12007," namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::Ge",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12246,deployability,build,build,12246,"/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /hom",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12525,deployability,build,build,12525,"it.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metaclin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12683,deployability,build,build,12683,"er/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-cent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12890,deployability,build,build,12890,"/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TCla",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13057,deployability,build,build,13057,"t/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/maste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13260,deployability,build,build,13260,"/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13460,deployability,build,build,13460,"xy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13659,deployability,build,build,13659,"ass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13778,deployability,Build,BuildRealData,13778,"0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13820,deployability,build,build,13820,"r const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14012,deployability,build,build,14012,"s(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14194,deployability,build,build,14194,"*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14358,deployability,build,build,14358,"c4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14515,deployability,build,build,14515,"e/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14698,deployability,build,build,14698,"/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:187",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14855,deployability,build,build,14855,"an/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15036,deployability,build,build,15036,"os8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15230,deployability,build,build,15230,"n/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::Register",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15385,deployability,build,build,15385,"/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_trai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15613,deployability,build,build,15613,"51b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16103,deployability,build,build,16103,"ctoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16586,deployability,build,build,16586,"char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16975,deployability,build,build,16975,"basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17025,deployability,build,build,17025,"locator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17055,deployability,Build,BuildId,17055,"&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17283,deployability,Build,BuildId,17283,"onst*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17363,deployability,modul,module,17363,"g<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17401,deployability,modul,module,17401,"llocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17439,deployability,modul,module,17439,"<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17567,deployability,build,build,17567," /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17617,deployability,build,build,17617,"C/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17651,deployability,Build,BuildId,17651,"TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::Action",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17815,deployability,build,build,17815,"rt.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17865,deployability,build,build,17865,"dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaPars",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17899,deployability,Build,BuildId,17899,"y T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::Acti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18192,deployability,build,build,18192,"td::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18242,deployability,build,build,18242,")()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18276,deployability,Build,BuildId,18276,") (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18445,deployability,build,build,18445," #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18495,deployability,build,build,18495,"executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18529,deployability,Build,BuildId,18529,"ng::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LAB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18695,deployability,build,build,18695,"60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /hom",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18745,deployability,build,build,18745,"unction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18779,deployability,Build,BuildId,18779," cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18945,deployability,build,build,18945,"). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18995,deployability,build,build,18995,"teInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19029,deployability,Build,BuildId,19029,"ng<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19227,deployability,build,build,19227,"an/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19277,deployability,build,build,19277,"dId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/nigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19311,deployability,Build,BuildId,19311,"d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19518,deployability,build,build,19518,"00e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19709,deployability,build,build,19709,"/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19905,deployability,build,build,19905,"ult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f2778",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20087,deployability,build,build,20087,"8406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() con",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20270,deployability,build,build,20270,"ter/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20455,deployability,build,build,20455,"erpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20596,deployability,build,build,20596,"cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c80",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20719,deployability,build,build,20719,"ABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20868,deployability,Build,BuildId,20868,"ter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20982,deployability,build,build,20982,".cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . H",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22030,deployability,Stack,Stack,22030,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22054,deployability,Stack,Stack,22054,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22077,deployability,Stack,Stack,22077,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22102,deployability,Stack,Stack,22102,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22126,deployability,Stack,Stack,22126,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22218,deployability,Contain,Container,22218,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22430,deployability,build,build,22430,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22480,deployability,build,build,22480,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:25,energy efficiency,manag,managed,25,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:392,energy efficiency,load,loading,392,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:458,energy efficiency,load,loading,458,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:1055,energy efficiency,core,core,1055,"d 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:2807,energy efficiency,core,core,2807,"d*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1407:10. #4 0x7f8851931ee7 in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3126,energy efficiency,core,core,3126,")(TBuffer&, void*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/inc/TStreamerInfoActions.h:123:17. #5 0x7f8851931ee7 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3309,energy efficiency,core,core,3309,"(TStreamerInfoActions::TActionSequence const&, void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3580:10. #6 0x7f8851930ca7 in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3499:4. #7 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #8 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3841,energy efficiency,core,core,3841,"f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3906,energy efficiency,Load,LoadPCMImpl,3906,"ht/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3996,energy efficiency,core,core,3996,"73:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4065,energy efficiency,Load,LoadPCM,4065,"t/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4135,energy efficiency,alloc,allocator,4135,"TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4224,energy efficiency,core,core,4224,"onst*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4470,energy efficiency,alloc,allocator,4470,"/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4500,energy efficiency,alloc,allocator,4500,"1a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4582,energy efficiency,alloc,allocator,4582,"ight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4714,energy efficiency,core,core,4714,"ectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-cent",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4959,energy efficiency,alloc,allocator,4959,"centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4989,energy efficiency,alloc,allocator,4989,"t/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5071,energy efficiency,alloc,allocator,5071,"::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:5197,energy efficiency,core,core,5197,"/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #18 0x7f88253a69de in (anonymous namespace)::TriggerDictionaryInitialization_libUser_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:187:7. #19 0x7f88253a537a in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:195:7. #20 0x7f88253a537a in __cxx_global_var_init.2 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx:197:5. #21 0x7f88253a537a in _GLOBAL__sub_I_libUser.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/roottest/root/meta/race-12552/libUser.cxx. #22 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. #23 0x7f88584a3159 in call_init /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:118:11. #24 0x7f88584a3159 in _dl_init /usr/src/debug/g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8442,energy efficiency,core,core,8442,". #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/mas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8698,energy efficiency,core,core,8698,"/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesTo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:8934,energy efficiency,core,core,8934,"b64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:9174,energy efficiency,core,core,9174,"e/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:9453,energy efficiency,core,core,9453,"/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:9611,energy efficiency,core,core,9611,"Info_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx. #3 0x7f8857c631e3 in TClass::TClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:9779,energy efficiency,core,core,9779,"td::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:1329:4. #4 0x7f8857c82f15 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10025,energy efficiency,alloc,allocator,10025,":type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictIni",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10055,energy efficiency,alloc,allocator,10055,"Proxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10137,energy efficiency,alloc,allocator,10137,"centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:15. #5 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10269,energy efficiency,core,core,10269,"teClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #6 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10513,energy efficiency,alloc,allocator,10513,"cClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10543,energy efficiency,alloc,allocator,10543,"ftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previousl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10625,energy efficiency,alloc,allocator,10625,"ricClassInfo.cxx:250:31. #7 0x7f88400e26dd in TCling::ProcessClassesToUpdate() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:10751,energy efficiency,core,core,10751,"8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1994:24. #8 0x7f88400e26dd in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2339:4. #9 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11550,energy efficiency,alloc,allocated,11550,"d::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #10 0x7f8823177c7c in (anonymous namespace)::TriggerDictionaryInitialization_libHist_Impl() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:11899,energy efficiency,core,core,11899,"t/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15989:7. #11 0x7f8822d01f29 in (anonymous namespace)::DictInit::DictInit() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12062,energy efficiency,core,core,12062,"/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15997:7. #12 0x7f8822d01f29 in __cxx_global_var_init.284 /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx:15999:5. #13 0x7f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12301,energy efficiency,core,core,12301,"f8822d01f29 in _GLOBAL__sub_I_G__Hist.cxx /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/hist/hist/G__Hist.cxx. #14 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. previously allocated by thread T1 here:. #0 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12580,energy efficiency,core,core,12580," 0x511128 in operator new(unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511128) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12738,energy efficiency,core,core,12738,"c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857aacabe in TStorage::ObjectAlloc(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TStorage.cxx:292:19. #2 0x7f8857c82ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:12945,energy efficiency,core,core,12945,"2ee9 in TObject::operator new(unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TObject.h:181:46. #3 0x7f8857c82ee9 in ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::Rea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13112,energy efficiency,core,core,13112," ROOT::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13315,energy efficiency,core,core,13315,"lass.cxx:5877:11. #4 0x7f8857cb19f9 in ROOT::Internal::TDefaultInitBehavior::CreateClass(char const*, short, std::type_info const&, TVirtualIsAProxy*, char const*, char const*, int, int) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::Rea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13515,energy efficiency,core,core,13515,"ftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/Rtypes.h:179:17. #5 0x7f8857caf2cc in ROOT::TGenericClassInfo::GetClass() /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/bu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13714,energy efficiency,core,core,13714,"EC/asan/V/master/root/core/meta/src/TGenericClassInfo.cxx:250:31. #6 0x7f8857c6f398 in TClass::GetClass(char const*, bool, bool, unsigned long, unsigned long) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:13875,energy efficiency,core,core,13875,"ome/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:3039:26. #7 0x7f8857c594a0 in TClass::GetClass(char const*, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2970:11. #8 0x7f8857c594a0 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14249,energy efficiency,core,core,14249,"sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:850:28. #9 0x7f88400ec4fa in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2909:12. #10 0x7f8857c67884 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14570,energy efficiency,core,core,14570," in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2225:24. #11 0x7f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:14753,energy efficiency,core,core,14753,"f8857c5a795 in TClass::BuildRealData(void*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:2080:11. #12 0x7f88519308bb in TBufferFile::ReadClassBuffer(TClass const*, void*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:3467:45. #13 0x7f8851929ff7 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #14 0x7f8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15285,energy efficiency,core,core,15285,"8851929ff7 in TBufferFile::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15350,energy efficiency,Load,LoadPCMImpl,15350,"t/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15440,energy efficiency,core,core,15440,"3:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15509,energy efficiency,Load,LoadPCM,15509,"t/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15579,energy efficiency,alloc,allocator,15579,"TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnigh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15668,energy efficiency,core,core,15668,"onst*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15914,energy efficiency,alloc,allocator,15914,"/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15944,energy efficiency,alloc,allocator,15944,"1a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16026,energy efficiency,alloc,allocator,16026,"ight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16158,energy efficiency,core,core,16158,"ectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16403,energy efficiency,alloc,allocator,16403,"centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16433,energy efficiency,alloc,allocator,16433,"t/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16515,energy efficiency,alloc,allocator,16515,"::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:16641,energy efficiency,core,core,16641,"/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:18071,energy efficiency,alloc,allocator,18071,"c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3800e0f) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19573,energy efficiency,core,core,19573,"a60). #9 0x7f88406f4f7b in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19764,energy efficiency,core,core,19764,"+0x382cf7b) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #10 0x7f88406f3fd4 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/mast",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:19960,energy efficiency,core,core,19960,"/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x382bfd4) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #11 0x7f88406bf72e in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20142,energy efficiency,core,core,20142,"gRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x37f772e) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20325,energy efficiency,core,core,20325,"edbe992b553f91ae4294ea7d1470eea60). #12 0x7f88400e9b7e in HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20510,energy efficiency,core,core,20510,"night/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2428:29. #13 0x7f88400e878a in TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:20651,energy efficiency,core,core,20651,"(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2572:22. #14 0x7f88400ef37a in TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:3518:17. #15 0x7f88579cd523 in TApplication::ExecuteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:21037,energy efficiency,core,core,21037,"uteFile(char const*, int*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1661:30. #16 0x7f88579cb264 in TApplication::ProcessLine(char const*, bool, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TApplication.cxx:1506:14. #17 0x7f885825c26b in TRint::ProcessLineNr(char const*, char const*, int*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:820:11. #18 0x7f885825b68d in TRint::Run(bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack lef",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22310,energy efficiency,alloc,alloca,22310,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22336,energy efficiency,alloc,alloca,22336,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22512,integrability,messag,message,22512,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22512,interoperability,messag,message,22512,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22555,interoperability,Standard,Standard,22555,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7475,modifiability,modul,module,7475,"84aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7514,modifiability,modul,module,7514,"g/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7553,modifiability,modul,module,7553,".c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7592,modifiability,modul,module,7592,"ch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7631,modifiability,modul,module,7631,") (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7670,modifiability,modul,module,7670,"27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17363,modifiability,modul,module,17363,"g<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17401,modifiability,modul,module,17401,"llocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17439,modifiability,modul,module,17439,"<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:44,performance,multi-thread,multi-threaded,44,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:392,performance,load,loading,392,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:423,performance,parallel,parallel,423,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:458,performance,load,loading,458,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:638,performance,lock,lock,638,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:661,performance,concurren,concurrently,661,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:770,performance,ERROR,ERROR,770,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:3906,performance,Load,LoadPCMImpl,3906,"ht/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #9 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:4065,performance,Load,LoadPCM,4065,"t/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #10 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #11 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #12 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #13 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #14 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #15 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #16 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #17 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15350,performance,Load,LoadPCMImpl,15350,"t/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:2473:14. #15 0x7f8857bc179d in TObjArray::Streamer(TBuffer&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:15509,performance,Load,LoadPCM,15509,"t/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/cont/src/TObjArray.cxx:468:29. #16 0x7f8851b7c3bd in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/inc/TClass.h:610:7. #17 0x7f8851b7c3bd in TKey::ReadObjectAny(TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TKey.cxx:1108:11. #18 0x7f8851a61884 in TDirectoryFile::GetObjectChecked(char const*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TDirectoryFile.cxx:1111:25. #19 0x7f88400d8d51 in void TDirectory::GetObject<TObjArray>(char const*, TObjArray*&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/inc/TDirectory.h:214:18. #20 0x7f88400d8d51 in TCling::LoadPCMImpl(TFile&) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1769:12. #21 0x7f88400dbc28 in TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:1874:4. #22 0x7f88400e2139 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/metacling/src/TCling.cxx:2299:7. #23 0x7f8857aa5a33 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22406,performance,Error,Error,22406,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:25,safety,manag,managed,25,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:219,safety,test,test,219,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:349,safety,test,test,349,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:770,safety,ERROR,ERROR,770,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7475,safety,modul,module,7475,"84aa88d in dl_open_worker /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7514,safety,modul,module,7514,"g/glibc-2.28-220.el8.x86_64/elf/dl-open.c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7553,safety,modul,module,7553,".c:757:1. #28 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7592,safety,modul,module,7592,"ch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7631,safety,modul,module,7631,") (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:7670,safety,modul,module,7670,"27783568e23d4). #29 0x7f88584aaa70 in _dl_open /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-open.c:876:17. #30 0x7f8856a21f89 in dlopen_doit (/lib64/libdl.so.2+0xf89) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #31 0x7f88565ac963 in _dl_catch_exception (/lib64/libc.so.6+0x168963) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #32 0x7f88565aca22 in _dl_catch_error (/lib64/libc.so.6+0x168a22) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). #33 0x7f8856a2252d in _dlerror_run (/lib64/libdl.so.2+0x152d) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #34 0x7f8856a22029 in dlopen@@GLIBC_2.2.5 (/lib64/libdl.so.2+0x1029) (BuildId: a330b0475c03c7e7e095d17fbca122d945012730). #35 0x496e15 in __interceptor_dlopen.part.267 asan_interceptors.cpp.o. #36 0x7f8826a590c2 (<unknown module>). #37 0x7f8826a59b29 (<unknown module>). #38 0x7f8826a59abe (<unknown module>). #39 0x7f8826a599fd (<unknown module>). #40 0x7f8826a598df (<unknown module>). #41 0x7f8826a598c3 (<unknown module>). #42 0x7f8857491b12 (/lib64/libstdc++.so.6+0xc2b12) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #43 0x7f8856e351c9 in start_thread (/lib64/libpthread.so.0+0x81c9) (BuildId: faf67e21cdc2fe4c5de2be3d1ab54935cf9361f0). #44 0x7f885647de72 in clone (/lib64/libc.so.6+0x39e72) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). 0x616000617c20 is located 416 bytes inside of 560-byte region [0x616000617a80,0x616000617cb0). freed by thread T1 here:. #0 0x511c48 in operator delete(void*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x511c48) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857a43f8f in TObject::operator delete(void*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TObject.cxx:1078:7. #2 0x7f8857c60240 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) /home/sftnight/build/night/LABEL/ROOT-centos8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17363,safety,modul,module,17363,"g<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17401,safety,modul,module,17401,"llocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::S",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:17439,safety,modul,module,17439,"<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/base/src/TROOT.cxx:2557:15. #24 0x7f8823d849de in GCC_except_table867 G__Tree.cxx. #25 0x7f8823d8337a in GCC_except_table867 G__Tree.cxx. #26 0x7f88584a3059 in call_init.part.0 /usr/src/debug/glibc-2.28-220.el8.x86_64/elf/dl-init.c:72:3. Thread T1 created by T0 here:. #0 0x43c752 in __interceptor_pthread_create (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/bin/root.exe+0x43c752) (BuildId: 38590f4d5d08c122d0e0d8161ece8eeec84b2e5e). #1 0x7f8857491df8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib64/libstdc++.so.6+0xc2df8) (BuildId: 67383d84bc84f9c3d978093e405689f3fef20eca). #2 0x7f8826a593ff (<unknown module>). #3 0x7f8826a59340 (<unknown module>). #4 0x7f8826a5c028 (<unknown module>). #5 0x7f8840597a97 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x36cfa97) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #6 0x7f8840413a92 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x354ba92) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #7 0x7f884040d746 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/lib/libCling.so+0x3545746) (BuildId: 31284afedbe992b553f91ae4294ea7d1470eea60). #8 0x7f88406c8e0f in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (/home/sftnig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22384,safety,TEST,TEST,22384,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22406,safety,Error,Error,22406,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22575,safety,TEST,TEST,22575,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:638,security,lock,lock,638,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22248,security,cookie,cookie,22248,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:219,testability,test,test,219,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:349,testability,test,test,349,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22384,testability,TEST,TEST,22384,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22575,testability,TEST,TEST,22575,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:507,usability,user,user,507,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:770,usability,ERROR,ERROR,770,"Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.; As reported at https://github.com/root-project/roottest/pull/946#issuecomment-1519645135 and can be seen in the test. `roottest-root-meta-race-12552-exec_dlopenrace-auto`. The relevant output is below and the problem is a (real) quirk of the test. It linked to the repeated unload and loading of the same library in parallel. During the unloading and loading cycle the TClass object representing the user classes (from that library) are created and deleted and it seems that the pointer value is captured and used outside the main lock (and this is done concurrently we the deletion). This needs to be fixed but is unlikely to happen in the wild. ```. ==1544443==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000617c20 at pc 0x7f8857c557ae bp 0x7f88265b3e60 sp 0x7f88265b3e50. READ of size 4 at 0x616000617c20 thread T1. #0 0x7f8857c557ad in TClass::Size() const /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8. #1 0x7f8851923388 in TBufferFile::ReadFastArray(void*, TClass const*, int, TMemberStreamer*, TClass const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TBufferFile.cxx:1605:25. #2 0x7f8851cc28c1 in TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/io/io/src/TStreamerInfoActions.cxx:1364:11. #3 0x7f8851cc28c1 in int TStreamerInfoActions::ReadSTL<&(TStreamerInfoActions::ReadSTLMemberWiseSameClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short)), &(TStreamerInfoActions::ReadSTLObjectWiseFastArray(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*, short, unsigned int))>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22208,usability,user,user,22208,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22406,usability,Error,Error,22406,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/issues/12715:22580,usability,COMMAND,COMMAND,22580,ght/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/rint/src/TRint.cxx:461:22. #19 0x514b4a in main /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/main/src/rmain.cxx:84:12. #20 0x7f885647ed84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f92f9985bf742e6e1ea71e6851f27783568e23d4). SUMMARY: AddressSanitizer: heap-use-after-free /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/root/core/meta/src/TClass.cxx:5706:8 in TClass::Size() const. Shadow bytes around the buggy address:. 0x0c2c800baf30: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa. 0x0c2c800baf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800baf50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd. =>0x0c2c800baf80: fd fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd. 0x0c2c800baf90: fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa. 0x0c2c800bafb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. 0x0c2c800bafd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00. Shadow byte legend (one shadow byte represents 8 application bytes):. Addressable: 00. Partially addressable: 01 02 03 04 05 06 07 . Heap left redzone: fa. Freed heap region: fd. Stack left redzone: f1. Stack mid redzone: f2. Stack right redzone: f3. Stack after return: f5. Stack use after scope: f8. Global redzone: f9. Global init order: f6. Poisoned by user: f7. Container overflow: fc. Array cookie: ac. Intra object redzone: bb. ASan internal: fe. Left alloca redzone: ca. Right alloca redzone: cb. ==1544443==ABORTING. -- END TEST OUTPUT --. CMake Error at /home/sftnight/build/night/LABEL/ROOT-centos8/SPEC/asan/V/master/build/RootTestDriver.cmake:186 (message):. got exit code 1 but expected 0. Standard Output. -- TEST COMMAND -- .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12715
https://github.com/root-project/root/pull/12716:53,integrability,interfac,interfaces,53,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:188,integrability,Batch,BatchMode,188,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:53,interoperability,interfac,interfaces,53,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:53,modifiability,interfac,interfaces,53,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:405,modifiability,polymorph,polymorphically,405,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:188,performance,Batch,BatchMode,188,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:25,usability,command,command,25,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:150,usability,command,command,150,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:213,usability,document,documentation,213,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:281,usability,clear,clear,281,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:340,usability,custom,customize,340,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:354,usability,behavi,behavior,354,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:429,usability,document,documentation,429,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:471,usability,command,command,471,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/pull/12716:549,usability,document,documentation,549,[RF] New `EvalBackend()` command argument and reword interfaces and docs for `RooAbsPdf::createNLL()` and `fitTo()`; 1. Introduce new `EvalBackend()` command argument that will supersede `BatchMode()`. 2. Improve documentation of `RooAbsPdf::fitTo()` and `createNLL()`. 3. Make it clear what functions need to be overload when one wants to customize the behavior of `RooAbsPdf::fitTo()` and `createNLL()` polymorphically. 4. Add documentation for the new `EvalBackend()` command argument. More detail in the commit descriptions. This is how the new documentation on the evaluation backends will look like in the doxygen (I fixed the word-order-typo in the first sentence after taking the screenshot...):. ![eval_backend](https://github.com/root-project/root/assets/6578603/f23ef6e1-2cd2-4291-b5f5-da731e5883fd).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12716
https://github.com/root-project/root/issues/12718:639,interoperability,specif,specification,639,"A crash when trying to initialise a vector from a >1D numpy array in PyROOT; ### Describe the bug. This code crashes:. ```python. import ROOT. import numpy as np. b = np.arange(2*2, dtype=np.uint32).reshape(2,2). a = ROOT.std.vector(""vector<unsigned int>"")(b). ```. as described in https://root-forum.cern.ch/t/stl-vector-and-numpy-types-in-pyroot/54073/9. In general, it is impossible to initialise a multidimensional vector from a multidimensional numpy array in PyROOT. This is problematic for two reasons:. 1) Numpy arrays are perhaps the most popular holder for numeric data in Python in scientific cases. 2) They allow for the exact specification of types, often needed for proper interaction with ROOT. ### Setup. self-compiled ROOT 6.28.00, Fedora 37, Python 3.11.3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12718
https://github.com/root-project/root/issues/12718:687,usability,interact,interaction,687,"A crash when trying to initialise a vector from a >1D numpy array in PyROOT; ### Describe the bug. This code crashes:. ```python. import ROOT. import numpy as np. b = np.arange(2*2, dtype=np.uint32).reshape(2,2). a = ROOT.std.vector(""vector<unsigned int>"")(b). ```. as described in https://root-forum.cern.ch/t/stl-vector-and-numpy-types-in-pyroot/54073/9. In general, it is impossible to initialise a multidimensional vector from a multidimensional numpy array in PyROOT. This is problematic for two reasons:. 1) Numpy arrays are perhaps the most popular holder for numeric data in Python in scientific cases. 2) They allow for the exact specification of types, often needed for proper interaction with ROOT. ### Setup. self-compiled ROOT 6.28.00, Fedora 37, Python 3.11.3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12718
https://github.com/root-project/root/pull/12719:48,deployability,configurat,configuration,48,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:9,integrability,Batch,BatchMode,9,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:48,integrability,configur,configuration,48,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:150,integrability,Batch,BatchMode,150,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:48,modifiability,configur,configuration,48,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:401,modifiability,exten,extend,401,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:9,performance,Batch,BatchMode,9,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:150,performance,Batch,BatchMode,150,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:227,safety,safe,safer,227,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12719:48,security,configur,configuration,48,"[RF] Set BatchMode in `stressRooFit` via global configuration flag; The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12719
https://github.com/root-project/root/pull/12720:12,usability,support,support,12,[RF] Add AD support for RooChebychev and RooAddPdf.; This PR adds code-squash support for the RooChebychev and RooAddPdf classes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12720
https://github.com/root-project/root/pull/12720:78,usability,support,support,78,[RF] Add AD support for RooChebychev and RooAddPdf.; This PR adds code-squash support for the RooChebychev and RooAddPdf classes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12720
https://github.com/root-project/root/issues/12721:390,availability,Operat,Operating,390,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:51,deployability,updat,updating,51,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:372,deployability,version,version,372,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:430,deployability,instal,installed,430,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:455,deployability,instal,install,455,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:372,integrability,version,version,372,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:586,integrability,batch,batch,586,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:372,modifiability,version,version,372,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:586,performance,batch,batch,586,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:9,reliability,doe,doesn,9,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:98,reliability,doe,doesn,98,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:51,safety,updat,updating,51,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:51,security,updat,updating,51,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:526,security,ssh,ssh,526,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:487,testability,context,context,487,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:125,usability,behavi,behavior,125,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/issues/12721:183,usability,command,command,183,"TBrowser doesn't open; ### Describe the bug. After updating ROOT from 6.26.06 to 6.28.02 TBrowser doesn't open. ### Expected behavior. After opening ROOT and issuing ```TBrowser b``` command the TBrowser window was supposed to open. ### To Reproduce. 1. Open ROOT. 2. Type ```TBrowser b```. 3. Nothing happens (there was supposed to open TBrowser window). ### Setup. ROOT version: 6.28.02. Operating system: Nobara Linux 37. ROOT installed by ```sudo dnf install root```. ### Additional context. ROOT launched locally, not by ssh or anything like that. Already checked if somehow is in batch mode (```gROOT->IsBatch()``` returns false).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12721
https://github.com/root-project/root/pull/12722:724,availability,error,error,724,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2922,availability,state,stateless,2922,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4626,availability,error,error,4626,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:153,deployability,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:356,deployability,patch,patches,356,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:503,deployability,build,build,503,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:561,deployability,Updat,Update,561,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:730,deployability,log,logging,730,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1306,deployability,observ,observables,1306,"7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1786,deployability,version,version,1786,"er` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2016,deployability,manag,management,2016,"ons. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2102,deployability,build,buildLoopBegin,2102," 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last no",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2528,deployability,depend,dependency,2528,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2759,deployability,integr,integrals,2759,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2830,deployability,integr,integrals,2830,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2988,deployability,integr,integration,2988,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3460,deployability,manag,management,3460," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3757,deployability,Compos,Composition,3757,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3904,deployability,modul,modules,3904,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3916,deployability,modul,modules,3916,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3973,deployability,modul,modules,3973,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4174,deployability,observ,observables,4174,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4400,deployability,modul,modules,4400,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4514,deployability,build,building,4514,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:619,energy efficiency,GPU,GPU,619,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1518,energy efficiency,Optim,Optimize,1518,"d compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2016,energy efficiency,manag,management,2016,"ons. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3460,energy efficiency,manag,management,3460," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:938,integrability,Batch,BatchMode,938,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1159,integrability,Batch,BatchMode,1159," Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1283,integrability,Batch,BatchMode,1283,"master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1786,integrability,version,version,1786,"er` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2141,integrability,translat,translate,2141," some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2175,integrability,translat,translate,2175,"e squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2528,integrability,depend,dependency,2528,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2539,integrability,pub,public,2539,"of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2575,integrability,interfac,interface,2575,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2759,integrability,integr,integrals,2759,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2830,integrability,integr,integrals,2830,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2922,integrability,state,stateless,2922,"Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2988,integrability,integr,integration,2988,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3311,integrability,interfac,interface,3311,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3595,integrability,interfac,interface,3595,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4566,integrability,wrap,wrapper,4566,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:645,interoperability,format,format,645,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1946,interoperability,Format,Format,1946,"e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation de",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2141,interoperability,translat,translate,2141," some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evalua",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2175,interoperability,translat,translate,2175,"e squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2575,interoperability,interfac,interface,2575,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2759,interoperability,integr,integrals,2759,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2830,interoperability,integr,integrals,2830,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2988,interoperability,integr,integration,2988,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3311,interoperability,interfac,interface,3311,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3343,interoperability,format,format,3343,"test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3595,interoperability,interfac,interface,3595,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4566,interoperability,wrapper,wrapper,4566,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1052,modifiability,scal,scalar,1052,"`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into Cod",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1059,modifiability,interm,intermediate,1059,"; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashCon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1141,modifiability,reu,reuse,1141,"v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to tra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1277,modifiability,Reu,Reuse,1277,"n ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c513",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1786,modifiability,version,version,1786,"er` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2528,modifiability,depend,dependency,2528,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2575,modifiability,interfac,interface,2575,"258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add int",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2759,modifiability,integr,integrals,2759,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2830,modifiability,integr,integrals,2830,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2988,modifiability,integr,integration,2988,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3311,modifiability,interfac,interface,3311,"4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3595,modifiability,interfac,interface,3595,"ion for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3757,modifiability,Compos,Composition,3757,"grals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3774,modifiability,inherit,inheritance,3774,"his commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3904,modifiability,modul,modules,3904,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3916,modifiability,modul,modules,3916,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3973,modifiability,modul,modules,3973,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4197,modifiability,paramet,parameter,4197,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4400,modifiability,modul,modules,4400,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4923,modifiability,paramet,parameter,4923,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:619,performance,GPU,GPU,619,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:724,performance,error,error,724,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:938,performance,Batch,BatchMode,938,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1159,performance,Batch,BatchMode,1159," Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1283,performance,Batch,BatchMode,1283,"master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1518,performance,Optimiz,Optimize,1518,"d compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3453,performance,memor,memory,3453,"isibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4626,performance,error,error,4626,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2759,reliability,integr,integrals,2759,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2830,reliability,integr,integrals,2830,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2988,reliability,integr,integration,2988,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:153,safety,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:356,safety,patch,patches,356,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:561,safety,Updat,Update,561,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:580,safety,test,test,580,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:589,safety,test,testNaNPacker,589,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:657,safety,test,testNaNPacker,657,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:724,safety,error,error,724,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:730,safety,log,logging,730,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1891,safety,test,testRooFuncWrapper,1891,"t `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2016,safety,manag,management,2016,"ons. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2087,safety,Avoid,Avoid,2087," in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2346,safety,test,test,2346,"fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2528,safety,depend,dependency,2528,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2869,safety,test,test,2869,"ent output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3351,safety,test,testRooDataHist,3351,"is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3408,safety,test,test,3408,"tion from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules fo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3460,safety,manag,management,3460," of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3711,safety,test,tests,3711,"RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3725,safety,Test,TestStatistics,3725,"r differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3904,safety,modul,modules,3904,"at stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3916,safety,modul,modules,3916,"e stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with outp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:3973,safety,modul,modules,3973,"e analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::Feldm",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4242,safety,Test,Test,4242,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4286,safety,test,testRooFuncWrapper,4286,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4400,safety,modul,modules,4400,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:4626,safety,error,error,4626,"ter with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252). 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`. 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'. 5964158260 [RF] Add observables as another parameter in RooFuncWrapper. cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`. 333e857cc6 Add AD based derivatives for RooFuncWrapper. 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C. fe8738ab41 [RF] Make it possible to switch to `ryml` backend after building ROOT. 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit. f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`. cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&. 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8. a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`. 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter. 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`. faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:153,security,patch,patches,153,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:356,security,patch,patches,356,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:534,security,sign,signature,534,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:561,security,Updat,Update,561,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:730,security,log,logging,730,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2759,security,integr,integrals,2759,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2830,security,integr,integrals,2830,"3d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2988,security,integr,integration,2988,"352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations. 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method. 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing poten",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:580,testability,test,test,580,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:589,testability,test,testNaNPacker,589,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:657,testability,test,testNaNPacker,657,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:730,testability,log,logging,730,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 18; This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1306,testability,observ,observables,1306,"7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt. 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`. 5d5e1bcce1 [RF] Fix build due to changed compute() signature. f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU. a3294b725f [RF] Code format for `testNaNPacker.cxx`. 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute. 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute. 84870e3207 [RF] Less use of the `RunContext` class in RooFit. aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:1891,testability,test,testRooFuncWrapper,1891,"t `RooPolynomial` and `RooPolyVar` in BatchMode. e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions. 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code. 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing. 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file. 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector. 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2346,testability,test,test,2346,"fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`. d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers. cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-forma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2528,testability,depend,dependency,2528,"entation of `cloneTreeWithSameParameters()`. 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers. f4fc140268 [RF] Remove RooMomentMorphND. 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf. d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code moder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
https://github.com/root-project/root/pull/12722:2759,testability,integr,integrals,2759,"7b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10. 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper. 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument. 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext. ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(). c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew. 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation. c51376731b [RF][NFC] Fix typo. 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off. 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit. 98d004c200 [RF] Fix visibility of the res/ directories. e97347056c [RF] Make RooBatchCompute dependency public. 4483b01b7f [RF] Add initial interface and implementation for code-squashing. f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer. 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details. 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars. fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet. 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar. bf4990c5d4 [RF] Exclude RooHistError from IO. 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface. f355c3ced4 [RF] Code-format `testRooDataHist.cxx`. 3fd99f7679 [RF] Enable AD code-gen test for RooFit. a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext. 1367091202 [RF] Code modernization of RooAbsReal. 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper. cf88615b6e [RF] Improve code in `MinuitFcnGrad`. 17bac5528b [RF] Code improvements in tests for new TestStatistics. afcb2d3931 [RF] Composi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12722
