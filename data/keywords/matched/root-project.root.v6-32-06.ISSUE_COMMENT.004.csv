id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/725:11,deployability,build,build,11,@phsft-bot build just on gcc62/slc6 with flags -Dcxxmodules=On -Dccache=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/725
https://github.com/root-project/root/pull/725:11,deployability,build,build,11,@phsft-bot build just on clang_gcc62 with flags -Dcxxmodules=On -Dccache=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/725
https://github.com/root-project/root/pull/726:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/726
https://github.com/root-project/root/pull/726:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/726
https://github.com/root-project/root/pull/729:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:0,availability,Failur,Failure,0,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:306,availability,error,error,306,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:0,deployability,Fail,Failure,0,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:87,deployability,build,build,87,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:313,deployability,fail,failed,313,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:333,deployability,configurat,configuration,333,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:333,integrability,configur,configuration,333,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:139,interoperability,plug,plugins,139,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:333,modifiability,configur,configuration,333,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:0,performance,Failur,Failure,0,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:306,performance,error,error,306,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:364,performance,lock,lock,364,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:0,reliability,Fail,Failure,0,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:313,reliability,fail,failed,313,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:306,safety,error,error,306,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:333,security,configur,configuration,333,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:364,security,lock,lock,364,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:165,usability,Command,Command,165,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:254,usability,statu,status,254,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/729:306,usability,error,error,306,"Failure is not related to this PR: https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2242/console. ```. 11:28:01 Caused by: hudson.plugins.git.GitException: Command ""git config remote.origin.url https://github.com/root-project/root.git"" returned status code 4:. 11:28:01 stdout: . 11:28:01 stderr: error: failed to write new configuration file .git/config.lock. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/729
https://github.com/root-project/root/pull/730:95,safety,review,review,95,I'd like to suggest that we first have a discussion on the feature before diving into the code review. (And Github isn't necessarily the best place for that discussion.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/730
https://github.com/root-project/root/pull/730:95,testability,review,review,95,I'd like to suggest that we first have a discussion on the feature before diving into the code review. (And Github isn't necessarily the best place for that discussion.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/730
https://github.com/root-project/root/pull/730:70,energy efficiency,reduc,reduce,70,"Hi all,. I will to prepare a better PR, . and I will to close this to reduce the noise in the emails. Best,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/730
https://github.com/root-project/root/pull/730:56,usability,close,close,56,"Hi all,. I will to prepare a better PR, . and I will to close this to reduce the noise in the emails. Best,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/730
https://github.com/root-project/root/pull/731:169,deployability,releas,releases,169,As a side note: A less conservative change like https://github.com/A2-Collaboration/cern-root/commit/f39abebf7a96bb2d721109b0b4a29c42756258d5 might help with future GCC releases.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:148,usability,help,help,148,As a side note: A less conservative change like https://github.com/A2-Collaboration/cern-root/commit/f39abebf7a96bb2d721109b0b4a29c42756258d5 might help with future GCC releases.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:32,deployability,updat,update,32,Thanks! Can you create a PR (or update this one) with https://github.com/A2-Collaboration/cern-root/commit/f39abebf7a96bb2d721109b0b4a29c42756258d5 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:32,safety,updat,update,32,Thanks! Can you create a PR (or update this one) with https://github.com/A2-Collaboration/cern-root/commit/f39abebf7a96bb2d721109b0b4a29c42756258d5 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:32,security,updat,update,32,Thanks! Can you create a PR (or update this one) with https://github.com/A2-Collaboration/cern-root/commit/f39abebf7a96bb2d721109b0b4a29c42756258d5 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:2,deployability,updat,updated,2,I updated this PR with the mentioned commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:2,safety,updat,updated,2,I updated this PR with the mentioned commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:2,security,updat,updated,2,I updated this PR with the mentioned commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:230,deployability,releas,releases,230,"The ""configure"" & ""make"" part of the second commit seems wrong to me:. a) I don't think you can use GREATER_EQUAL in Makefiles?! b) The previous commit shows more than just the CPPREP place which need modifications for future GCC releases",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:5,integrability,configur,configure,5,"The ""configure"" & ""make"" part of the second commit seems wrong to me:. a) I don't think you can use GREATER_EQUAL in Makefiles?! b) The previous commit shows more than just the CPPREP place which need modifications for future GCC releases",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:5,modifiability,configur,configure,5,"The ""configure"" & ""make"" part of the second commit seems wrong to me:. a) I don't think you can use GREATER_EQUAL in Makefiles?! b) The previous commit shows more than just the CPPREP place which need modifications for future GCC releases",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:5,security,configur,configure,5,"The ""configure"" & ""make"" part of the second commit seems wrong to me:. a) I don't think you can use GREATER_EQUAL in Makefiles?! b) The previous commit shows more than just the CPPREP place which need modifications for future GCC releases",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:201,security,modif,modifications,201,"The ""configure"" & ""make"" part of the second commit seems wrong to me:. a) I don't think you can use GREATER_EQUAL in Makefiles?! b) The previous commit shows more than just the CPPREP place which need modifications for future GCC releases",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:381,deployability,build,build,381,"a) GREATER_EQUAL was introduced with CMake 3.7, I will change it to not less instead which is supported by cmake prior to 3.7. b) That's a valid point. I first left this out as I don't know the files which are used. But since ROOT5 is somewhat outdated, I assume there will be no big changes. I will change the affected lines accordingly. I will push the change to this PR once my build process succeeded to make sure everything compiles and works (at least on my system). Edit: Sorry, I somehow missed the configure & make part. I've only used cmake. This doesn't work using make of course. I will change try to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:507,integrability,configur,configure,507,"a) GREATER_EQUAL was introduced with CMake 3.7, I will change it to not less instead which is supported by cmake prior to 3.7. b) That's a valid point. I first left this out as I don't know the files which are used. But since ROOT5 is somewhat outdated, I assume there will be no big changes. I will change the affected lines accordingly. I will push the change to this PR once my build process succeeded to make sure everything compiles and works (at least on my system). Edit: Sorry, I somehow missed the configure & make part. I've only used cmake. This doesn't work using make of course. I will change try to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:507,modifiability,configur,configure,507,"a) GREATER_EQUAL was introduced with CMake 3.7, I will change it to not less instead which is supported by cmake prior to 3.7. b) That's a valid point. I first left this out as I don't know the files which are used. But since ROOT5 is somewhat outdated, I assume there will be no big changes. I will change the affected lines accordingly. I will push the change to this PR once my build process succeeded to make sure everything compiles and works (at least on my system). Edit: Sorry, I somehow missed the configure & make part. I've only used cmake. This doesn't work using make of course. I will change try to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:557,reliability,doe,doesn,557,"a) GREATER_EQUAL was introduced with CMake 3.7, I will change it to not less instead which is supported by cmake prior to 3.7. b) That's a valid point. I first left this out as I don't know the files which are used. But since ROOT5 is somewhat outdated, I assume there will be no big changes. I will change the affected lines accordingly. I will push the change to this PR once my build process succeeded to make sure everything compiles and works (at least on my system). Edit: Sorry, I somehow missed the configure & make part. I've only used cmake. This doesn't work using make of course. I will change try to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:139,safety,valid,valid,139,"a) GREATER_EQUAL was introduced with CMake 3.7, I will change it to not less instead which is supported by cmake prior to 3.7. b) That's a valid point. I first left this out as I don't know the files which are used. But since ROOT5 is somewhat outdated, I assume there will be no big changes. I will change the affected lines accordingly. I will push the change to this PR once my build process succeeded to make sure everything compiles and works (at least on my system). Edit: Sorry, I somehow missed the configure & make part. I've only used cmake. This doesn't work using make of course. I will change try to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:507,security,configur,configure,507,"a) GREATER_EQUAL was introduced with CMake 3.7, I will change it to not less instead which is supported by cmake prior to 3.7. b) That's a valid point. I first left this out as I don't know the files which are used. But since ROOT5 is somewhat outdated, I assume there will be no big changes. I will change the affected lines accordingly. I will push the change to this PR once my build process succeeded to make sure everything compiles and works (at least on my system). Edit: Sorry, I somehow missed the configure & make part. I've only used cmake. This doesn't work using make of course. I will change try to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:94,usability,support,supported,94,"a) GREATER_EQUAL was introduced with CMake 3.7, I will change it to not less instead which is supported by cmake prior to 3.7. b) That's a valid point. I first left this out as I don't know the files which are used. But since ROOT5 is somewhat outdated, I assume there will be no big changes. I will change the affected lines accordingly. I will push the change to this PR once my build process succeeded to make sure everything compiles and works (at least on my system). Edit: Sorry, I somehow missed the configure & make part. I've only used cmake. This doesn't work using make of course. I will change try to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:72,deployability,build,build,72,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:116,deployability,build,build,116,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:174,deployability,version,version,174,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:185,deployability,releas,released,185,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:0,integrability,configur,configure,0,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:174,integrability,version,version,174,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:0,modifiability,configur,configure,0,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:174,modifiability,version,version,174,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:153,performance,time,time,153,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:130,reliability,doe,doesn,130,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:0,security,configur,configure,0,"configure and make are woking now with GCC7 on my Arch Linux. The CMake build works as well. Hopefully this way the build process doesn't break the next time a new major GCC version is released, in ~1year.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:47,deployability,Modul,Module,47,"I was talking about usage of GREATER_EQUAL in ""Module.mk"" which is not related to CMake at all, but I see you fixed the problem, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:47,modifiability,Modul,Module,47,"I was talking about usage of GREATER_EQUAL in ""Module.mk"" which is not related to CMake at all, but I see you fixed the problem, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/731:47,safety,Modul,Module,47,"I was talking about usage of GREATER_EQUAL in ""Module.mk"" which is not related to CMake at all, but I see you fixed the problem, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/731
https://github.com/root-project/root/pull/733:11,usability,Stop,Stop,11,@phsft-bot Stop it!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/733
https://github.com/root-project/root/pull/734:11,deployability,build,build,11,"@phsft-bot build also on centos7/gcc49, mac1012/native, slc6/gcc49, slc6/gcc62, ubuntu14/native with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON -Dvc=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/734
https://github.com/root-project/root/pull/735:11,deployability,build,build,11,"@phsft-bot build also on centos7/gcc49, mac1012/native, slc6/gcc49, slc6/gcc62, ubuntu14/native with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON -Dvc=ON.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/735
https://github.com/root-project/root/pull/735:15,availability,failur,failure,15,"Could the test failure be related to your change? Probably not, but worth taking a look if yes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/735
https://github.com/root-project/root/pull/735:15,deployability,fail,failure,15,"Could the test failure be related to your change? Probably not, but worth taking a look if yes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/735
https://github.com/root-project/root/pull/735:15,performance,failur,failure,15,"Could the test failure be related to your change? Probably not, but worth taking a look if yes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/735
https://github.com/root-project/root/pull/735:15,reliability,fail,failure,15,"Could the test failure be related to your change? Probably not, but worth taking a look if yes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/735
https://github.com/root-project/root/pull/735:10,safety,test,test,10,"Could the test failure be related to your change? Probably not, but worth taking a look if yes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/735
https://github.com/root-project/root/pull/735:10,testability,test,test,10,"Could the test failure be related to your change? Probably not, but worth taking a look if yes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/735
https://github.com/root-project/root/pull/735:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/735
https://github.com/root-project/root/pull/738:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/738
https://github.com/root-project/root/pull/740:27,deployability,depend,depend,27,"A reproducer that does not depend on TDataFrame; crashes on gcc 4.9.2 and gcc 6.3.0. If someone knows a general solution that does not require changing the template recursion limit in the compilation flags I would be super interested:. ```c++. #include <vector>. #include <tuple>. int main() {. std::vector<std::tuple<double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double>> v(1);. v.resize(1);. . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/740
https://github.com/root-project/root/pull/740:27,integrability,depend,depend,27,"A reproducer that does not depend on TDataFrame; crashes on gcc 4.9.2 and gcc 6.3.0. If someone knows a general solution that does not require changing the template recursion limit in the compilation flags I would be super interested:. ```c++. #include <vector>. #include <tuple>. int main() {. std::vector<std::tuple<double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double>> v(1);. v.resize(1);. . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/740
https://github.com/root-project/root/pull/740:27,modifiability,depend,depend,27,"A reproducer that does not depend on TDataFrame; crashes on gcc 4.9.2 and gcc 6.3.0. If someone knows a general solution that does not require changing the template recursion limit in the compilation flags I would be super interested:. ```c++. #include <vector>. #include <tuple>. int main() {. std::vector<std::tuple<double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double>> v(1);. v.resize(1);. . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/740
https://github.com/root-project/root/pull/740:135,modifiability,require chang,require changing,135,"A reproducer that does not depend on TDataFrame; crashes on gcc 4.9.2 and gcc 6.3.0. If someone knows a general solution that does not require changing the template recursion limit in the compilation flags I would be super interested:. ```c++. #include <vector>. #include <tuple>. int main() {. std::vector<std::tuple<double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double>> v(1);. v.resize(1);. . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/740
https://github.com/root-project/root/pull/740:18,reliability,doe,does,18,"A reproducer that does not depend on TDataFrame; crashes on gcc 4.9.2 and gcc 6.3.0. If someone knows a general solution that does not require changing the template recursion limit in the compilation flags I would be super interested:. ```c++. #include <vector>. #include <tuple>. int main() {. std::vector<std::tuple<double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double>> v(1);. v.resize(1);. . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/740
https://github.com/root-project/root/pull/740:126,reliability,doe,does,126,"A reproducer that does not depend on TDataFrame; crashes on gcc 4.9.2 and gcc 6.3.0. If someone knows a general solution that does not require changing the template recursion limit in the compilation flags I would be super interested:. ```c++. #include <vector>. #include <tuple>. int main() {. std::vector<std::tuple<double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double>> v(1);. v.resize(1);. . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/740
https://github.com/root-project/root/pull/740:27,safety,depend,depend,27,"A reproducer that does not depend on TDataFrame; crashes on gcc 4.9.2 and gcc 6.3.0. If someone knows a general solution that does not require changing the template recursion limit in the compilation flags I would be super interested:. ```c++. #include <vector>. #include <tuple>. int main() {. std::vector<std::tuple<double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double>> v(1);. v.resize(1);. . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/740
https://github.com/root-project/root/pull/740:27,testability,depend,depend,27,"A reproducer that does not depend on TDataFrame; crashes on gcc 4.9.2 and gcc 6.3.0. If someone knows a general solution that does not require changing the template recursion limit in the compilation flags I would be super interested:. ```c++. #include <vector>. #include <tuple>. int main() {. std::vector<std::tuple<double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double, double, double, double, double, double, double, double, double, double, double, double,. double, double>> v(1);. v.resize(1);. . return 0;. }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/740
https://github.com/root-project/root/pull/741:31,performance,perform,performance,31,"Hi,. very nice. Can you cite a performance improvement figure in terms of real time before and after the change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:79,performance,time,time,79,"Hi,. very nice. Can you cite a performance improvement figure in terms of real time before and after the change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:31,usability,perform,performance,31,"Hi,. very nice. Can you cite a performance improvement figure in terms of real time before and after the change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:13,deployability,updat,updated,13,"Hi Danilo, I updated the description at the top to include a comparison of two runs of basic hotspots for the master and this branch. This is for the random number generation merged with TBufferMerger. Notice that most time saved is indeed in `TTree::Fill()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:219,performance,time,time,219,"Hi Danilo, I updated the description at the top to include a comparison of two runs of basic hotspots for the master and this branch. This is for the random number generation merged with TBufferMerger. Notice that most time saved is indeed in `TTree::Fill()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:13,safety,updat,updated,13,"Hi Danilo, I updated the description at the top to include a comparison of two runs of basic hotspots for the master and this branch. This is for the random number generation merged with TBufferMerger. Notice that most time saved is indeed in `TTree::Fill()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:93,safety,hot,hotspots,93,"Hi Danilo, I updated the description at the top to include a comparison of two runs of basic hotspots for the master and this branch. This is for the random number generation merged with TBufferMerger. Notice that most time saved is indeed in `TTree::Fill()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:13,security,updat,updated,13,"Hi Danilo, I updated the description at the top to include a comparison of two runs of basic hotspots for the master and this branch. This is for the random number generation merged with TBufferMerger. Notice that most time saved is indeed in `TTree::Fill()`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:125,deployability,stack,stack,125,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime. 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:319,interoperability,distribut,distributed,319,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime. 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:163,performance,time,time,163,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime. 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:266,performance,time,time,266,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime. 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:507,performance,time,time,507,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime. 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:74,safety,avoid,avoids,74,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime. 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:218,safety,avoid,avoid,218,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime. 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/741:177,testability,plan,plans,177,"Relevant note after discussion on Mattermost / ROOT IO meeting -. 1. This avoids construction of the IMTHelper object on the stack when IMT is disabled at compile time. @amadio plans to do another follow-up to try and avoid the object when IMT is enabled at compile time but disabled at runtime. 2. ~1.3s of savings is distributed over 100M `TTree::Fill` calls, which amounts to something like 13ns of savings per call. Still worth doing, the absolute order-magnitude wasn't easily apparent to me the first time I read through the ticket. Thanks Guilherme!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/741
https://github.com/root-project/root/pull/742:18,usability,close,closed,18,"Hi,. why was this closed? D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/742
https://github.com/root-project/root/pull/742:30,testability,understand,understand,30,I merged it and GitHub didn't understand properly...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/742
https://github.com/root-project/root/pull/744:13,interoperability,conflict,conflict,13,"D33658 had a conflict but is resolved now. Also you'll have to set the ordering for the behavior you want, I believe that is SO_LoadedFirst.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:88,usability,behavi,behavior,88,"D33658 had a conflict but is resolved now. Also you'll have to set the ordering for the behavior you want, I believe that is SO_LoadedFirst.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:170,availability,operat,operator,170,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:264,availability,operat,operator,264,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:242,deployability,depend,dependent,242,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:77,energy efficiency,load,loaded,77,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:128,energy efficiency,load,loading,128,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:296,energy efficiency,load,loading,296,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:242,integrability,depend,dependent,242,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:242,modifiability,depend,dependent,242,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:77,performance,load,loaded,77,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:128,performance,load,loading,128,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:296,performance,load,loading,296,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:242,safety,depend,dependent,242,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:242,testability,depend,dependent,242,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:33,deployability,patch,patch,33,@marsupial it looks like neither patch fixes the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:33,safety,patch,patch,33,@marsupial it looks like neither patch fixes the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:33,security,patch,patch,33,@marsupial it looks like neither patch fixes the issue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:54,deployability,build,build,54,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:311,deployability,version,versions,311,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:311,integrability,version,versions,311,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:0,interoperability,Specif,Specificity,0,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:239,interoperability,conflict,conflicts,239,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:311,modifiability,version,versions,311,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:87,safety,test,tests,87,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:87,testability,test,tests,87,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:18,usability,help,help,18,Specificity would help...this is reporting Jenkins CI build passed and the majority of tests pass here as well (I've never successfully had them all pass). Perhaps you are not picking up the full history of changes (as you said there were conflicts)? Maybe apply the changes to LLVM and then overwrite the ROOT versions?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:38,availability,failur,failures,38,@marsupial Jenkins reports around 500 failures. Don't worry I am working on a fix and I will take care of all that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:38,deployability,fail,failures,38,@marsupial Jenkins reports around 500 failures. Don't worry I am working on a fix and I will take care of all that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:38,performance,failur,failures,38,@marsupial Jenkins reports around 500 failures. Don't worry I am working on a fix and I will take care of all that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:38,reliability,fail,failures,38,@marsupial Jenkins reports around 500 failures. Don't worry I am working on a fix and I will take care of all that.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:128,performance,time,times,128,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:537,reliability,doe,does,537,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:96,safety,review,reviews,96,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:513,safety,review,reviews,513,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:96,testability,review,reviews,96,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:412,testability,understand,understand,412,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:513,testability,review,reviews,513,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:626,testability,plan,planning,626,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:300,usability,help,helps,300,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:347,usability,behavi,behavior,347,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:400,usability,help,helpful,400,"To be honest I am worried. Predominately because you've mentioned your desire to revert https://reviews.llvm.org/D30107 about 4 times and are starting to do so on threads that have nothing to do with this issue. To me it seems you may not be particularly interested in working toward a solution that helps other parties (as ROOT's desired/default behavior is 100% incorrect for us). I've tried to be helpful and understand where you are coming from, but I've asked for a concrete example of breakage that https://reviews.llvm.org/D33529 does not resolve twice and it is not provided. Perhaps you can elucidate on what you are planning, or give an example that is not fixed by D33529? Thank you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:48,deployability,releas,release,48,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:61,deployability,patch,patch,61,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:855,deployability,releas,release,855,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1054,deployability,build,build,1054,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1258,deployability,patch,patch-free,1258,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1398,deployability,patch,patches,1398,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1314,interoperability,coordinat,coordinate,1314,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1330,performance,time,time,1330,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:19,safety,hot,hotfix,19,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:61,safety,patch,patch,61,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1258,safety,patch,patch-free,1258,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1382,safety,review,review,1382,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1398,safety,patch,patches,1398,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:61,security,patch,patch,61,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1258,security,patch,patch-free,1258,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1398,security,patch,patches,1398,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:184,testability,plan,plan,184,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:210,testability,assert,assert,210,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1382,testability,review,review,1382,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:142,usability,Support,Support,142,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1113,usability,clear,clear,1113,"I am looking for a hotfix for the upcoming llvm release. The patch would be in the [area](https://github.com/llvm-mirror/llvm/blob/master/lib/Support/DynamicLibrary.cpp#L76-L92):. * I plan to remove the NDEBUG assert. * Make the `std::vector<void*>` a `std::vector<llvm::PointerIntPair<void*, 1, bool>>`. * Add a default flag to `addPermanentLibrary` saying if it was opened with RTLD_GLOBAL. * I will change the search order to search for first the one that are not marked RTLD_GLOBAL. A real solution I've discussed with Lang privately is that we should figure out a way how to pass the dlopened handle to the cling interpreter (before any parsing happens) and have a call to dlsym before calling the DynamicLibrary [here](https://github.com/root-project/cling/blob/master/lib/Interpreter/IncrementalJIT.cpp#L320). This would only happen after the next release of LLVM. I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I feel fairly strongly running cling (and ROOT) with a patch-free LLVM and clang. I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2231,availability,operat,operator,2231,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2416,availability,operat,operator,2416,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2485,availability,operat,operator,2485,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2542,availability,operat,operator,2542,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:184,deployability,build,build,184,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:659,deployability,fail,fails,659,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1044,deployability,patch,patches,1044,"not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1156,deployability,patch,patch,1156,"hat's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2521,deployability,depend,dependent,2521,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2625,energy efficiency,load,loaded,2625,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2521,integrability,depend,dependent,2521,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:960,interoperability,coordinat,coordinate,960,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1213,interoperability,coordinat,coordination,1213," locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1548,interoperability,platform,platform,1548,"en giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2521,modifiability,depend,dependent,2521,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:355,performance,time,time,355,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:494,performance,time,time,494,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:976,performance,time,time,976,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2075,performance,time,times,2075,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2625,performance,load,loaded,2625,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:659,reliability,fail,fails,659,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:643,safety,test,test,643,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:678,safety,review,reviews,678,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:911,safety,test,tests,911,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1028,safety,review,review,1028,"lutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understand",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1044,safety,patch,patches,1044,"not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1129,safety,review,reviewers,1129,". You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1156,safety,patch,patch,1156,"hat's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1324,safety,review,review,1324,"fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2521,safety,depend,dependent,2521,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2686,safety,except,exceptions,2686,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1044,security,patch,patches,1044,"not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1156,security,patch,patch,1156,"hat's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default be",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1782,security,expos,expose,1782,"applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:643,testability,test,test,643,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:678,testability,review,reviews,678,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:767,testability,verif,verify,767,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:911,testability,test,tests,911,"> I appreciate your proposed solutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1028,testability,review,review,1028,"lutions but I do not really have a lot of bandwidth nowadays to investigate why they do not work for us. You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understand",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1129,testability,review,reviewers,1129,". You will probably see what's going wrong if you build this PR locally. I have built locally and don't see the issue (I don't even know what I'm looking for). Both you and @pcanal asked me to fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1324,testability,review,review,1324,"fix this and I spent actual time trying to figure out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1373,testability,plan,plan,1373,"e out what you guys were after and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1399,testability,assert,assert,1399,"ter and implementing a solution that has little cost for both of us. I too suffer from lack time, so asking me to do work then walking away without even giving a single example of what is broken seems a bit rude.... Seriously, can I get one test that still fails with https://reviews.llvm.org/D33529 ? If that cannot be done could @pcanal or @Axel-Naumann at least verify that after applying D33529 and setting `DynamicLibrary::SearchOrder = SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1992,testability,understand,understand,1992,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2021,testability,understand,understandings,2021,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2521,testability,depend,dependent,2521,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1889,usability,clear,clear,1889,"the problem)` 500+ tests are broken? > I would appreciate if we can coordinate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2157,usability,behavi,behavior,2157,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2873,usability,user,user,2873,"nate next time such breaking changes before asking for a llvm review and land patches in these particularly sensitive areas. I explicitly added you to the list of reviewers for the original patch, there is little more I can do than that. And more coordination is exactly what I am trying to do now. If we cannot reach a conclusion may I at least be added to review whatever your solution looks like? > 1. I plan to remove the NDEBUG assert. Already done in D33529. > 2. Make the std::vector<void*> a std::vector<llvm::PointerIntPair<void*, 1, bool>>. How can you guarantee that the platform will deliver a pointer with proper alignment for that? > 3. I will change the search order to search for first the one that are not marked RTLD_GLOBAL. So any other client that wants to open thing's with RTLD_LOCAL will then expose what they thought were private symbols to the JIT as a whole? > One of the issues is that it is not clear to me is what exactly is your use case and this is why there are misunderstandings. I also don't understand why there are mis-understandings, but have explained the use case a few times now and **3** will explicitly break that as well as provide bizarre default behavior:. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. > . > ```. > DynamicLibrary::getPermanentLibrary(NULL). > // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so""). > ```. > In your scheme the JIT can pull operator new/delete from libA.so, and worse is that whether it pulls operator new/delete from libA.so is dependent on whether operator new/delete has been resolved in **// Other code** before libA.so has been loaded. > . The example can be expanded to RTTI information, exceptions, and a host of other problems. And even worse than that is that in your scheme there is no way of hiding symbols from the global scope, in fact it promotes everything that the user reasonably expected to be private (via RTLD_LOCAL) to take dominance over anything else.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2644,availability,operat,operator,2644,". > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2817,availability,operat,operator,2817,"r<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2889,availability,operat,operator,2889,"w can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2949,availability,operat,operator,2949," with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:230,deployability,build,build,230,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:780,deployability,build,build,780,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:867,deployability,fail,fails,867,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1379,deployability,patch,patches,1379,"ithub.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1503,deployability,patch,patch,1503,"plementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2928,deployability,depend,dependent,2928,"ll deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notification",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3679,deployability,releas,release,3679,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3033,energy efficiency,load,loaded,3033,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2928,integrability,depend,dependent,2928,"ll deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notification",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1292,interoperability,coordinat,coordinate,1292,"he issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1560,interoperability,coordinat,coordination,1560,"s. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1922,interoperability,platform,platform,1922,"at cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2928,modifiability,depend,dependent,2928,"ll deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notification",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:445,performance,time,time,445,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:592,performance,time,time,592,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1308,performance,time,time,1308,"on't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exact",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2483,performance,time,times,2483,"the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3033,performance,load,loaded,3033,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:867,reliability,fail,fails,867,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:851,safety,test,test,851,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:890,safety,review,reviews,890,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1206,safety,test,tests,1206,"s going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were priv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1363,safety,review,review,1363,"pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunde",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1379,safety,patch,patches,1379,"ithub.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1472,safety,review,reviewers,1472," > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1503,safety,patch,patch,1503,"plementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1679,safety,review,review,1679,"f what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2928,safety,depend,dependent,2928,"ll deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notification",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3095,safety,except,exceptions,3095,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3321,safety,safe,safe,3321,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1379,security,patch,patches,1379,"ithub.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1503,security,patch,patch,1503,"plementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2175,security,expos,expose,2175,"know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3947,security,auth,auth,3947,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:851,testability,test,test,851,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:890,testability,review,reviews,890,"On 07/07/17 23:36, marsupial wrote:. >. > I appreciate your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1050,testability,verif,verify,1050,"e your proposed solutions but I do not really have a. > lot of bandwidth nowadays to investigate why they do not work for. > us. You will probably see what's going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1206,testability,test,tests,1206,"s going wrong if you build this PR. > locally. >. > I have built locally and don't see the issue (I don't even know what . > I'm looking for). Both you and @pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were priv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1363,testability,review,review,1363,"pcanal <https://github.com/pcanal> . > asked me to fix this and I spent actual time trying to figure out what . > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunde",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1472,testability,review,reviewers,1472," > you guys were after and implementing a solution that has little cost . > for both of us. I too suffer from lack time, so asking me to do work . > then walking away without even giving a single example of what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1679,testability,review,review,1679,"f what is . > broken seems a bit rude.... >. Hm, for me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1731,testability,plan,plan,1731,"r me the issue was obvious, sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > Dyn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1757,testability,assert,assert,1757," sorry. You need to build ROOT, start . it and type `int i`. >. > Seriously, can I get one test that still fails with . > https://reviews.llvm.org/D33529 ? >. > If that cannot be done could @pcanal <https://github.com/pcanal> or . > @Axel-Naumann <https://github.com/axel-naumann> at least verify that . > after applying D33529 and setting |DynamicLibrary::SearchOrder = . > SO_LoadedFirst; // or SO_LoadedLast (don't know the problem)| 500+ . > tests are broken? >. Now trying with SO_LoadedLast. >. > I would appreciate if we can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2396,testability,understand,understand,2396,"rticularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2425,testability,understand,understandings,2425,"> I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2928,testability,depend,dependent,2928,"ll deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notification",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3594,testability,understand,understand,3594,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2285,usability,clear,clear,2285,"can coordinate next time such breaking. > changes before asking for a llvm review and land patches in these. > particularly sensitive areas. >. > I explicitly added you to the list of reviewers for the original . > patch, there is little more I can do than that. And more coordination . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:2567,usability,behavi,behavior,2567,"n . > is exactly what I am trying to do now. If we cannot reach a conclusion . > may I at least be added to review whatever your solution looks like? >. > 1. I plan to remove the NDEBUG assert. >. > Already done in D33529. >. > 2. Make the std::vector<void*> a. > std::vector<llvm::PointerIntPair<void*, 1, bool>>. >. > How can you guarantee that the platform will deliver a pointer with . > proper alignment for that? >. > 3. I will change the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance ov",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3229,usability,behavi,behavior,3229,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:3491,usability,user,user,3491,"ge the search order to search for first the one. > that are not marked RTLD_GLOBAL. >. > So any other client that wants to open thing's with RTLD_LOCAL will . > then expose what they thought were private symbols to the JIT as a whole? >. > One of the issues is that it is not clear to me is what exactly is. > your use case and this is why there are misunderstandings. >. > I also don't understand why there are mis-understandings, but have . > explained the use case a few times now and *3* will explicitly break . > that as well as provide bizarre default behavior:. >. > libc++.so, libA.so. > libA.so defines an overload for global operator new/delete. >. > |DynamicLibrary::getPermanentLibrary(NULL) // Other code. > DynamicLibrary::getPermanentLibrary(""libA.so"") |. >. > In your scheme the JIT can pull operator new/delete from libA.so,. > and worse is that whether it pulls operator new/delete from. > libA.so is dependent on whether operator new/delete has been. > resolved in *// Other code* before libA.so has been loaded. >. > The example can be expanded to RTTI information, exceptions, and a . > host of other problems. >. No, this would not break the case you mentioned. The case that will . have a special behavior is if you called . `DynamicLibrary::addPermanentLibrary(handle)`. So you should be safe there. >. > And even worse than that is that in your scheme there is no way of . > hiding symbols from the global scope, in fact it promotes everything . > that the user reasonably expected to be private (via RTLD_LOCAL) to . > take dominance over anything else. >. I understand that and I am totally fine for fixing this the right way . after the llvm release. >. > —. > You are receiving this because you were assigned. > Reply to this email directly, view it on GitHub . > <https://github.com/root-project/root/pull/744#issuecomment-313799028>, . > or mute the thread . > <https://github.com/notifications/unsubscribe-auth/AGNuU_J817GPmYooZ_jUyw85N6Y9ayBUks5sLqTrgaJpZM4OO5d2>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:107,energy efficiency,green,greenlit,107,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:371,energy efficiency,core,core,371,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:137,integrability,coupl,couple,137,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:137,modifiability,coupl,couple,137,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:298,security,modif,modify,298,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:137,testability,coupl,couple,137,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:60,usability,intuit,intuitive,60,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:166,usability,feedback,feedback,166,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:179,usability,person,personal,179,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:236,usability,close,close,236,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:253,usability,behavi,behavior,253,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:414,usability,help,helping,414,"@marsupial using `SO_LoadedLast` (which is somewhat counter-intuitive to our use case) seems to work. I've greenlit D33529 but give Lang couple of hours/days to give feedback. My personal opinion is that it should be the default, being close to the old behavior. If not, could you point us what to modify to set it [here](https://github.com/root-project/root/blob/master/core/base/src/TROOT.cxx#L1945). Thanks for helping me out to sort this out!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:55,deployability,build,build,55,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:172,deployability,patch,patch,172,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:221,interoperability,conflict,conflict,221,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:750,interoperability,conflict,conflicts,750,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:172,safety,patch,patch,172,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:283,safety,except,except,283,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:303,safety,test,test,303,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:607,safety,safe,safe,607,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:172,security,patch,patch,172,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:718,security,hack,hackie,718,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:298,testability,unit,unit-test,298,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:514,usability,behavi,behavior,514,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:675,usability,behavi,behavior,675,"> Hm, for me the issue was obvious, sorry. You need to build ROOT, start. it and type `int i`. Yes and before D33529 I see a problem, after I do not. Is there a chance the patch you are using is outdated or got borked in conflict resolution? This is what I have (all applied cleanly except for the unit-test which ROOT seems to drop), and you really only need the first 3 commits. https://github.com/marsupial/root/tree/PR/1. > No, this would not break the case you mentioned. The case that will. > have a special behavior is if you called. > `DynamicLibrary::getPermanentLibrary(handle)`. So you should be safe there. So if one calls DynamicLibrary::addPermanentLibrary the behavior will differ? That seems extremely hackie, (and would likely cause conflicts with everything I'm trying to get into DynamicLibrary).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1252,availability,down,down,1252,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:505,energy efficiency,load,loaded,505,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:572,energy efficiency,load,loaded,572,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:684,energy efficiency,load,loaded,684,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:855,energy efficiency,load,loaded,855,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:902,energy efficiency,load,loaded,902,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:505,performance,load,loaded,505,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:572,performance,load,loaded,572,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:684,performance,load,loaded,684,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:855,performance,load,loaded,855,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:902,performance,load,loaded,902,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1234,safety,compl,completely,1234,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1234,security,compl,completely,1234,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1170,testability,understand,understand,1170,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:49,usability,intuit,intuitive,49,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:971,usability,help,helping,971,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1084,usability,person,personal,1084,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1141,usability,close,close,1141,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1158,usability,behavi,behavior,1158,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1225,usability,behavi,behavior,1225,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:1280,usability,paus,pause,1280,"> using SO_LoadedLast (which is somewhat counter-intuitive to our use case) seems to work. I agree `SO_LoadedLast` shouldn't be what your after especially if it works with `SO_LoadedFirst` here. Diff-ing my PR1 vs your JITRTLD_LOCAL shows something went screwy, in particular:. DynamicLibrary.h@91 should be:. ```. enum SearchOrdering {. /// SO_Linker - Search as a call to dlsym(dlopen(NULL)) would when. /// DynamicLibrary::getPermanentLibrary(NULL) has been called or. /// search the list of explcitly loaded symbols if not. SO_Linker,. /// SO_LoadedFirst - Search all loaded libraries, then as SO_Linker would. SO_LoadedFirst,. /// SO_LoadedLast - Search as SO_Linker would, then loaded libraries. /// Only useful to search if libraries with RTLD_LOCAL have been added. SO_LoadedLast,. /// SO_LoadOrder - Or this in to search libraries in the ordered loaded. /// The default bahaviour is to search loaded libraries in reverse. SO_LoadOrder = 4. };. ```. > Thanks for helping me out to sort this out! No problem, but lets sort if it can be accomplished with `SO_LoadedFirst`. > My personal opinion is that it should be the default, being close to the old behavior. I understand that but do my examples or the fact the old behavior completely breaks down on Windows give you no pause?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:4,deployability,patch,patch,4,The patch landed in llvm proper. Closing this testing PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:4,safety,patch,patch,4,The patch landed in llvm proper. Closing this testing PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:46,safety,test,testing,46,The patch landed in llvm proper. Closing this testing PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:4,security,patch,patch,4,The patch landed in llvm proper. Closing this testing PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/744:46,testability,test,testing,46,The patch landed in llvm proper. Closing this testing PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/744
https://github.com/root-project/root/pull/745:612,availability,Failur,Failures,612,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:661,availability,Failur,Failures,661,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:28,deployability,build,build,28,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:82,deployability,build,build,82,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:196,deployability,Fail,Failing,196,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:612,deployability,Fail,Failures,612,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:661,deployability,Fail,Failures,661,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:565,integrability,Transform,Transform,565,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:565,interoperability,Transform,Transform,565,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:612,performance,Failur,Failures,612,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:661,performance,Failur,Failures,661,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:124,reliability,doe,doesn,124,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:196,reliability,Fail,Failing,196,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:612,reliability,Fail,Failures,612,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:661,reliability,Fail,Failures,661,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:148,safety,test,test,148,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:204,safety,Test,Tests,204,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:639,safety,Test,Tests,639,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:148,testability,test,test,148,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:204,testability,Test,Tests,204,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:536,testability,Regress,Regression,536,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:639,testability,Test,Tests,639,"According to this [Appveyor build](https://ci.appveyor.com/project/bellenot/cling/build/1.0.277/job/gk9h7ml1fbxwkiu8), this doesn't look to fix any test (not even CodeGeneration/Statics.C):. ```. Failing Tests (11):. Cling :: CodeGeneration/Statics.C. Cling :: CodeGeneration/Symbols.C. Cling :: CodeGeneration/TLSVars.C. Cling :: CodeUnloading/PCH/VTablesClingPCH.C. Cling :: Driver/Gnu.C. Cling :: Lookup/data.C. Cling :: Lookup/func.C. Cling :: NullDeref/MethodCalls.C. Cling :: Prompt/OutputRedirect.C. Cling :: Prompt/ValuePrinter/Regression.C. Cling :: Utils/Transform.C. . Expected Passes : 109. Expected Failures : 12. Unsupported Tests : 1. Unexpected Failures: 11. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:155,deployability,Releas,Release,155,Appveyor is also saying it is generating a warning which it should not be doing. What does it do/say when applied locally? I just tried locally with ELF & Release and it passed...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:86,reliability,doe,does,86,Appveyor is also saying it is generating a warning which it should not be doing. What does it do/say when applied locally? I just tried locally with ELF & Release and it passed...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:19,deployability,build,builds,19,"And prior Appveyor builds show CodeGeneration/Statics.C was just crashing, so it does fix _something_.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:81,reliability,doe,does,81,"And prior Appveyor builds show CodeGeneration/Statics.C was just crashing, so it does fix _something_.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:38,deployability,log,log,38,"Sorry @marsupial, I overlooked at the log, I just saw the same tests failing before and after... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:69,deployability,fail,failing,69,"Sorry @marsupial, I overlooked at the log, I just saw the same tests failing before and after... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:69,reliability,fail,failing,69,"Sorry @marsupial, I overlooked at the log, I just saw the same tests failing before and after... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:38,safety,log,log,38,"Sorry @marsupial, I overlooked at the log, I just saw the same tests failing before and after... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:63,safety,test,tests,63,"Sorry @marsupial, I overlooked at the log, I just saw the same tests failing before and after... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:38,security,log,log,38,"Sorry @marsupial, I overlooked at the log, I just saw the same tests failing before and after... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:38,testability,log,log,38,"Sorry @marsupial, I overlooked at the log, I just saw the same tests failing before and after... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:63,testability,test,tests,63,"Sorry @marsupial, I overlooked at the log, I just saw the same tests failing before and after... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:39,availability,consist,consistent,39,"BTW, the indentation in this PR is not consistent (sometimes two spaces, sometimes four...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:39,usability,consist,consistent,39,"BTW, the indentation in this PR is not consistent (sometimes two spaces, sometimes four...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:155,deployability,integr,integrate,155,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:170,deployability,updat,updates,170,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:155,integrability,integr,integrate,155,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:155,interoperability,integr,integrate,155,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:155,modifiability,integr,integrate,155,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:155,reliability,integr,integrate,155,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:170,safety,updat,updates,170,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:155,security,integr,integrate,155,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:170,security,updat,updates,170,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:155,testability,integr,integrate,155,"I assume you are talking about EmuTLS.cpp? The original is from compiler-rt, which poached it from gcc. Keeping the indentation at 4 makes it easier to re-integrate when updates occur. BTW, could you look at https://github.com/root-project/cling/pull/174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:6,testability,understand,understand,6,"OK, I understand, it makes sense, thanks for the explanation. And see my comment on the [PR-174](https://github.com/root-project/cling/pull/174)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:0,reliability,Doe,Does,0,Does [177](https://github.com/root-project/cling/pull/177) supersede this one? Shall we close it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:88,usability,close,close,88,Does [177](https://github.com/root-project/cling/pull/177) supersede this one? Shall we close it?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:179,deployability,contain,contains,179,"This is a subset, but crashes OS X & linux too (see test/CodeGeneration/TLSVars.C) so might be worth dealing with on its own as it can easily be taken out of 177. 177 is huge and contains everything necessary for Windows to pass. (As far as i know https://ci.appveyor.com/project/bellenot/cling/build/1.0.312)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:295,deployability,build,build,295,"This is a subset, but crashes OS X & linux too (see test/CodeGeneration/TLSVars.C) so might be worth dealing with on its own as it can easily be taken out of 177. 177 is huge and contains everything necessary for Windows to pass. (As far as i know https://ci.appveyor.com/project/bellenot/cling/build/1.0.312)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:10,integrability,sub,subset,10,"This is a subset, but crashes OS X & linux too (see test/CodeGeneration/TLSVars.C) so might be worth dealing with on its own as it can easily be taken out of 177. 177 is huge and contains everything necessary for Windows to pass. (As far as i know https://ci.appveyor.com/project/bellenot/cling/build/1.0.312)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:52,safety,test,test,52,"This is a subset, but crashes OS X & linux too (see test/CodeGeneration/TLSVars.C) so might be worth dealing with on its own as it can easily be taken out of 177. 177 is huge and contains everything necessary for Windows to pass. (As far as i know https://ci.appveyor.com/project/bellenot/cling/build/1.0.312)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:52,testability,test,test,52,"This is a subset, but crashes OS X & linux too (see test/CodeGeneration/TLSVars.C) so might be worth dealing with on its own as it can easily be taken out of 177. 177 is huge and contains everything necessary for Windows to pass. (As far as i know https://ci.appveyor.com/project/bellenot/cling/build/1.0.312)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On now that I've fixed the cling tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:73,safety,test,tests,73,@phsft-bot build with flags -Dclingtest=On now that I've fixed the cling tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:73,testability,test,tests,73,@phsft-bot build with flags -Dclingtest=On now that I've fixed the cling tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:43,deployability,build,build,43,@bellenot is it understood why the windows build fails here? It this WIP?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:49,deployability,fail,fails,49,@bellenot is it understood why the windows build fails here? It this WIP?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:49,reliability,fail,fails,49,@bellenot is it understood why the windows build fails here? It this WIP?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:11,deployability,build,build,11,@phsft-bot build with flags -Dclingtest=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:32,performance,time,time,32,@moneta I would keep it for the time being (it is not clear what has been taken and what not...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/745:54,usability,clear,clear,54,@moneta I would keep it for the time being (it is not clear what has been taken and what not...),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/745
https://github.com/root-project/root/pull/747:117,energy efficiency,reduc,reduced,117,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:192,energy efficiency,CPU,CPU,192,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:219,energy efficiency,reduc,reduced,219,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:95,performance,time,time,95,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:192,performance,CPU,CPU,192,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:196,performance,time,time,196,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:308,performance,I/O,I/O,308,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:319,performance,disk,disk,319,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:373,performance,I/O,I/O,373,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:399,performance,bottleneck,bottleneck,399,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:455,performance,time,time,455,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:568,performance,time,time,568,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:103,security,sign,significantly,103,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:354,usability,clear,clearly,354,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:629,usability,user,user-images,629,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:744,usability,user,user-images,744,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:859,usability,user,user-images,859,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/747:14,interoperability,format,format,14,"Merged. Clang-format wanted to put my `if` on a single long line, so I ignored that and fixed the rest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/747
https://github.com/root-project/root/pull/748:20,deployability,updat,update,20,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:161,deployability,releas,releases,161,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:518,deployability,stack,stackflow,518,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:537,deployability,stack,stackoverflow,537,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:723,deployability,build,build,723,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:426,performance,time,time,426,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:578,reliability,doe,does-apple-clang-disallow-,578,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:20,safety,updat,update,20,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:20,security,updat,update,20,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:486,security,session,sessions,486,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:42,usability,support,support,42,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:170,usability,support,supports,170,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:641,usability,support,supports,641,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/748:711,usability,support,support,711,"Thanks for this fix/update. > There is no support for thread_local on macOS,. This is no longer true: "" The clang compiler included with the Xcode 8 Beta and GM releases supports the C++11 thread_local keyword. This capability was discussed in the[ WWDC 2016 video ""What's New in LLVM""](https://developer.apple.com/videos/play/wwdc2016/405/), beginning at the [5:50 mark](https://developer.apple.com/videos/play/wwdc2016-405/?time=354). ([external transcript](http://asciiwwdc.com/2016/sessions/405#t=354.596))"" (via [stackflow](https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports)). I am guessing from the fact you needed this that we still support and build with XCode 7. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/748
https://github.com/root-project/root/pull/749:11,deployability,build,build,11,@phsft-bot build just on slc6/classic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/749
https://github.com/root-project/root/pull/749:11,deployability,build,build,11,@phsft-bot build just on centos7/classic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/749
https://github.com/root-project/root/pull/749:11,deployability,build,build,11,@phsft-bot build just on centos7/classic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/749
https://github.com/root-project/root/pull/750:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:26,availability,servic,services,26,"![](https://github.trello.services/images/mini-trello-icon.png) [Enable LZ4 as a global for ROOT master, 6.10, 6.08 and 5.34 tags](https://trello.com/c/tEkA4LDN/1-enable-lz4-as-a-global-for-root-master-610-608-and-534-tags)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:26,deployability,servic,services,26,"![](https://github.trello.services/images/mini-trello-icon.png) [Enable LZ4 as a global for ROOT master, 6.10, 6.08 and 5.34 tags](https://trello.com/c/tEkA4LDN/1-enable-lz4-as-a-global-for-root-master-610-608-and-534-tags)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:26,integrability,servic,services,26,"![](https://github.trello.services/images/mini-trello-icon.png) [Enable LZ4 as a global for ROOT master, 6.10, 6.08 and 5.34 tags](https://trello.com/c/tEkA4LDN/1-enable-lz4-as-a-global-for-root-master-610-608-and-534-tags)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:26,modifiability,servic,services,26,"![](https://github.trello.services/images/mini-trello-icon.png) [Enable LZ4 as a global for ROOT master, 6.10, 6.08 and 5.34 tags](https://trello.com/c/tEkA4LDN/1-enable-lz4-as-a-global-for-root-master-610-608-and-534-tags)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:68,usability,close,close,68,"I guess this pull request is obsolete, right? Can someone check and close, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:70,interoperability,conflict,conflict,70,"@pcanal no-no, I know, I just wanted to test on Jenkins and fix merge conflict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:40,safety,test,test,40,"@pcanal no-no, I know, I just wanted to test on Jenkins and fix merge conflict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:40,testability,test,test,40,"@pcanal no-no, I know, I just wanted to test on Jenkins and fix merge conflict...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:0,safety,Test,Tests,0,Tests are fixed in https://github.com/root-project/roottest/pull/135,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:0,testability,Test,Tests,0,Tests are fixed in https://github.com/root-project/roottest/pull/135,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:23,safety,test,tests,23,"@pcanal I have PR with tests https://github.com/root-project/roottest/pull/135, I tested locally with zlib and lz4 (there are still no references for lzma, but I think to add them later, if it will be needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:82,safety,test,tested,82,"@pcanal I have PR with tests https://github.com/root-project/roottest/pull/135, I tested locally with zlib and lz4 (there are still no references for lzma, but I think to add them later, if it will be needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:23,testability,test,tests,23,"@pcanal I have PR with tests https://github.com/root-project/roottest/pull/135, I tested locally with zlib and lz4 (there are still no references for lzma, but I think to add them later, if it will be needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:82,testability,test,tested,82,"@pcanal I have PR with tests https://github.com/root-project/roottest/pull/135, I tested locally with zlib and lz4 (there are still no references for lzma, but I think to add them later, if it will be needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:53,deployability,build,build,53,roottest changes have been merge. So relaunching the build for one last check.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:9,availability,error,error,9,The sole error report seems to be an infrastructure problem of sort. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:37,deployability,infrastructur,infrastructure,37,The sole error report seems to be an infrastructure problem of sort. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:9,performance,error,error,9,The sole error report seems to be an infrastructure problem of sort. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:9,safety,error,error,9,The sole error report seems to be an infrastructure problem of sort. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/750:9,usability,error,error,9,The sole error report seems to be an infrastructure problem of sort. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/750
https://github.com/root-project/root/pull/752:31,safety,test,tested,31,"Just for information, this was tested on KNL with 200 threads without a crash. More testing is needed, but I think that this is definitely a step in the right direction. Thanks @Teemperor for worknig on this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:84,safety,test,testing,84,"Just for information, this was tested on KNL with 200 threads without a crash. More testing is needed, but I think that this is definitely a step in the right direction. Thanks @Teemperor for worknig on this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:31,testability,test,tested,31,"Just for information, this was tested on KNL with 200 threads without a crash. More testing is needed, but I think that this is definitely a step in the right direction. Thanks @Teemperor for worknig on this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:84,testability,test,testing,84,"Just for information, this was tested on KNL with 200 threads without a crash. More testing is needed, but I think that this is definitely a step in the right direction. Thanks @Teemperor for worknig on this!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:17,deployability,depend,dependencies,17,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:202,deployability,build,build,202,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:17,integrability,depend,dependencies,17,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:17,modifiability,depend,dependencies,17,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:17,safety,depend,dependencies,17,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:80,safety,prevent,prevent,80,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:80,security,preven,prevent,80,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:17,testability,depend,dependencies,17,I also added the dependencies for rootcling regarding the BUILTINS. This should prevent the unlikely case that rootcling starts before the BUILTINS are ready (which is more likely once we don't have to build LLVM anymore).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:28,deployability,modul,module,28,"Ok, seems like touching the module names is making everything collapse. Let's just change the G__*.cxx filenames...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:28,modifiability,modul,module,28,"Ok, seems like touching the module names is making everything collapse. Let's just change the G__*.cxx filenames...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:28,safety,modul,module,28,"Ok, seems like touching the module names is making everything collapse. Let's just change the G__*.cxx filenames...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:76,deployability,depend,dependencies,76,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:76,integrability,depend,dependencies,76,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:130,integrability,messag,messages,130,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:30,interoperability,platform,platforms,30,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:130,interoperability,messag,messages,130,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:76,modifiability,depend,dependencies,76,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:8,safety,test,tests,8,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:76,safety,depend,dependencies,76,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:8,testability,test,tests,8,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:57,testability,trace,traces,57,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:76,testability,depend,dependencies,76,"Ok, all tests pass now on all platforms. I don't see any traces for missing dependencies anymore (e.g. multiple `Generating G__*` messages for the same target).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:203,interoperability,socket,socket,203,@Axel-Naumann Could you please take a final look and merge? I believe this PR fixes [ROOT-8244](https://sft.its.cern.ch/jira/browse/ROOT-8244). I tested with `make` on KNL with 256 threads and on a dual-socket Xeon machine (72 threads) and don't see race conditions anymore. @Teemperor Thanks for fixing this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:146,safety,test,tested,146,@Axel-Naumann Could you please take a final look and merge? I believe this PR fixes [ROOT-8244](https://sft.its.cern.ch/jira/browse/ROOT-8244). I tested with `make` on KNL with 256 threads and on a dual-socket Xeon machine (72 threads) and don't see race conditions anymore. @Teemperor Thanks for fixing this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:203,security,soc,socket,203,@Axel-Naumann Could you please take a final look and merge? I believe this PR fixes [ROOT-8244](https://sft.its.cern.ch/jira/browse/ROOT-8244). I tested with `make` on KNL with 256 threads and on a dual-socket Xeon machine (72 threads) and don't see race conditions anymore. @Teemperor Thanks for fixing this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:146,testability,test,tested,146,@Axel-Naumann Could you please take a final look and merge? I believe this PR fixes [ROOT-8244](https://sft.its.cern.ch/jira/browse/ROOT-8244). I tested with `make` on KNL with 256 threads and on a dual-socket Xeon machine (72 threads) and don't see race conditions anymore. @Teemperor Thanks for fixing this!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:52,energy efficiency,green,green,52,"@amadio, I'd prefer @Axel-Naumann to have given his green light and my comments to be addressed. Why did you find this so urgent to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:13,usability,prefer,prefer,13,"@amadio, I'd prefer @Axel-Naumann to have given his green light and my comments to be addressed. Why did you find this so urgent to merge?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:11,safety,test,test,11,"We need to test thoroughly, and I wanted to give it a go at the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/752:11,testability,test,test,11,"We need to test thoroughly, and I wanted to give it a go at the nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/752
https://github.com/root-project/root/pull/754:38,energy efficiency,current,current,38,I think the name is perfect given the current implementation!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/754
https://github.com/root-project/root/pull/755:11,deployability,build,build,11,@phsft-bot build also on centos7/classic,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/755
https://github.com/root-project/root/pull/758:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/758:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/758:29,safety,compl,complaints,29,Could you address the travis complaints?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/758:29,security,compl,complaints,29,Could you address the travis complaints?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/758:154,deployability,build,building,154,"@vgvassilev I can address the space before the comment text thing, but I don't agree with the other suggested changes (one liners or line splitters). I'm building again on that mac to see if it fails again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/758:194,deployability,fail,fails,194,"@vgvassilev I can address the space before the comment text thing, but I don't agree with the other suggested changes (one liners or line splitters). I'm building again on that mac to see if it fails again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/758:194,reliability,fail,fails,194,"@vgvassilev I can address the space before the comment text thing, but I don't agree with the other suggested changes (one liners or line splitters). I'm building again on that mac to see if it fails again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/758:11,deployability,build,build,11,@phsft-bot build on mac1012/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/758:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/758
https://github.com/root-project/root/pull/759:11,deployability,Updat,Updated,11,@Teemperor Updated LinkDef3.h here: https://github.com/root-project/root/pull/762 . Let me know if it works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/759:11,safety,Updat,Updated,11,@Teemperor Updated LinkDef3.h here: https://github.com/root-project/root/pull/762 . Let me know if it works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/759:11,security,Updat,Updated,11,@Teemperor Updated LinkDef3.h here: https://github.com/root-project/root/pull/762 . Let me know if it works,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/759:11,deployability,build,build,11,@phsft-bot build! Now we hopefully have no more warnings as #762 got merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/759:21,deployability,modul,modules,21,Is it worth adding a modules build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/759:29,deployability,build,build,29,Is it worth adding a modules build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/759:21,modifiability,modul,modules,21,Is it worth adding a modules build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/759:21,safety,modul,modules,21,Is it worth adding a modules build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/759:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/759
https://github.com/root-project/root/pull/760:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:24,safety,test,test,24,Would it be possible to test this with Python3 as well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:24,testability,test,test,24,Would it be possible to test this with Python3 as well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:128,usability,user,user,128,"Hi,. But this only works when default palette is used. And even default ROOT palette may differ from default JSROOT palette. If user changes color palette, list of colors will be different. . Do you check this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:79,energy efficiency,current,current,79,"@hshe824, why you want to add ConvertToJSONGraphics to TBufferJSON class? Your current method does not use any internal functions of TBufferJSON class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:94,reliability,doe,does,94,"@hshe824, why you want to add ConvertToJSONGraphics to TBufferJSON class? Your current method does not use any internal functions of TBufferJSON class",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:206,energy efficiency,current,currently,206,"Hi @linev,. I am not familiar with how the palette works in ROOT and JSROOT, as I am still getting started with this. What would your advice be on how to best check and test this? For one of my tasks, I am currently in the process of implementing the same functionality of trimming (TColors) in C++ rather than python as requested by Danilo. I was going to do this in the ConvertToJSONGraphics method, which would replace the respective python methods. Cheers,. Harry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:169,safety,test,test,169,"Hi @linev,. I am not familiar with how the palette works in ROOT and JSROOT, as I am still getting started with this. What would your advice be on how to best check and test this? For one of my tasks, I am currently in the process of implementing the same functionality of trimming (TColors) in C++ rather than python as requested by Danilo. I was going to do this in the ConvertToJSONGraphics method, which would replace the respective python methods. Cheers,. Harry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:169,testability,test,test,169,"Hi @linev,. I am not familiar with how the palette works in ROOT and JSROOT, as I am still getting started with this. What would your advice be on how to best check and test this? For one of my tasks, I am currently in the process of implementing the same functionality of trimming (TColors) in C++ rather than python as requested by Danilo. I was going to do this in the ConvertToJSONGraphics method, which would replace the respective python methods. Cheers,. Harry",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:53,safety,test,test,53,"> What would your advice be on how to best check and test this? I do not have good solution for you. As I mention - even when default palette is used in ROOT, there is no guarantee that default palette is exactly the same as default palette in JSROOT. . Probably, one could create special C++ class, which represent all palette colors in more compact way - list of TColor objects has a lot of unused information. > I was going to do this in the ConvertToJSONGraphics method, which would replace the respective python methods. My argument - TBufferJSON is not a proper place for such function. You should put it in separate sources, related to iPython graphics",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:53,testability,test,test,53,"> What would your advice be on how to best check and test this? I do not have good solution for you. As I mention - even when default palette is used in ROOT, there is no guarantee that default palette is exactly the same as default palette in JSROOT. . Probably, one could create special C++ class, which represent all palette colors in more compact way - list of TColor objects has a lot of unused information. > I was going to do this in the ConvertToJSONGraphics method, which would replace the respective python methods. My argument - TBufferJSON is not a proper place for such function. You should put it in separate sources, related to iPython graphics",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:155,usability,user,user,155,"I think we need a piece of code in the TPad, as discussed with @couet , to determine if the colourse can be skipped or not, something that tells us if the user went for custom colours. With that piece in place, we will selectively trim the json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/760:169,usability,custom,custom,169,"I think we need a piece of code in the TPad, as discussed with @couet , to determine if the colourse can be skipped or not, something that tells us if the user went for custom colours. With that piece in place, we will selectively trim the json.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/760
https://github.com/root-project/root/pull/761:20,deployability,modul,modules,20,Could you trigger a modules build as well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:28,deployability,build,build,28,Could you trigger a modules build as well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:20,modifiability,modul,modules,20,Could you trigger a modules build as well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:20,safety,modul,modules,20,Could you trigger a modules build as well?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:18,deployability,build,build,18,Will do when this build runs through.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:11,deployability,build,build,11,"@phsft-bot build with flags -Dcxxmodules=On. We're again stuck at centos7, so let's test modules with this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:89,deployability,modul,modules,89,"@phsft-bot build with flags -Dcxxmodules=On. We're again stuck at centos7, so let's test modules with this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:89,modifiability,modul,modules,89,"@phsft-bot build with flags -Dcxxmodules=On. We're again stuck at centos7, so let's test modules with this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:84,safety,test,test,84,"@phsft-bot build with flags -Dcxxmodules=On. We're again stuck at centos7, so let's test modules with this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:89,safety,modul,modules,89,"@phsft-bot build with flags -Dcxxmodules=On. We're again stuck at centos7, so let's test modules with this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:84,testability,test,test,84,"@phsft-bot build with flags -Dcxxmodules=On. We're again stuck at centos7, so let's test modules with this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:11,deployability,build,build,11,@phsft-bot build just on clang_gcc62/slc6 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:11,deployability,build,build,11,@phsft-bot build just on clang_gcc62/slc6 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/761:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/761
https://github.com/root-project/root/pull/762:93,availability,slo,slot,93,"This fixed the warnings for me and passes on all systems, but it seems we didn't get a build slot on centos7 yet. As it will most likely also pass there too, can we get this merged @dpiparo that I can test #759 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/762
https://github.com/root-project/root/pull/762:87,deployability,build,build,87,"This fixed the warnings for me and passes on all systems, but it seems we didn't get a build slot on centos7 yet. As it will most likely also pass there too, can we get this merged @dpiparo that I can test #759 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/762
https://github.com/root-project/root/pull/762:93,reliability,slo,slot,93,"This fixed the warnings for me and passes on all systems, but it seems we didn't get a build slot on centos7 yet. As it will most likely also pass there too, can we get this merged @dpiparo that I can test #759 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/762
https://github.com/root-project/root/pull/762:201,safety,test,test,201,"This fixed the warnings for me and passes on all systems, but it seems we didn't get a build slot on centos7 yet. As it will most likely also pass there too, can we get this merged @dpiparo that I can test #759 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/762
https://github.com/root-project/root/pull/762:201,testability,test,test,201,"This fixed the warnings for me and passes on all systems, but it seems we didn't get a build slot on centos7 yet. As it will most likely also pass there too, can we get this merged @dpiparo that I can test #759 ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/762
https://github.com/root-project/root/pull/762:4,deployability,build,build,4,The build seems stuck on centos due to probably infrastructure. The rest of the builds seem fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/762
https://github.com/root-project/root/pull/762:48,deployability,infrastructur,infrastructure,48,The build seems stuck on centos due to probably infrastructure. The rest of the builds seem fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/762
https://github.com/root-project/root/pull/762:80,deployability,build,builds,80,The build seems stuck on centos due to probably infrastructure. The rest of the builds seem fine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/762
https://github.com/root-project/root/pull/763:11,deployability,build,build,11,"@phsft-bot build. No idea what's going on, maybe an infrastructure issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/763
https://github.com/root-project/root/pull/763:52,deployability,infrastructur,infrastructure,52,"@phsft-bot build. No idea what's going on, maybe an infrastructure issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/763
https://github.com/root-project/root/pull/764:12,interoperability,format,format,12,"sorry clang-format, markdown documentation sometimes cannot respect the 120 columns limit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/764
https://github.com/root-project/root/pull/764:29,usability,document,documentation,29,"sorry clang-format, markdown documentation sometimes cannot respect the 120 columns limit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/764
https://github.com/root-project/root/pull/766:250,availability,failur,failure,250,"Thanks! The compiler produces the one set of intrisics and when linking we cannot resolve them, i.e. the .o files have uses of `icc` intrisics and when linking we are linking against libstdc++ which has no knowledge about them. This caused a linking failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:250,deployability,fail,failure,250,"Thanks! The compiler produces the one set of intrisics and when linking we cannot resolve them, i.e. the .o files have uses of `icc` intrisics and when linking we are linking against libstdc++ which has no knowledge about them. This caused a linking failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:250,performance,failur,failure,250,"Thanks! The compiler produces the one set of intrisics and when linking we cannot resolve them, i.e. the .o files have uses of `icc` intrisics and when linking we are linking against libstdc++ which has no knowledge about them. This caused a linking failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:250,reliability,fail,failure,250,"Thanks! The compiler produces the one set of intrisics and when linking we cannot resolve them, i.e. the .o files have uses of `icc` intrisics and when linking we are linking against libstdc++ which has no knowledge about them. This caused a linking failure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:105,interoperability,platform,platform,105,"Gotcha, thanks! @vgvassilev - Do you have the ability to get Jenkins to force an ICC test? I notice that platform is missing in the comment above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:85,safety,test,test,85,"Gotcha, thanks! @vgvassilev - Do you have the ability to get Jenkins to force an ICC test? I notice that platform is missing in the comment above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:85,testability,test,test,85,"Gotcha, thanks! @vgvassilev - Do you have the ability to get Jenkins to force an ICC test? I notice that platform is missing in the comment above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:230,deployability,build,build,230,"Yes, we could enable icc, but it wouldn't test the problem you fixed. To reproduce one needs:. ```. export CC=icc; export CXX=icc. CC=gcc CXX=gcc cmake. ninja # still picks up icc for LZ4. ```. OTOH, I agree we should have an icc build as part of the PR builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:254,deployability,build,builds,254,"Yes, we could enable icc, but it wouldn't test the problem you fixed. To reproduce one needs:. ```. export CC=icc; export CXX=icc. CC=gcc CXX=gcc cmake. ninja # still picks up icc for LZ4. ```. OTOH, I agree we should have an icc build as part of the PR builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:42,safety,test,test,42,"Yes, we could enable icc, but it wouldn't test the problem you fixed. To reproduce one needs:. ```. export CC=icc; export CXX=icc. CC=gcc CXX=gcc cmake. ninja # still picks up icc for LZ4. ```. OTOH, I agree we should have an icc build as part of the PR builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/766:42,testability,test,test,42,"Yes, we could enable icc, but it wouldn't test the problem you fixed. To reproduce one needs:. ```. export CC=icc; export CXX=icc. CC=gcc CXX=gcc cmake. ninja # still picks up icc for LZ4. ```. OTOH, I agree we should have an icc build as part of the PR builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/766
https://github.com/root-project/root/pull/767:21,interoperability,format,formatting,21,"Still needs a lot of formatting, will do when I have time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:53,performance,time,time,53,"Still needs a lot of formatting, will do when I have time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:11,deployability,build,build,11,@phsft-bot build and stop being lazy,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:21,usability,stop,stop,21,@phsft-bot build and stop being lazy,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:11,deployability,build,build,11,@phsft-bot build. jenkins crashed during checkout...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:26,integrability,messag,message,26,"Can you rename the commit message. Looks good overall, let me know if I should test it on massively parallel machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:26,interoperability,messag,message,26,"Can you rename the commit message. Looks good overall, let me know if I should test it on massively parallel machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:100,performance,parallel,parallel,100,"Can you rename the commit message. Looks good overall, let me know if I should test it on massively parallel machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:79,safety,test,test,79,"Can you rename the commit message. Looks good overall, let me know if I should test it on massively parallel machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:79,testability,test,test,79,"Can you rename the commit message. Looks good overall, let me know if I should test it on massively parallel machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:226,availability,failur,failures,226,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:340,availability,failur,failures,340,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:226,deployability,fail,failures,226,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:340,deployability,fail,failures,340,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:141,energy efficiency,core,cores,141,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:226,performance,failur,failures,226,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:340,performance,failur,failures,340,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:226,reliability,fail,failures,226,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:340,reliability,fail,failures,340,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:18,safety,test,test,18,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:94,safety,test,tested,94,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:245,safety,test,testing,245,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:18,testability,test,test,18,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:94,testability,test,tested,94,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:245,testability,test,testing,245,"@peremato We will test everything on several places before merging. The previous changes were tested by me on my laptop, on a server with 36 cores, and on a KNL machine. I used 6, 70, and 250 threads, respectively, and had no failures. The same testing will happen for this PR to ensure that nothing breaks. Then we merge and check that no failures show up on the nightlies and incrementals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:101,deployability,build,build,101,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:180,deployability,instal,installation,180,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:199,deployability,instal,install,199,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:314,deployability,instal,installation,314,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:73,safety,test,tests,73,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:212,safety,compl,complete,212,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:212,security,compl,complete,212,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:73,testability,test,tests,73,"@amadio what I wanted to say is that it is not sufficient to run all the tests, which are run in the build directory and I assume will be done correctly, we need to check that the installation (make install) are complete and no header has been forgotten in the process. The new generic macro deals with the header installation and this is why we need to check carefully.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:52,deployability,modul,modulemap,52,"Probably one easy way to assert that is to diff the modulemap files before and after this patch. They work with the headers to be installed, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:90,deployability,patch,patch,90,"Probably one easy way to assert that is to diff the modulemap files before and after this patch. They work with the headers to be installed, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:130,deployability,instal,installed,130,"Probably one easy way to assert that is to diff the modulemap files before and after this patch. They work with the headers to be installed, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:52,modifiability,modul,modulemap,52,"Probably one easy way to assert that is to diff the modulemap files before and after this patch. They work with the headers to be installed, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:52,safety,modul,modulemap,52,"Probably one easy way to assert that is to diff the modulemap files before and after this patch. They work with the headers to be installed, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:90,safety,patch,patch,90,"Probably one easy way to assert that is to diff the modulemap files before and after this patch. They work with the headers to be installed, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:90,security,patch,patch,90,"Probably one easy way to assert that is to diff the modulemap files before and after this patch. They work with the headers to be installed, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:25,testability,assert,assert,25,"Probably one easy way to assert that is to diff the modulemap files before and after this patch. They work with the headers to be installed, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:51,deployability,instal,installed,51,We could also create a diff of a list of all files installed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:0,availability,ping,ping,0,ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:0,availability,Ping,Ping,0,Ping what? I reviewed 8 days ago.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:13,safety,review,reviewed,13,Ping what? I reviewed 8 days ago.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:13,testability,review,reviewed,13,Ping what? I reviewed 8 days ago.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:20,availability,ping,ping,20,"@peremato, it was a ping for @Teemperor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:0,deployability,Updat,Updated,0,"Updated, fixed a typo in one of the windows-only CMake files, fixed a few more differences between what headers are installed and formatted everything. Can someone give it a test install to double-check the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:116,deployability,instal,installed,116,"Updated, fixed a typo in one of the windows-only CMake files, fixed a few more differences between what headers are installed and formatted everything. Can someone give it a test install to double-check the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:179,deployability,instal,install,179,"Updated, fixed a typo in one of the windows-only CMake files, fixed a few more differences between what headers are installed and formatted everything. Can someone give it a test install to double-check the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:130,interoperability,format,formatted,130,"Updated, fixed a typo in one of the windows-only CMake files, fixed a few more differences between what headers are installed and formatted everything. Can someone give it a test install to double-check the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:0,safety,Updat,Updated,0,"Updated, fixed a typo in one of the windows-only CMake files, fixed a few more differences between what headers are installed and formatted everything. Can someone give it a test install to double-check the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:174,safety,test,test,174,"Updated, fixed a typo in one of the windows-only CMake files, fixed a few more differences between what headers are installed and formatted everything. Can someone give it a test install to double-check the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:0,security,Updat,Updated,0,"Updated, fixed a typo in one of the windows-only CMake files, fixed a few more differences between what headers are installed and formatted everything. Can someone give it a test install to double-check the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:174,testability,test,test,174,"Updated, fixed a typo in one of the windows-only CMake files, fixed a few more differences between what headers are installed and formatted everything. Can someone give it a test install to double-check the headers?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:29,deployability,instal,installed,29,I created a tarball with the installed files from the master branch and this branch and I see no difference when I apply a diff on the list of installed files. @vgvassilev Feel free to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/767:143,deployability,instal,installed,143,I created a tarball with the installed files from the master branch and this branch and I see no difference when I apply a diff on the list of installed files. @vgvassilev Feel free to merge.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/767
https://github.com/root-project/root/pull/768:56,availability,robust,robust,56,Very nice upgrade of the code. This paves the way for a robust and flexible way of using data sources different from ROOT trees.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/768
https://github.com/root-project/root/pull/768:10,deployability,upgrad,upgrade,10,Very nice upgrade of the code. This paves the way for a robust and flexible way of using data sources different from ROOT trees.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/768
https://github.com/root-project/root/pull/768:10,modifiability,upgrad,upgrade,10,Very nice upgrade of the code. This paves the way for a robust and flexible way of using data sources different from ROOT trees.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/768
https://github.com/root-project/root/pull/768:56,reliability,robust,robust,56,Very nice upgrade of the code. This paves the way for a robust and flexible way of using data sources different from ROOT trees.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/768
https://github.com/root-project/root/pull/768:56,safety,robust,robust,56,Very nice upgrade of the code. This paves the way for a robust and flexible way of using data sources different from ROOT trees.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/768
https://github.com/root-project/root/pull/769:4,deployability,fail,failed,4,"Eh, failed due to infrastructure problems on a single node... See https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2859/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/769
https://github.com/root-project/root/pull/769:18,deployability,infrastructur,infrastructure,18,"Eh, failed due to infrastructure problems on a single node... See https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2859/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/769
https://github.com/root-project/root/pull/769:118,deployability,build,build,118,"Eh, failed due to infrastructure problems on a single node... See https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2859/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/769
https://github.com/root-project/root/pull/769:4,reliability,fail,failed,4,"Eh, failed due to infrastructure problems on a single node... See https://epsft-jenkins.cern.ch/job/root-pullrequests-build/2859/console",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/769
https://github.com/root-project/root/pull/769:178,modifiability,refact,refactoring,178,"By the way, #767 will also fix this, but I wanted to get this ""functionality"" change in master. That way it doesn't matter if #767 takes a while because it's otherwise cosmetics/refactoring with NFC.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/769
https://github.com/root-project/root/pull/769:178,performance,refactor,refactoring,178,"By the way, #767 will also fix this, but I wanted to get this ""functionality"" change in master. That way it doesn't matter if #767 takes a while because it's otherwise cosmetics/refactoring with NFC.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/769
https://github.com/root-project/root/pull/769:108,reliability,doe,doesn,108,"By the way, #767 will also fix this, but I wanted to get this ""functionality"" change in master. That way it doesn't matter if #767 takes a while because it's otherwise cosmetics/refactoring with NFC.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/769
https://github.com/root-project/root/pull/772:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/772
https://github.com/root-project/root/pull/772:14,availability,failur,failure,14,"Tests passed, failure is an infrastructure problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/772
https://github.com/root-project/root/pull/772:14,deployability,fail,failure,14,"Tests passed, failure is an infrastructure problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/772
https://github.com/root-project/root/pull/772:28,deployability,infrastructur,infrastructure,28,"Tests passed, failure is an infrastructure problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/772
https://github.com/root-project/root/pull/772:14,performance,failur,failure,14,"Tests passed, failure is an infrastructure problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/772
https://github.com/root-project/root/pull/772:14,reliability,fail,failure,14,"Tests passed, failure is an infrastructure problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/772
https://github.com/root-project/root/pull/772:0,safety,Test,Tests,0,"Tests passed, failure is an infrastructure problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/772
https://github.com/root-project/root/pull/772:0,testability,Test,Tests,0,"Tests passed, failure is an infrastructure problem",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/772
https://github.com/root-project/root/pull/774:35,safety,review,reviewer,35,@pcanal - please add yourself as a reviewer?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:35,testability,review,reviewer,35,@pcanal - please add yourself as a reviewer?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:53,energy efficiency,alloc,alloc,53,related question: Did you investigate the cost of re-alloc (with various malloc libraries) when done with a large buffer (2Mb ish)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:114,integrability,buffer,buffer,114,related question: Did you investigate the cost of re-alloc (with various malloc libraries) when done with a large buffer (2Mb ish)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:31,safety,review,review,31,"@pcanal - OK, I got the direct review comments. How would you like to approach the remaining item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:31,testability,review,review,31,"@pcanal - OK, I got the direct review comments. How would you like to approach the remaining item?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:17,safety,avoid,avoid,17,@bbockelm We are avoid merge commit (except 'empty' one to really mark the 'merge' a long winded featture). Could you rebase instead?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:37,safety,except,except,37,@bbockelm We are avoid merge commit (except 'empty' one to really mark the 'merge' a long winded featture). Could you rebase instead?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:78,energy efficiency,alloc,allocation,78,"@pcanal - rebase done; additionally, I migrated all the potentially-expensive allocation timing tracking into an `#ifdef`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:96,availability,failur,failures,96,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:66,deployability,build,build,66,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:96,deployability,fail,failures,96,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:144,deployability,fail,failed,144,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:186,deployability,build,build,186,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:96,performance,failur,failures,96,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:96,reliability,fail,failures,96,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:144,reliability,fail,failed,144,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:151,safety,test,tests,151,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:87,testability,unit,unittest,87,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:151,testability,test,tests,151,"@pcanal - what's up with Jenkins? - Says it passed the Jenkins CI build (yet there are unittest failures in the comments?). - After I fixed the failed tests (I think!), it started a new build 19 hours ago and ... nothing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:92,interoperability,format,format,92,"I am not sure what happened. It seems to have started and finished now. As far as the clang-format recommendation are concerned, it is a mixed bag. Consecutive comments are intended to aligned (clang-format unalign them). The BIT values/assignments are supposed to be aligned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:200,interoperability,format,format,200,"I am not sure what happened. It seems to have started and finished now. As far as the clang-format recommendation are concerned, it is a mixed bag. Consecutive comments are intended to aligned (clang-format unalign them). The BIT values/assignments are supposed to be aligned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:118,modifiability,concern,concerned,118,"I am not sure what happened. It seems to have started and finished now. As far as the clang-format recommendation are concerned, it is a mixed bag. Consecutive comments are intended to aligned (clang-format unalign them). The BIT values/assignments are supposed to be aligned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:118,testability,concern,concerned,118,"I am not sure what happened. It seems to have started and finished now. As far as the clang-format recommendation are concerned, it is a mixed bag. Consecutive comments are intended to aligned (clang-format unalign them). The BIT values/assignments are supposed to be aligned.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:32,deployability,releas,release,32,Need test and documentation and release notes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:5,safety,test,test,5,Need test and documentation and release notes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:5,testability,test,test,5,Need test and documentation and release notes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:14,usability,document,documentation,14,Need test and documentation and release notes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:422,availability,cluster,cluster,422,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:693,availability,cluster,cluster,693,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:48,deployability,releas,release,48,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:422,deployability,cluster,cluster,422,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:693,deployability,cluster,cluster,693,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:93,energy efficiency,measur,measure,93,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:258,energy efficiency,alloc,allocation,258,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:282,energy efficiency,alloc,allocation,282,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:351,energy efficiency,alloc,allocation,351,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:377,energy efficiency,alloc,allocation,377,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:474,energy efficiency,alloc,allocation,474,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:500,energy efficiency,alloc,allocation,500,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:621,energy efficiency,measur,measure,621,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:293,performance,time,time,293,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:388,performance,time,time,388,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:511,performance,time,time,511,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:76,safety,test,test,76,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:127,safety,compl,complex,127,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:127,security,compl,complex,127,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:671,security,expos,expose,671,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:76,testability,test,test,76,"From Skype discussion with @pcanal -. - Missing release notes. - Please add test. - Could we measure the cost of writing out a complex CMS file (i.e., CMS's AOD) and look at both vsize and rss? Brian: yes:. - Base case: peak VSIZE 1345.59, peak RSS 888.809, allocation count is 30, allocation time is 173us. - Shrink-only: VSIZE 1305.08, RSS 866.391, allocation count is 4434, allocation time is 97031us. - One basket per cluster with shrinking: VSIZE 1478.58, RSS 902.781, allocation count is 2882, allocation time is 93596us. - We agreed to retest the CMS case with normal glibc malloc instead of jemalloc. - We should measure file size and total # of baskets. [Hence, expose one-basket-per-cluster mode with a `hadd` option?]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:26,usability,statu,status,26,"@bbockelm, can we put WIP status here, what you think about?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:77,deployability,releas,release,77,@pcanal - I'm rehabbing this request. I see we aimed to have a unit test and release notes added. Will try to get that over the next few days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:68,safety,test,test,68,@pcanal - I'm rehabbing this request. I see we aimed to have a unit test and release notes added. Will try to get that over the next few days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:63,testability,unit,unit,63,@pcanal - I'm rehabbing this request. I see we aimed to have a unit test and release notes added. Will try to get that over the next few days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:68,testability,test,test,68,@pcanal - I'm rehabbing this request. I see we aimed to have a unit test and release notes added. Will try to get that over the next few days.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:50,availability,failur,failures,50,@pcanal - can you make any sense out of the build failures? Looks baffling to me (seems fine locally).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:44,deployability,build,build,44,@pcanal - can you make any sense out of the build failures? Looks baffling to me (seems fine locally).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:50,deployability,fail,failures,50,@pcanal - can you make any sense out of the build failures? Looks baffling to me (seems fine locally).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:50,performance,failur,failures,50,@pcanal - can you make any sense out of the build failures? Looks baffling to me (seems fine locally).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:50,reliability,fail,failures,50,@pcanal - can you make any sense out of the build failures? Looks baffling to me (seems fine locally).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:105,availability,failur,failures,105,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:287,availability,failur,failures,287,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:105,deployability,fail,failures,105,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:185,deployability,build,building,185,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:287,deployability,fail,failures,287,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:105,performance,failur,failures,105,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:287,performance,failur,failures,287,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:105,reliability,fail,failures,105,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:287,reliability,fail,failures,287,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:91,safety,avoid,avoid,91,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:130,usability,stop,stopped,130,"@bbockelm Is your branch up to date? The problem might be an out of date source branch. To avoid cloning failures, we temporarily stopped rebasing PR branches on the target branch when building. If you get the latest roottest and run locally against your branch, you should see the same failures, so I'm surprised you don't. The long story short is, please rebase on master and keep your branch up to date while we fix Jenkins cloning problems.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:55,availability,error,errors,55,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:250,availability,Error,Error,250,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:157,deployability,build,build,157,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:199,deployability,build,build,199,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:205,deployability,build,build,205,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:301,deployability,fail,failed,301,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:139,energy efficiency,load,load,139,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:55,performance,error,errors,55,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:139,performance,load,load,139,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:250,performance,Error,Error,250,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:301,reliability,fail,failed,301,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:55,safety,error,errors,55,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:250,safety,Error,Error,250,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:55,usability,error,errors,55,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:250,usability,Error,Error,250,@amadio - I tried a rebase. Let's see how it goes! The errors are just bizarre. Here's a few:. > Fatal in <TROOT::InitInterpreter>: cannot load library /mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so: invalid ELF header. > Error in <TUnixSystem::WorkingDirectory>: getcwd() failed. :/ seems that converting a double to a float in `TTree.h` may not have caused that...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:311,availability,error,error,311,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:91,deployability,build,build,91,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:125,deployability,build,build,125,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:131,deployability,build,build,131,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:202,deployability,build,build,202,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:236,deployability,build,build,236,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:242,deployability,build,build,242,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:328,energy efficiency,current,current,328,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:176,performance,time,timeout,176,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:311,performance,error,error,311,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:65,safety,TEST,TEST,65,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:176,safety,timeout,timeout,176,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:283,safety,TEST,TEST,283,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:311,safety,error,error,311,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:362,security,access,access,362,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:65,testability,TEST,TEST,65,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:283,testability,TEST,TEST,283,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:70,usability,COMMAND,COMMAND,70,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:311,usability,error,error,311,@amadio - something still seems to be busted in Jenkins. ```. -- TEST COMMAND -- . cd /mnt/build/workspace/root-pullrequests-build/build/roottest/python/cmdLineUtils. /usr/bin/timeout -s USR2 270s /mnt/build/workspace/root-pullrequests-build/build/bin/rootls -1 move2.root. -- BEGIN TEST OUTPUT --. shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory. dir. fot. hprof. hpx. hpxpy. ```. Are other PRs having similar issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:13,usability,confirm,confirm,13,FWIW - I can confirm that my `roottest` invocation came back clean.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:38,deployability,modul,modulo,38,"@pcanal - OK, all should be addressed modulo the question above about adding a new `TMath` dependency to the `TTree` code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:91,deployability,depend,dependency,91,"@pcanal - OK, all should be addressed modulo the question above about adding a new `TMath` dependency to the `TTree` code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:91,integrability,depend,dependency,91,"@pcanal - OK, all should be addressed modulo the question above about adding a new `TMath` dependency to the `TTree` code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:38,modifiability,modul,modulo,38,"@pcanal - OK, all should be addressed modulo the question above about adding a new `TMath` dependency to the `TTree` code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:91,modifiability,depend,dependency,91,"@pcanal - OK, all should be addressed modulo the question above about adding a new `TMath` dependency to the `TTree` code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:38,safety,modul,modulo,38,"@pcanal - OK, all should be addressed modulo the question above about adding a new `TMath` dependency to the `TTree` code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:91,safety,depend,dependency,91,"@pcanal - OK, all should be addressed modulo the question above about adding a new `TMath` dependency to the `TTree` code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:91,testability,depend,dependency,91,"@pcanal - OK, all should be addressed modulo the question above about adding a new `TMath` dependency to the `TTree` code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:31,interoperability,conflict,conflicts,31,Will rebase to fixup the merge conflicts... one moment.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:0,availability,Failur,Failure,0,Failure is unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:0,deployability,Fail,Failure,0,Failure is unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:0,performance,Failur,Failure,0,Failure is unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/774:0,reliability,Fail,Failure,0,Failure is unrelated. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/774
https://github.com/root-project/root/pull/776:213,deployability,patch,patch,213,"Hi, as you can see your PR is picking up many commuts that are already in master. I suggest you rebase the commits relevant for the PR (the last two I guess) on top of the current master branch. Or if you want to patch a different branch than master specify it as the ""base"" for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/776
https://github.com/root-project/root/pull/776:172,energy efficiency,current,current,172,"Hi, as you can see your PR is picking up many commuts that are already in master. I suggest you rebase the commits relevant for the PR (the last two I guess) on top of the current master branch. Or if you want to patch a different branch than master specify it as the ""base"" for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/776
https://github.com/root-project/root/pull/776:250,interoperability,specif,specify,250,"Hi, as you can see your PR is picking up many commuts that are already in master. I suggest you rebase the commits relevant for the PR (the last two I guess) on top of the current master branch. Or if you want to patch a different branch than master specify it as the ""base"" for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/776
https://github.com/root-project/root/pull/776:213,safety,patch,patch,213,"Hi, as you can see your PR is picking up many commuts that are already in master. I suggest you rebase the commits relevant for the PR (the last two I guess) on top of the current master branch. Or if you want to patch a different branch than master specify it as the ""base"" for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/776
https://github.com/root-project/root/pull/776:213,security,patch,patch,213,"Hi, as you can see your PR is picking up many commuts that are already in master. I suggest you rebase the commits relevant for the PR (the last two I guess) on top of the current master branch. Or if you want to patch a different branch than master specify it as the ""base"" for this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/776
https://github.com/root-project/root/pull/777:58,availability,error,error-since-,58,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/777
https://github.com/root-project/root/pull/777:44,deployability,configurat,configuration-error-since-,44,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/777
https://github.com/root-project/root/pull/777:44,integrability,configur,configuration-error-since-,44,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/777
https://github.com/root-project/root/pull/777:44,modifiability,configur,configuration-error-since-,44,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/777
https://github.com/root-project/root/pull/777:58,performance,error,error-since-,58,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/777
https://github.com/root-project/root/pull/777:58,safety,error,error-since-,58,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/777
https://github.com/root-project/root/pull/777:44,security,configur,configuration-error-since-,44,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/777
https://github.com/root-project/root/pull/777:58,usability,error,error-since-,58,Also see https://root-forum.cern.ch/t/cmake-configuration-error-since-76f472aca2/25576,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/777
https://github.com/root-project/root/pull/778:18,deployability,updat,updated,18,"Thank you for the updated PR. Since you are introducing mostly new code, it would be nice to format everything with clang-format and amend the commit, so that it's in the proper format of our coding standards when it's added to git. Please let us know if you have any issues with that and we can help you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:93,interoperability,format,format,93,"Thank you for the updated PR. Since you are introducing mostly new code, it would be nice to format everything with clang-format and amend the commit, so that it's in the proper format of our coding standards when it's added to git. Please let us know if you have any issues with that and we can help you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:122,interoperability,format,format,122,"Thank you for the updated PR. Since you are introducing mostly new code, it would be nice to format everything with clang-format and amend the commit, so that it's in the proper format of our coding standards when it's added to git. Please let us know if you have any issues with that and we can help you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:178,interoperability,format,format,178,"Thank you for the updated PR. Since you are introducing mostly new code, it would be nice to format everything with clang-format and amend the commit, so that it's in the proper format of our coding standards when it's added to git. Please let us know if you have any issues with that and we can help you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:199,interoperability,standard,standards,199,"Thank you for the updated PR. Since you are introducing mostly new code, it would be nice to format everything with clang-format and amend the commit, so that it's in the proper format of our coding standards when it's added to git. Please let us know if you have any issues with that and we can help you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:18,safety,updat,updated,18,"Thank you for the updated PR. Since you are introducing mostly new code, it would be nice to format everything with clang-format and amend the commit, so that it's in the proper format of our coding standards when it's added to git. Please let us know if you have any issues with that and we can help you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:18,security,updat,updated,18,"Thank you for the updated PR. Since you are introducing mostly new code, it would be nice to format everything with clang-format and amend the commit, so that it's in the proper format of our coding standards when it's added to git. Please let us know if you have any issues with that and we can help you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:296,usability,help,help,296,"Thank you for the updated PR. Since you are introducing mostly new code, it would be nice to format everything with clang-format and amend the commit, so that it's in the proper format of our coding standards when it's added to git. Please let us know if you have any issues with that and we can help you.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:229,interoperability,format,format-diff,229,"@amadio Thank you for the feedback. I will fix the indentation issue. The reason for misalignment of `*` was that I had written the original code with 2 spaces of indentation and later changed them all to 3. Regarding the `clang-format-diff`. I tried to get it working, but it does not seem to work. Especially, it is unable to capture filenames correctly from `git diff`. Details can be seen in the bug filed with clang here [https://bugs.llvm.org/show_bug.cgi?id=33759](https://bugs.llvm.org/show_bug.cgi?id=33759)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:277,reliability,doe,does,277,"@amadio Thank you for the feedback. I will fix the indentation issue. The reason for misalignment of `*` was that I had written the original code with 2 spaces of indentation and later changed them all to 3. Regarding the `clang-format-diff`. I tried to get it working, but it does not seem to work. Especially, it is unable to capture filenames correctly from `git diff`. Details can be seen in the bug filed with clang here [https://bugs.llvm.org/show_bug.cgi?id=33759](https://bugs.llvm.org/show_bug.cgi?id=33759)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:26,usability,feedback,feedback,26,"@amadio Thank you for the feedback. I will fix the indentation issue. The reason for misalignment of `*` was that I had written the original code with 2 spaces of indentation and later changed them all to 3. Regarding the `clang-format-diff`. I tried to get it working, but it does not seem to work. Especially, it is unable to capture filenames correctly from `git diff`. Details can be seen in the bug filed with clang here [https://bugs.llvm.org/show_bug.cgi?id=33759](https://bugs.llvm.org/show_bug.cgi?id=33759)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:47,interoperability,format,format,47,"Hi, instead of clang-ormat-diff just run clang-format on the new files, that will work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:12,security,ssh,sshekh,12,"Hi Saurav. @sshekh do you have this code in the pull 817 with Vladimir and Akshay? Cheers,. Omar.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:51,deployability,modul,module,51,@omazapa yes the code is part of the Deep Learning module PR. I will close this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:51,modifiability,modul,module,51,@omazapa yes the code is part of the Deep Learning module PR. I will close this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:51,safety,modul,module,51,@omazapa yes the code is part of the Deep Learning module PR. I will close this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:42,usability,Learn,Learning,42,@omazapa yes the code is part of the Deep Learning module PR. I will close this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/778:69,usability,close,close,69,@omazapa yes the code is part of the Deep Learning module PR. I will close this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/778
https://github.com/root-project/root/pull/779:176,deployability,contain,contains,176,"Thanks for the PR Simon! @lmoneta, could you have a look at this? The bugfix is quite important, more details in the referenced forum post. One thing to be aware of is that it contains a minor change to the interface of the TDataLoader that affects the GSoC students working on the TMVA::DNN.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/779:207,integrability,interfac,interface,207,"Thanks for the PR Simon! @lmoneta, could you have a look at this? The bugfix is quite important, more details in the referenced forum post. One thing to be aware of is that it contains a minor change to the interface of the TDataLoader that affects the GSoC students working on the TMVA::DNN.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/779:207,interoperability,interfac,interface,207,"Thanks for the PR Simon! @lmoneta, could you have a look at this? The bugfix is quite important, more details in the referenced forum post. One thing to be aware of is that it contains a minor change to the interface of the TDataLoader that affects the GSoC students working on the TMVA::DNN.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/779:207,modifiability,interfac,interface,207,"Thanks for the PR Simon! @lmoneta, could you have a look at this? The bugfix is quite important, more details in the referenced forum post. One thing to be aware of is that it contains a minor change to the interface of the TDataLoader that affects the GSoC students working on the TMVA::DNN.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/779:35,deployability,instal,install,35,"Hi Simon,. to fix the format, lets install clang-format 3.9 and run in the root directory. git diff -U0 --no-color HEAD^ | clang-format-diff-3.9 -i -p1 -style=file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/779:22,interoperability,format,format,22,"Hi Simon,. to fix the format, lets install clang-format 3.9 and run in the root directory. git diff -U0 --no-color HEAD^ | clang-format-diff-3.9 -i -p1 -style=file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/779:49,interoperability,format,format,49,"Hi Simon,. to fix the format, lets install clang-format 3.9 and run in the root directory. git diff -U0 --no-color HEAD^ | clang-format-diff-3.9 -i -p1 -style=file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/779:129,interoperability,format,format-diff-,129,"Hi Simon,. to fix the format, lets install clang-format 3.9 and run in the root directory. git diff -U0 --no-color HEAD^ | clang-format-diff-3.9 -i -p1 -style=file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/779:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/779
https://github.com/root-project/root/pull/781:11,deployability,build,build,11,"@phsft-bot build also on centos7/gcc49, mac1012/native, slc6/gcc49, slc6/gcc62, ubuntu14/native with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:37,availability,error,error,37,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:68,availability,error,error,68,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:37,performance,error,error,37,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:68,performance,error,error,68,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:142,reliability,doe,does,142,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:37,safety,error,error,37,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:68,safety,error,error,68,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:37,usability,error,error,37,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:68,usability,error,error,68,The last commit raises the following error(GCC)/warning(clang): . > error: attributes are not allowed on a function-definition. >warning: GCC does not allow 'deprecated' attribute in this position on a function definition. For this I've been looking at how was it done in the past( e.g. commit https://github.com/root-project/root/commit/f04ea5b91ed7ecab9a9a2acbf5fd207f96972756). . Am I missing something? What is the correct placement of the macro? @Axel-Naumann,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:26,energy efficiency,current,current,26,"Hi @xvallspl, what is the current status here? Could you please rebase so we can test and merge? I guess this is still needed, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:81,safety,test,test,81,"Hi @xvallspl, what is the current status here? Could you please rebase so we can test and merge? I guess this is still needed, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:81,testability,test,test,81,"Hi @xvallspl, what is the current status here? Could you please rebase so we can test and merge? I guess this is still needed, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/781:34,usability,statu,status,34,"Hi @xvallspl, what is the current status here? Could you please rebase so we can test and merge? I guess this is still needed, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/781
https://github.com/root-project/root/pull/784:11,deployability,build,build,11,@phsft-bot build again please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:11,deployability,build,build,11,@phsft-bot build again,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:75,deployability,build,build,75,@martinmine @peremato help :sweat_smile: this PR _really_ does not want to build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:58,reliability,doe,does,58,@martinmine @peremato help :sweat_smile: this PR _really_ does not want to build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:22,usability,help,help,22,@martinmine @peremato help :sweat_smile: this PR _really_ does not want to build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:59,availability,Error,Error,59,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:73,deployability,build,build,73,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:115,deployability,build,build,115,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:142,deployability,build,build,142,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:282,deployability,build,build,282,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:324,deployability,build,build,324,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:330,deployability,build,build,330,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:59,performance,Error,Error,59,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:59,safety,Error,Error,59,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:59,usability,Error,Error,59,It is the same problem as yesterday... ```. 14:13:44 CMake Error at /mnt/build/jenkins/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:98 (ctest_empty_binary_directory):. 14:13:44 ctest_empty_binary_directory problem removing the binary directory:. 14:13:44 /mnt/build/jenkins/workspace/root-pullrequests-build/build. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:102,availability,error,error,102,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:49,deployability,fail,failing,49,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:57,deployability,build,build,57,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:152,deployability,log,log,152,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:102,performance,error,error,102,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:49,reliability,fail,failing,49,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:102,safety,error,error,102,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:152,safety,log,log,152,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:152,security,log,log,152,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:152,testability,log,log,152,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:102,usability,error,error,102,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:125,usability,statu,status,125,"Looks like @peremato ninja'd me already, saw the failing build through email and recognized the cmake error through the exit status code on the Jenkins log.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:83,safety,avoid,avoid,83,@bluehood I replaced ctest_empty_binary_directory() by file(REMOVE_RECURSE ...) to avoid the problem. Nightlies have worked tonight with this change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/784:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/784
https://github.com/root-project/root/pull/785:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:95,availability,error,errors,95,@zzxuanyuan It looks like this cannot compile without TBB. Could you please take a look at the errors and update the PR accordingly? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:106,deployability,updat,update,106,@zzxuanyuan It looks like this cannot compile without TBB. Could you please take a look at the errors and update the PR accordingly? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:95,performance,error,errors,95,@zzxuanyuan It looks like this cannot compile without TBB. Could you please take a look at the errors and update the PR accordingly? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:95,safety,error,errors,95,@zzxuanyuan It looks like this cannot compile without TBB. Could you please take a look at the errors and update the PR accordingly? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:106,safety,updat,update,106,@zzxuanyuan It looks like this cannot compile without TBB. Could you please take a look at the errors and update the PR accordingly? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:106,security,updat,update,106,@zzxuanyuan It looks like this cannot compile without TBB. Could you please take a look at the errors and update the PR accordingly? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:95,usability,error,errors,95,@zzxuanyuan It looks like this cannot compile without TBB. Could you please take a look at the errors and update the PR accordingly? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:79,security,access,access,79,"@amadio @bbockelm . Unfortunately, I can't see the console since I do not have access permit. I think ROOT made some recent changes. Now when I compile the code, it can not find ""tbb/task.h"" header file. Where the TBB library gets compiled without enabling -Dtbb=ON flag?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:171,interoperability,format,formatting,171,"Hi @zzxuanyuan,. I see that some technical details should be addressed in the code, for example the naming conventions: can those be followed? (data members, class names, formatting). Another aspect that perhaps can be improvement is the direct usage of TBB. Can the solution be formulated in terms of higher level constructs already offered by ROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:237,deployability,manag,manages,237,@dpiparo Yes. I was measuring the performance recently. I am considering to adopt TThreadExecutor to replace UnzipTask since all baskets data are independent. I guess I still need to keep MappingTask because it is a single ttb task that manages spawned UnzipTasks. I will look at name convention.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:20,energy efficiency,measur,measuring,20,@dpiparo Yes. I was measuring the performance recently. I am considering to adopt TThreadExecutor to replace UnzipTask since all baskets data are independent. I guess I still need to keep MappingTask because it is a single ttb task that manages spawned UnzipTasks. I will look at name convention.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:237,energy efficiency,manag,manages,237,@dpiparo Yes. I was measuring the performance recently. I am considering to adopt TThreadExecutor to replace UnzipTask since all baskets data are independent. I guess I still need to keep MappingTask because it is a single ttb task that manages spawned UnzipTasks. I will look at name convention.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:34,performance,perform,performance,34,@dpiparo Yes. I was measuring the performance recently. I am considering to adopt TThreadExecutor to replace UnzipTask since all baskets data are independent. I guess I still need to keep MappingTask because it is a single ttb task that manages spawned UnzipTasks. I will look at name convention.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:237,safety,manag,manages,237,@dpiparo Yes. I was measuring the performance recently. I am considering to adopt TThreadExecutor to replace UnzipTask since all baskets data are independent. I guess I still need to keep MappingTask because it is a single ttb task that manages spawned UnzipTasks. I will look at name convention.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:34,usability,perform,performance,34,@dpiparo Yes. I was measuring the performance recently. I am considering to adopt TThreadExecutor to replace UnzipTask since all baskets data are independent. I guess I still need to keep MappingTask because it is a single ttb task that manages spawned UnzipTasks. I will look at name convention.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:134,performance,parallel,parallelised,134,"Hi @zzxuanyuan,. thanks. What is the reason for having a task spawning tasks? Why cannot this be achieved for example with two nested parallelised loops?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:185,availability,state,state,185,"Hi @zzxuanyuan,. another detail. Perhaps the implementation of the feature could benefit from a rebase. There are many commits which perhaps reveal the process which led to the present state of the code but are not crucial for the history of the root repo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:185,integrability,state,state,185,"Hi @zzxuanyuan,. another detail. Perhaps the implementation of the feature could benefit from a rebase. There are many commits which perhaps reveal the process which led to the present state of the code but are not crucial for the history of the root repo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:448,availability,cluster,cluster,448,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:240,deployability,pipelin,pipeline,240,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:448,deployability,cluster,cluster,448,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:539,energy efficiency,current,current,539,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:240,integrability,pipelin,pipeline,240,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:426,integrability,buffer,buffers,426,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:163,performance,parallel,parallel,163,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:483,performance,lock,lock,483,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:646,performance,parallel,parallel,646,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:360,safety,compl,completed,360,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:413,safety,safe,safe,413,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:470,safety,avoid,avoid,470,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:360,security,compl,completed,360,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:483,security,lock,lock,483,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:99,usability,user,user,99,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:263,usability,user,user,263,"@dpiparo - there are two reasons why we directly invoke TBB:. - Move code and calculations off the user thread and into a separate task. The whole idea behind the parallel unzip is to do as much work in separate tasks as possible so we can pipeline with the main user thread. - Utilize the parent/child between relationship to know when all the TBB tasks have completed. This can be later used to know when it is safe to fill buffers from the next cluster. Allows us to avoid a read lock. - @zzxuanyuan - hmm, I don't see this code in the current PR though? Am I overlooking something? That said, it may be feasible to have a mapping task with a parallel for-loop... but at that point, it seems to be a lot of work to use higher-level constructs from within a lower-level one. It's not apparent what the advantage is?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:321,performance,cach,cache,321,"@bbockelm . MappingTask waits for its children (UnzipTask) to finish and return:. https://github.com/zzxuanyuan/root/blob/wip-atomic-tbb-unzip/tree/tree/src/TTreeCacheUnzip.cxx#L699. At the end of FillBuffer(), it needs to call ResetCache(). So ResetCache waits for MappingTask to finish and then it starts resetting the cache:. https://github.com/zzxuanyuan/root/blob/wip-atomic-tbb-unzip/tree/tree/src/TTreeCacheUnzip.cxx#L464",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:207,performance,lock,lock-in,207,"Hi @bbockelm, @zzxuanyuan,. wouldn't the nested loop provide the same advantages you mention (waiting and move off the ""main"" thread)? The advantage of not using directly TBB primitives is that we avoid the lock-in and become flexible enough to swap runtimes if/when needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:197,safety,avoid,avoid,197,"Hi @bbockelm, @zzxuanyuan,. wouldn't the nested loop provide the same advantages you mention (waiting and move off the ""main"" thread)? The advantage of not using directly TBB primitives is that we avoid the lock-in and become flexible enough to swap runtimes if/when needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:207,security,lock,lock-in,207,"Hi @bbockelm, @zzxuanyuan,. wouldn't the nested loop provide the same advantages you mention (waiting and move off the ""main"" thread)? The advantage of not using directly TBB primitives is that we avoid the lock-in and become flexible enough to swap runtimes if/when needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:50,deployability,updat,update,50,@zzxuanyuan - any estimate when you'll be able to update the PR to take advantage of the new interface?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:18,energy efficiency,estimat,estimate,18,@zzxuanyuan - any estimate when you'll be able to update the PR to take advantage of the new interface?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:93,integrability,interfac,interface,93,@zzxuanyuan - any estimate when you'll be able to update the PR to take advantage of the new interface?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:93,interoperability,interfac,interface,93,@zzxuanyuan - any estimate when you'll be able to update the PR to take advantage of the new interface?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:93,modifiability,interfac,interface,93,@zzxuanyuan - any estimate when you'll be able to update the PR to take advantage of the new interface?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:50,safety,updat,update,50,@zzxuanyuan - any estimate when you'll be able to update the PR to take advantage of the new interface?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/785:50,security,updat,update,50,@zzxuanyuan - any estimate when you'll be able to update the PR to take advantage of the new interface?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/785
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF. And please don't die before you submit the CDash report...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:124,integrability,sub,submit,124,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF. And please don't die before you submit the CDash report...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,"@phsft-bot build with flags -DCMAKE_CXX_FLAGS=""-DR__COMPLETE_MEM_TERMINATION"" -Dccache=OFF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc49 with flags -Dvc=OFF -Dimt=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/787:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc49 with flags -Dvc=OFF -Dimt=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/787
https://github.com/root-project/root/pull/788:38,deployability,patch,patch,38,We should probably move 'Revert cling patch that broke using ParentClass::Method;' in a separate PR to test if it breaks anything in regular builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/788
https://github.com/root-project/root/pull/788:141,deployability,build,builds,141,We should probably move 'Revert cling patch that broke using ParentClass::Method;' in a separate PR to test if it breaks anything in regular builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/788
https://github.com/root-project/root/pull/788:38,safety,patch,patch,38,We should probably move 'Revert cling patch that broke using ParentClass::Method;' in a separate PR to test if it breaks anything in regular builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/788
https://github.com/root-project/root/pull/788:103,safety,test,test,103,We should probably move 'Revert cling patch that broke using ParentClass::Method;' in a separate PR to test if it breaks anything in regular builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/788
https://github.com/root-project/root/pull/788:38,security,patch,patch,38,We should probably move 'Revert cling patch that broke using ParentClass::Method;' in a separate PR to test if it breaks anything in regular builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/788
https://github.com/root-project/root/pull/788:103,testability,test,test,103,We should probably move 'Revert cling patch that broke using ParentClass::Method;' in a separate PR to test if it breaks anything in regular builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/788
https://github.com/root-project/root/pull/788:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/788
https://github.com/root-project/root/pull/790:11,deployability,build,build,11,"@phsft-bot build also on centos7/gcc49, mac1012/native, slc6/gcc49, slc6/gcc62, ubuntu14/native with flags -Dvc=ON -Dimt=ON -Dccache=ON -Dbuiltin_vc=ON -Dbuiltin_veccore=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/790
https://github.com/root-project/root/pull/790:11,deployability,build,build,11,"@phsft-bot build on centos7/gcc49, mac1012/native, slc6/gcc49, slc6/gcc62, ubuntu14/native with flags -Dvc=ON -Dimt=ON -Dccache=ON -Dbuiltin_vc=ON -Dbuiltin_veccore=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/790
https://github.com/root-project/root/pull/790:28,availability,failur,failures,28,I don't get why this random failures now and with these changes and I can't reproduce them locally. Will investigate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/790
https://github.com/root-project/root/pull/790:28,deployability,fail,failures,28,I don't get why this random failures now and with these changes and I can't reproduce them locally. Will investigate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/790
https://github.com/root-project/root/pull/790:28,performance,failur,failures,28,I don't get why this random failures now and with these changes and I can't reproduce them locally. Will investigate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/790
https://github.com/root-project/root/pull/790:28,reliability,fail,failures,28,I don't get why this random failures now and with these changes and I can't reproduce them locally. Will investigate.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/790
https://github.com/root-project/root/pull/790:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/790
https://github.com/root-project/root/pull/791:2,safety,test,tested,2,I tested it on OSX: the issue is still present with Makefiles and it is fixed (not sure it was broken before) with Ninja.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/791
https://github.com/root-project/root/pull/791:2,testability,test,tested,2,I tested it on OSX: the issue is still present with Makefiles and it is fixed (not sure it was broken before) with Ninja.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/791
https://github.com/root-project/root/pull/791:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/791
https://github.com/root-project/root/pull/791:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/791
https://github.com/root-project/root/pull/791:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/791
https://github.com/root-project/root/pull/792:359,deployability,contain,containing,359,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:381,deployability,contain,contained,381,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:391,deployability,log,logical,391,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:493,deployability,artifact,artifacts,493,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:434,integrability,messag,message,434,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:434,interoperability,messag,message,434,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:94,performance,content,content,94,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:272,performance,time,time,272,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:83,safety,review,review,83,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:252,safety,review,review,252,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:391,safety,log,logical,391,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:391,security,log,logical,391,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:83,testability,review,review,83,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:252,testability,review,review,252,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:391,testability,log,logical,391,"Hi,. first of all thank you for your contribution. I am in no position to actually review the content of the pull request, but it seems you are adding two commits with unclear descriptions that change 37 files and 4000+ lines -- making it a hard PR to review. If you have time and it sounds reasonable to you, it might be desirable to split the PR in commits containing small self-contained logical changes (with a descriptive commit message). Perhaps more importantly, it seems some rebasing artifacts like. ```. +<<<<<<< HEAD. ```. were left in the code. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:183,deployability,artifact,artifacts,183,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:515,integrability,messag,messages,515,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:252,interoperability,format,format,252,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:515,interoperability,messag,messages,515,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:279,reliability,doe,does,279,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:10,safety,review,reviewer,10,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:72,safety,review,review,72,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:533,safety,test,test,533,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:631,safety,test,test,631,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:10,testability,review,reviewer,10,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:72,testability,review,review,72,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:533,testability,test,test,533,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:631,testability,test,test,631,"Hi, not a reviewer either but just offering my two cents to make the PR review more smooth:. - Make sure your PR can actually compile. As @bluehood mentioned, there are many rebasing artifacts throughout the code. Also make sure your code passes clang-format. - What bugs/issues does this PR actually solve? You mentioned in the previous PR #776 that they ""fixes include additions of new classes as well as genuine bugfixes."", could you elaborate what bugfixes these are? (This would be nice to have in your commit messages). - Some test for whatever you are trying to fix would be great, this PR adds >4600 LOC without one single test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:11,deployability,build,build,11,"@phsft-bot build. do your best, you can do it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:204,deployability,version,version,204,"I now (hopefully) removed all of the rebasing artefacts by undoing and redoing the cherry-picking. Unfortunately it seems that Jenkins still complains, although I can't seem to find the reason - my local version seems to compile... any suggestions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:204,integrability,version,version,204,"I now (hopefully) removed all of the rebasing artefacts by undoing and redoing the cherry-picking. Unfortunately it seems that Jenkins still complains, although I can't seem to find the reason - my local version seems to compile... any suggestions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:204,modifiability,version,version,204,"I now (hopefully) removed all of the rebasing artefacts by undoing and redoing the cherry-picking. Unfortunately it seems that Jenkins still complains, although I can't seem to find the reason - my local version seems to compile... any suggestions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:141,safety,compl,complains,141,"I now (hopefully) removed all of the rebasing artefacts by undoing and redoing the cherry-picking. Unfortunately it seems that Jenkins still complains, although I can't seem to find the reason - my local version seems to compile... any suggestions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:141,security,compl,complains,141,"I now (hopefully) removed all of the rebasing artefacts by undoing and redoing the cherry-picking. Unfortunately it seems that Jenkins still complains, although I can't seem to find the reason - my local version seems to compile... any suggestions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:59,usability,undo,undoing,59,"I now (hopefully) removed all of the rebasing artefacts by undoing and redoing the cherry-picking. Unfortunately it seems that Jenkins still complains, although I can't seem to find the reason - my local version seems to compile... any suggestions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:11,deployability,build,build,11,"@phsft-bot build. @cburgard this is because the build by Jenkins was triggered by @Teemperor before you submitted the additional commits. Once Jenkins is triggered, it will take the last commit that you made upon the time it gets triggered. I have re-triggered a build of your PR as of this comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:48,deployability,build,build,48,"@phsft-bot build. @cburgard this is because the build by Jenkins was triggered by @Teemperor before you submitted the additional commits. Once Jenkins is triggered, it will take the last commit that you made upon the time it gets triggered. I have re-triggered a build of your PR as of this comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:263,deployability,build,build,263,"@phsft-bot build. @cburgard this is because the build by Jenkins was triggered by @Teemperor before you submitted the additional commits. Once Jenkins is triggered, it will take the last commit that you made upon the time it gets triggered. I have re-triggered a build of your PR as of this comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:104,integrability,sub,submitted,104,"@phsft-bot build. @cburgard this is because the build by Jenkins was triggered by @Teemperor before you submitted the additional commits. Once Jenkins is triggered, it will take the last commit that you made upon the time it gets triggered. I have re-triggered a build of your PR as of this comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:217,performance,time,time,217,"@phsft-bot build. @cburgard this is because the build by Jenkins was triggered by @Teemperor before you submitted the additional commits. Once Jenkins is triggered, it will take the last commit that you made upon the time it gets triggered. I have re-triggered a build of your PR as of this comment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:16,testability,understand,understand,16,Ok apparently I understand CMake way less than I thought I did. I hopefully fixed everything now. Compilation worked on my SLC6 machine.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:84,deployability,build,build,84,I refactored things a bit. Now all tests should succeed. Could anyone trigger a new build test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:2,modifiability,refact,refactored,2,I refactored things a bit. Now all tests should succeed. Could anyone trigger a new build test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:2,performance,refactor,refactored,2,I refactored things a bit. Now all tests should succeed. Could anyone trigger a new build test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:35,safety,test,tests,35,I refactored things a bit. Now all tests should succeed. Could anyone trigger a new build test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:90,safety,test,test,90,I refactored things a bit. Now all tests should succeed. Could anyone trigger a new build test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:35,testability,test,tests,35,I refactored things a bit. Now all tests should succeed. Could anyone trigger a new build test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:90,testability,test,test,90,I refactored things a bit. Now all tests should succeed. Could anyone trigger a new build test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:79,deployability,build,build,79,"I'm a bit confused by the output of Jenkins here... . As far as I can see, the build claims to have failed, but the only failed tests that I can see are related to TFormula, whereas the changes only affect RooFit... Any idea what might be going on here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:100,deployability,fail,failed,100,"I'm a bit confused by the output of Jenkins here... . As far as I can see, the build claims to have failed, but the only failed tests that I can see are related to TFormula, whereas the changes only affect RooFit... Any idea what might be going on here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:121,deployability,fail,failed,121,"I'm a bit confused by the output of Jenkins here... . As far as I can see, the build claims to have failed, but the only failed tests that I can see are related to TFormula, whereas the changes only affect RooFit... Any idea what might be going on here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:100,reliability,fail,failed,100,"I'm a bit confused by the output of Jenkins here... . As far as I can see, the build claims to have failed, but the only failed tests that I can see are related to TFormula, whereas the changes only affect RooFit... Any idea what might be going on here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:121,reliability,fail,failed,121,"I'm a bit confused by the output of Jenkins here... . As far as I can see, the build claims to have failed, but the only failed tests that I can see are related to TFormula, whereas the changes only affect RooFit... Any idea what might be going on here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:128,safety,test,tests,128,"I'm a bit confused by the output of Jenkins here... . As far as I can see, the build claims to have failed, but the only failed tests that I can see are related to TFormula, whereas the changes only affect RooFit... Any idea what might be going on here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:128,testability,test,tests,128,"I'm a bit confused by the output of Jenkins here... . As far as I can see, the build claims to have failed, but the only failed tests that I can see are related to TFormula, whereas the changes only affect RooFit... Any idea what might be going on here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:113,availability,fault,fault,113,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:74,deployability,fail,failing,74,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:54,energy efficiency,current,currently,54,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:113,energy efficiency,fault,fault,113,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:113,performance,fault,fault,113,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:74,reliability,fail,failing,74,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:113,reliability,fault,fault,113,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:82,safety,test,tests,82,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:113,safety,fault,fault,113,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:82,testability,test,tests,82,"hi, well the PR is built on top of master, and master currently has a few failing tests. so it's really not your fault :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:23,safety,review,reviewed,23,"Yep, your PR should be reviewed, approved and merged by the main developer responsible for this part of the code. I believe in this case it is @lmoneta. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:23,testability,review,reviewed,23,"Yep, your PR should be reviewed, approved and merged by the main developer responsible for this part of the code. I believe in this case it is @lmoneta. Cheers,. Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:71,deployability,contain,containing,71,@cburgard many of the new files this PR introduces has comment headers containing `This code was autogenerated by RooClassFactory`. Any reason why?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:44,interoperability,specif,specifics,44,"@martinmine: I cannot really comment on the specifics of the code, as I am not the original author. That would be Wouter Verkerke, who has asked me to propagate these fixes and additions upstream for him. I assume that if you have specific questions about individual code segments, it's probably easiest if you ask him directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:231,interoperability,specif,specific,231,"@martinmine: I cannot really comment on the specifics of the code, as I am not the original author. That would be Wouter Verkerke, who has asked me to propagate these fixes and additions upstream for him. I assume that if you have specific questions about individual code segments, it's probably easiest if you ask him directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:92,security,auth,author,92,"@martinmine: I cannot really comment on the specifics of the code, as I am not the original author. That would be Wouter Verkerke, who has asked me to propagate these fixes and additions upstream for him. I assume that if you have specific questions about individual code segments, it's probably easiest if you ask him directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:309,deployability,releas,release,309,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:196,integrability,coupl,couple,196,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:245,integrability,coupl,couple,245,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:196,modifiability,coupl,couple,196,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:245,modifiability,coupl,couple,245,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:16,safety,review,review,16,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:255,safety,test,tests,255,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:16,testability,review,review,16,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:196,testability,coupl,couple,196,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:245,testability,coupl,couple,245,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:255,testability,test,tests,255,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:100,usability,document,documentation,100,"While the final review indeed needs @lmoneta here are preliminary comments:. . - There is almost no documentation, this must be fixed before merging. Note that ROOT has changes its syntax since a couple of years, we now use doxygen. - We need a couple of tests. - We need a tutorial. - We need a diff for the release notes. Assuming that @lmoneta accepts this PR design-wise, these issues must be addressed before we can merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/792:79,interoperability,conflict,conflicts,79,"All the code of this PR has been merged, by opening another one and fixing the conflicts",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/792
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build also with flags -Dbuiltin_veccore=ON -Dvc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build also on centos7/gcc54 with flags -Dbuiltin_vc=on -Dbuiltin_veccore=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:57,availability,error,errors,57,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:246,modifiability,scal,scalar,246,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:318,modifiability,paramet,parameters,318,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:348,modifiability,Scal,Scalar,348,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:57,performance,error,errors,57,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:80,reliability,doe,does,80,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:57,safety,error,errors,57,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:89,safety,compl,complain,89,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:152,safety,test,tests,152,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:270,safety,test,test,270,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:89,security,compl,complain,89,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:152,testability,test,tests,152,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:270,testability,test,test,270,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:57,usability,error,errors,57,"After fixing the last comment of @xvallspl and the clang errors (and if Jenkins does not complain), this PR can be merged if you agree. The last commit tests the gradient using directly a `Chi2FCN` object, with the following speedups against the scalar serial case (the test computes the gradient of a function with 4 parameters) in my machine:. * Scalar multithread case: ~2.3x. * Vectorial serial case: ~2.2x. * Vectorial multithread case: ~6.1x. The case of a general fit through `ROOT::Fit::Fitter` with gradient enabled is not yet implemented, but I think that can be done in the next PR. Of course, if you do have some more comments in the last commits, I'm all ears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:24,energy efficiency,Core,Core,24,@xvallspl SSE4.2 (Intel Core i7-930 processor),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:80,availability,failur,failures,80,@agarciamontoro Very nice speedups. Could you please take a look at the Jenkins failures? They seem relevant for this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:80,deployability,fail,failures,80,@agarciamontoro Very nice speedups. Could you please take a look at the Jenkins failures? They seem relevant for this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:80,performance,failur,failures,80,@agarciamontoro Very nice speedups. Could you please take a look at the Jenkins failures? They seem relevant for this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:80,reliability,fail,failures,80,@agarciamontoro Very nice speedups. Could you please take a look at the Jenkins failures? They seem relevant for this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:51,deployability,updat,updated,51,"@amadio Yes, I'm on it right now! :) I'll keep you updated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:51,safety,updat,updated,51,"@amadio Yes, I'm on it right now! :) I'll keep you updated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:51,security,updat,updated,51,"@amadio Yes, I'm on it right now! :) I'll keep you updated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:52,availability,error,error,52,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:8,deployability,Updat,Update,8,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:52,performance,error,error,52,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:8,safety,Updat,Update,8,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:52,safety,error,error,52,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:194,safety,compl,complaints,194,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:8,security,Updat,Update,8,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:194,security,compl,complaints,194,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:52,usability,error,error,52,"@amadio Update: This is (virtually) solved now. The error was not here but in TThreadExecutor; the solution is in #803, so I'll rebase my branch when that PR is merged and solve the minor clang complaints then.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:3,availability,fault,fault,3,My fault. https://github.com/root-project/root/pull/811 should solve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:3,energy efficiency,fault,fault,3,My fault. https://github.com/root-project/root/pull/811 should solve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:3,performance,fault,fault,3,My fault. https://github.com/root-project/root/pull/811 should solve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:3,reliability,fault,fault,3,My fault. https://github.com/root-project/root/pull/811 should solve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:3,safety,fault,fault,3,My fault. https://github.com/root-project/root/pull/811 should solve this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:38,deployability,build,build,38,@xvallspl It looks like my command to build with SIMD enabled above didn't work. Could you please test and report back?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:98,safety,test,test,98,@xvallspl It looks like my command to build with SIMD enabled above didn't work. Could you please test and report back?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:98,testability,test,test,98,@xvallspl It looks like my command to build with SIMD enabled above didn't work. Could you please test and report back?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:27,usability,command,command,27,@xvallspl It looks like my command to build with SIMD enabled above didn't work. Could you please test and report back?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:4,availability,failur,failures,4,"The failures seem to be due to dirty build directories in the build node, as noted by Philippe. Let's wait until that is fixed and then try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:4,deployability,fail,failures,4,"The failures seem to be due to dirty build directories in the build node, as noted by Philippe. Let's wait until that is fixed and then try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:37,deployability,build,build,37,"The failures seem to be due to dirty build directories in the build node, as noted by Philippe. Let's wait until that is fixed and then try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:62,deployability,build,build,62,"The failures seem to be due to dirty build directories in the build node, as noted by Philippe. Let's wait until that is fixed and then try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:4,performance,failur,failures,4,"The failures seem to be due to dirty build directories in the build node, as noted by Philippe. Let's wait until that is fixed and then try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:4,reliability,fail,failures,4,"The failures seem to be due to dirty build directories in the build node, as noted by Philippe. Let's wait until that is fixed and then try again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:19,deployability,build,build,19,"@amadio afaik, the build dirs for PRs are cleared before each build, or is something else broken?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:62,deployability,build,build,62,"@amadio afaik, the build dirs for PRs are cleared before each build, or is something else broken?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:42,usability,clear,cleared,42,"@amadio afaik, the build dirs for PRs are cleared before each build, or is something else broken?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:59,availability,failur,failures,59,"I thought that was mentioning this build. In any case, the failures above are definitely not caused by this PR, so let's wait until we know the PRs are working again before moving on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:35,deployability,build,build,35,"I thought that was mentioning this build. In any case, the failures above are definitely not caused by this PR, so let's wait until we know the PRs are working again before moving on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:59,deployability,fail,failures,59,"I thought that was mentioning this build. In any case, the failures above are definitely not caused by this PR, so let's wait until we know the PRs are working again before moving on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:59,performance,failur,failures,59,"I thought that was mentioning this build. In any case, the failures above are definitely not caused by this PR, so let's wait until we know the PRs are working again before moving on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:59,reliability,fail,failures,59,"I thought that was mentioning this build. In any case, the failures above are definitely not caused by this PR, so let's wait until we know the PRs are working again before moving on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:12,deployability,build,build,12,@phhsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:276,availability,error,errors,276,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:93,deployability,Log,LogLikelihood,93,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:290,deployability,build,builds,290,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:18,integrability,interfac,interfaces,18,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:18,interoperability,interfac,interfaces,18,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:405,interoperability,format,format,405,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:490,interoperability,format,format,490,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:520,interoperability,format,format,520,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:698,interoperability,conflict,conflicts,698,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:18,modifiability,interfac,interfaces,18,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:39,performance,parallel,parallelized,39,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:276,performance,error,errors,276,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:69,reliability,Poisson,PoissonLikelihood,69,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:93,safety,Log,LogLikelihood,93,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:126,safety,test,tested,126,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:138,safety,review,review,138,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:276,safety,error,errors,276,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:575,safety,review,review,575,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:93,security,Log,LogLikelihood,93,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:93,testability,Log,LogLikelihood,93,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:126,testability,test,tested,126,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:138,testability,review,review,138,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:575,testability,review,review,575,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:276,usability,error,errors,276,"Two more gradient interfaces have been parallelized and vectorized: `PoissonLikelihood` and `LogLikelihood`. Both of them are tested. The review of these new implementations should be straightforward, as they are very similar to the `Chi2` implementations. Also, the previous errors in the builds should be fixed now, let's see what Jenkins has to say. By the way, I have pushed a commit fixing the clang-format style because I got a huge diff (probably due to the recent changes in .clang-format) when doing `git clang-format`. I thought this would be cleaner and easier to review, but if you want me to squash the changes I can do it (actually I tried to do it, but the `rebase` threw *a lot* of conflicts, so I just did this new commit).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:13,deployability,fail,failing,13,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:88,deployability,configurat,configuration,88,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:288,deployability,manag,manageable,288,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:392,deployability,configurat,configuration,392,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:288,energy efficiency,manag,manageable,288,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:88,integrability,configur,configuration,88,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:392,integrability,configur,configuration,392,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:148,interoperability,conflict,conflicting,148,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:260,interoperability,format,format,260,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:333,interoperability,format,format,333,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:88,modifiability,configur,configuration,88,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:392,modifiability,configur,configuration,392,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:13,reliability,fail,failing,13,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:21,safety,test,tests,21,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:288,safety,manag,manageable,288,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:88,security,configur,configuration,88,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:392,security,configur,configuration,392,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:21,testability,test,tests,21,We think the failing tests are not because of the changes in this PR but because of the configuration with `veccore` + `vc` in Jenkins. I removed a conflicting commit with master (the one changing `FitUtil::setAutomaticChunking`) and the commit with the clang-format huge diff (which was manageable after the last changes on `.clang-format`). The PR should be ready to merge when the Jenkins configuration is ready!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:51,deployability,build,builds,51,Please rebase so we can test and merge. Now the PR builds should be fine. Sorry for this taking so long!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:24,safety,test,test,24,Please rebase so we can test and merge. Now the PR builds should be fine. Sorry for this taking so long!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:24,testability,test,test,24,Please rebase so we can test and merge. Now the PR builds should be fine. Sorry for this taking so long!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:63,deployability,integr,integration,63,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:63,integrability,integr,integration,63,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:91,integrability,interfac,interfaces,91,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:63,interoperability,integr,integration,63,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:91,interoperability,interfac,interfaces,91,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:63,modifiability,integr,integration,63,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:91,modifiability,interfac,interfaces,91,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:63,reliability,integr,integration,63,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:63,security,integr,integration,63,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:63,testability,integr,integration,63,There you go. I wanted to push some more commits to finish the integration with the fitter interfaces but I think that can be done in a following minor PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/793:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/793
https://github.com/root-project/root/pull/794:30,availability,repair,repair,30,"Ok, the code is broken beyond repair, let's just kill it with fire. I updated the PR to remove the code, the previous failed builds were trying to see if anything behind this define is still serving some purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:70,deployability,updat,updated,70,"Ok, the code is broken beyond repair, let's just kill it with fire. I updated the PR to remove the code, the previous failed builds were trying to see if anything behind this define is still serving some purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:118,deployability,fail,failed,118,"Ok, the code is broken beyond repair, let's just kill it with fire. I updated the PR to remove the code, the previous failed builds were trying to see if anything behind this define is still serving some purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:125,deployability,build,builds,125,"Ok, the code is broken beyond repair, let's just kill it with fire. I updated the PR to remove the code, the previous failed builds were trying to see if anything behind this define is still serving some purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:30,reliability,repair,repair,30,"Ok, the code is broken beyond repair, let's just kill it with fire. I updated the PR to remove the code, the previous failed builds were trying to see if anything behind this define is still serving some purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:118,reliability,fail,failed,118,"Ok, the code is broken beyond repair, let's just kill it with fire. I updated the PR to remove the code, the previous failed builds were trying to see if anything behind this define is still serving some purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:70,safety,updat,updated,70,"Ok, the code is broken beyond repair, let's just kill it with fire. I updated the PR to remove the code, the previous failed builds were trying to see if anything behind this define is still serving some purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:70,security,updat,updated,70,"Ok, the code is broken beyond repair, let's just kill it with fire. I updated the PR to remove the code, the previous failed builds were trying to see if anything behind this define is still serving some purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:124,performance,memor,memory,124,@Teemperor IIRC @pcanal was using this switch when he was working on ROOT destruction. We had some issues when deleting the memory on exit. Let's wait for his opinion before removing this. It seems challenging to get ROOT's destruction order right but if we are still looking for such PR :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:124,usability,memor,memory,124,@Teemperor IIRC @pcanal was using this switch when he was working on ROOT destruction. We had some issues when deleting the memory on exit. Let's wait for his opinion before removing this. It seems challenging to get ROOT's destruction order right but if we are still looking for such PR :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:32,availability,repair,repair,32,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:464,availability,repair,repair,464,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:236,interoperability,semant,semantically,236,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:32,reliability,repair,repair,32,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:464,reliability,repair,repair,464,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:150,safety,compl,completely,150,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:150,security,compl,completely,150,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:369,usability,clear,clear,369,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:604,usability,guid,guide,604,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:51,deployability,build,build,51,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:84,deployability,build,build,84,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:153,deployability,log,log,153,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:285,performance,memor,memory,285,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:153,safety,log,log,153,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:153,security,log,log,153,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:153,testability,log,log,153,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:73,usability,document,documented,73,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:285,usability,memor,memory,285,"If we leave it, we should add least have a Jenkins build for it and some documented build setting that explains this without having to search in the git log. Otherwise people just add more and more typos between those ifdefs, remove the things the code in there references, or fix the memory leaks in another way, causing this code to be just misleading at one point in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:161,testability,context,context,161,"@pcanal, I'd like to proceed with this PR. What about merging it and immediately open another PR with these changes, this way somebody could work on this in the context of the PR. This would be a good middle ground between your and @Teemperor's point.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:107,integrability,event,eventually,107,"Unless somebody is going to work on it 'immediately', this plan would, in my opinion, lead to the PR being eventually 'forgotten' about, authors then re-adding the removed code piece-meal (and without the insight of the previous tries). If there is typos and removal, they will be discovered (and fixed) by whomever is courageous enough to try actually turning it on and fixing the underlying issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:281,integrability,discover,discovered,281,"Unless somebody is going to work on it 'immediately', this plan would, in my opinion, lead to the PR being eventually 'forgotten' about, authors then re-adding the removed code piece-meal (and without the insight of the previous tries). If there is typos and removal, they will be discovered (and fixed) by whomever is courageous enough to try actually turning it on and fixing the underlying issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:281,interoperability,discover,discovered,281,"Unless somebody is going to work on it 'immediately', this plan would, in my opinion, lead to the PR being eventually 'forgotten' about, authors then re-adding the removed code piece-meal (and without the insight of the previous tries). If there is typos and removal, they will be discovered (and fixed) by whomever is courageous enough to try actually turning it on and fixing the underlying issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:137,security,auth,authors,137,"Unless somebody is going to work on it 'immediately', this plan would, in my opinion, lead to the PR being eventually 'forgotten' about, authors then re-adding the removed code piece-meal (and without the insight of the previous tries). If there is typos and removal, they will be discovered (and fixed) by whomever is courageous enough to try actually turning it on and fixing the underlying issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:59,testability,plan,plan,59,"Unless somebody is going to work on it 'immediately', this plan would, in my opinion, lead to the PR being eventually 'forgotten' about, authors then re-adding the removed code piece-meal (and without the insight of the previous tries). If there is typos and removal, they will be discovered (and fixed) by whomever is courageous enough to try actually turning it on and fixing the underlying issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:281,usability,discov,discovered,281,"Unless somebody is going to work on it 'immediately', this plan would, in my opinion, lead to the PR being eventually 'forgotten' about, authors then re-adding the removed code piece-meal (and without the insight of the previous tries). If there is typos and removal, they will be discovered (and fixed) by whomever is courageous enough to try actually turning it on and fixing the underlying issues.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:138,integrability,pub,public,138,I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:103,performance,time,time,103,I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:11,deployability,build,build,11,@phsft-bot build with flags -Dmemory_termination=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:746,deployability,updat,updated,746,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:896,deployability,updat,updated,896,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:140,integrability,pub,public,140,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:217,modifiability,maintain,maintaining,217,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:105,performance,time,time,105,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:251,performance,time,time,251,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:217,safety,maintain,maintaining,217,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:619,safety,reme,remember,619,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:746,safety,updat,updated,746,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:896,safety,updat,updated,896,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:562,security,modif,modifying,562,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:746,security,updat,updated,746,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:896,security,updat,updated,896,"> I agree but the pro would be that we will have less 'broken'/half-baked code in ROOT while at the same time we keep track of it in a very public way. @vgvassilev I respectfully disagree. Unless somebody is actively maintaining this branch (and that time might actually be better used to actively resolve the issues), the branch will soon become unmergeable (without 'work') and thus be almost useless. Furthermore, if the code is no longer in the actual source file, the branch will soon(ish) be forgotten and will almost certainly not be checked against when modifying the relevant part of the code (and would could remember all the parts of the code covered). So I would rather have in the source code, code fragments that might possibly get updated (when people use search/replace, etc.) rather than a branch that will most likely (again, unless somebody is actively working on it) be never updated ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:42,deployability,build,build,42,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:64,deployability,build,build,64,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:82,performance,time,time,82,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:90,performance,time,time,90,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:53,safety,test,tests,53,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:53,testability,test,tests,53,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:218,testability,regress,regressions,218,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:193,usability,progress,progress,193,@peremato Any objection against a Jenkins build that tests this build option from time to time? I would like @pcanal work to converge with master at some point and this would keep track of the progress (or any further regressions).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:72,safety,compl,completely,72,@myself @vgvassilev @Teemperor I just realize that the nature of the PR completely changed (to match the direction I was pushing) so at this point (i.e. adding cmake flag to allow testing) I think this is good to go. thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:180,safety,test,testing,180,@myself @vgvassilev @Teemperor I just realize that the nature of the PR completely changed (to match the direction I was pushing) so at this point (i.e. adding cmake flag to allow testing) I think this is good to go. thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:72,security,compl,completely,72,@myself @vgvassilev @Teemperor I just realize that the nature of the PR completely changed (to match the direction I was pushing) so at this point (i.e. adding cmake flag to allow testing) I think this is good to go. thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:180,testability,test,testing,180,@myself @vgvassilev @Teemperor I just realize that the nature of the PR completely changed (to match the direction I was pushing) so at this point (i.e. adding cmake flag to allow testing) I think this is good to go. thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:11,deployability,build,build,11,@phsft-bot build with flags -Dmemory_termination=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:11,deployability,build,build,11,@phsft-bot build with flags -Dmemory_termination=ON. The few changes I did should make rootcling pass and we can run tests. Let's see if it works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:117,safety,test,tests,117,@phsft-bot build with flags -Dmemory_termination=ON. The few changes I did should make rootcling pass and we can run tests. Let's see if it works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:117,testability,test,tests,117,@phsft-bot build with flags -Dmemory_termination=ON. The few changes I did should make rootcling pass and we can run tests. Let's see if it works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:192,deployability,build,builds,192,"Ok, this doesn't break master and the clang-format changes would actually introducing inconsistencies here, so I think this is good to go. I'll merge so that @martinmine can setup the Jenkins builds and we can track progress of this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:44,interoperability,format,format,44,"Ok, this doesn't break master and the clang-format changes would actually introducing inconsistencies here, so I think this is good to go. I'll merge so that @martinmine can setup the Jenkins builds and we can track progress of this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:9,reliability,doe,doesn,9,"Ok, this doesn't break master and the clang-format changes would actually introducing inconsistencies here, so I think this is good to go. I'll merge so that @martinmine can setup the Jenkins builds and we can track progress of this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:216,usability,progress,progress,216,"Ok, this doesn't break master and the clang-format changes would actually introducing inconsistencies here, so I think this is good to go. I'll merge so that @martinmine can setup the Jenkins builds and we can track progress of this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:32,availability,repair,repair,32,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:464,availability,repair,repair,464,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:236,interoperability,semant,semantically,236,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:32,reliability,repair,repair,32,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:464,reliability,repair,repair,464,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:150,safety,compl,completely,150,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:150,security,compl,completely,150,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:369,usability,clear,clear,369,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/794:604,usability,guid,guide,604,"> Ok, the code is broken beyond repair, let's just kill it with fire. Yes, getting the code to work properly is 'hard' and thus the work has not been completely. If you have analyzed each of those lines and deemed that indeed it is not semantically possible to cleanups those things at the end of the process, then please replace the (unactivated) deletion code with a clear explanation of why it is impossible to delete (and saying 'it is hard' or 'broken beyond repair' is not quite enough of an explanation :) :) ). So unless, somebody actually investigate each of those lines, please leave them as a guide of what still needs to be investigated. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/794
https://github.com/root-project/root/pull/795:45,testability,plan,planned,45,"Thanks for doing this. IIRC, that change was planned by @Axel-Naumann.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/795:19,safety,reme,remember,19,"@vgvassilev Yes, I remember that. Unfortunately, it was never merged and I cannot find the PR to merge it either, so I created a new one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/795:278,deployability,build,build,278,"@vgvassilev I meant to have a discussion before merging this, but oh well... Let's just hope no one complains. Please ask me before merging in the future. My commit message had a small typo that I intended to fix prior to merging, but I didn't push to avoid triggering an extra build just for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/795:165,integrability,messag,message,165,"@vgvassilev I meant to have a discussion before merging this, but oh well... Let's just hope no one complains. Please ask me before merging in the future. My commit message had a small typo that I intended to fix prior to merging, but I didn't push to avoid triggering an extra build just for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/795:165,interoperability,messag,message,165,"@vgvassilev I meant to have a discussion before merging this, but oh well... Let's just hope no one complains. Please ask me before merging in the future. My commit message had a small typo that I intended to fix prior to merging, but I didn't push to avoid triggering an extra build just for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/795:100,safety,compl,complains,100,"@vgvassilev I meant to have a discussion before merging this, but oh well... Let's just hope no one complains. Please ask me before merging in the future. My commit message had a small typo that I intended to fix prior to merging, but I didn't push to avoid triggering an extra build just for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/795:252,safety,avoid,avoid,252,"@vgvassilev I meant to have a discussion before merging this, but oh well... Let's just hope no one complains. Please ask me before merging in the future. My commit message had a small typo that I intended to fix prior to merging, but I didn't push to avoid triggering an extra build just for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/795:100,security,compl,complains,100,"@vgvassilev I meant to have a discussion before merging this, but oh well... Let's just hope no one complains. Please ask me before merging in the future. My commit message had a small typo that I intended to fix prior to merging, but I didn't push to avoid triggering an extra build just for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/795:110,reliability,doe,does,110,"@amadio, it seems that we already had that discussion. We had consensus about that and it was a matter of who does it (Please see Axel's email). Don't worry about the typo, it is not a precedent.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/795
https://github.com/root-project/root/pull/796:23,deployability,fail,failed,23,"Hi,. I see that #990.1 failed because of some clang format changes. I could make these changes, but some seem to be inconsistent with the rest of the code. What would be the advice? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:52,interoperability,format,format,52,"Hi,. I see that #990.1 failed because of some clang format changes. I could make these changes, but some seem to be inconsistent with the rest of the code. What would be the advice? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:23,reliability,fail,failed,23,"Hi,. I see that #990.1 failed because of some clang format changes. I could make these changes, but some seem to be inconsistent with the rest of the code. What would be the advice? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:35,availability,failur,failures,35,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:35,deployability,fail,failures,35,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:105,deployability,Fail,Failed,105,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:252,deployability,version,version,252,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:267,deployability,updat,update,267,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:440,deployability,fail,failed,440,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:252,integrability,version,version,252,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:252,modifiability,version,version,252,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:35,performance,failur,failures,35,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:35,reliability,fail,failures,35,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:105,reliability,Fail,Failed,105,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:440,reliability,fail,failed,440,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:473,reliability,doe,doesn,473,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:30,safety,test,test,30,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:267,safety,updat,update,267,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:307,safety,test,tests,307,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:400,safety,test,test,400,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:267,security,updat,update,267,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:30,testability,test,test,30,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:213,testability,verif,verified,213,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:307,testability,test,tests,307,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:400,testability,test,test,400,"Hi,. just a short note on the test failures, we saw before that:. 986 - roottest-root-tree-cloning-make (Failed). because off reference file differences caused by somewhat different compressed tree seizes. DavidC verified that this happens because the version number update of TBranch. Should we change the tests refs as part of this pull request? I have no explanation for projectroot.math.mathcore.test.mathcore_testLogLExecPolicy (which failed on ubuntu14 only), but it doesn't look related to this change. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:273,deployability,fail,failing,273,"Could you add a gtest for the feature? An example could be found [here](https://github.com/root-project/root/blob/master/io/io/test/TBufferMerger.cxx). It seems you have only 3 formatting changes left ;). projectroot.math.mathcore.test.mathcore_testLogLExecPolicy has been failing since some time, I believe that is independent on this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:177,interoperability,format,formatting,177,"Could you add a gtest for the feature? An example could be found [here](https://github.com/root-project/root/blob/master/io/io/test/TBufferMerger.cxx). It seems you have only 3 formatting changes left ;). projectroot.math.mathcore.test.mathcore_testLogLExecPolicy has been failing since some time, I believe that is independent on this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:292,performance,time,time,292,"Could you add a gtest for the feature? An example could be found [here](https://github.com/root-project/root/blob/master/io/io/test/TBufferMerger.cxx). It seems you have only 3 formatting changes left ;). projectroot.math.mathcore.test.mathcore_testLogLExecPolicy has been failing since some time, I believe that is independent on this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:273,reliability,fail,failing,273,"Could you add a gtest for the feature? An example could be found [here](https://github.com/root-project/root/blob/master/io/io/test/TBufferMerger.cxx). It seems you have only 3 formatting changes left ;). projectroot.math.mathcore.test.mathcore_testLogLExecPolicy has been failing since some time, I believe that is independent on this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:127,safety,test,test,127,"Could you add a gtest for the feature? An example could be found [here](https://github.com/root-project/root/blob/master/io/io/test/TBufferMerger.cxx). It seems you have only 3 formatting changes left ;). projectroot.math.mathcore.test.mathcore_testLogLExecPolicy has been failing since some time, I believe that is independent on this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:231,safety,test,test,231,"Could you add a gtest for the feature? An example could be found [here](https://github.com/root-project/root/blob/master/io/io/test/TBufferMerger.cxx). It seems you have only 3 formatting changes left ;). projectroot.math.mathcore.test.mathcore_testLogLExecPolicy has been failing since some time, I believe that is independent on this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:127,testability,test,test,127,"Could you add a gtest for the feature? An example could be found [here](https://github.com/root-project/root/blob/master/io/io/test/TBufferMerger.cxx). It seems you have only 3 formatting changes left ;). projectroot.math.mathcore.test.mathcore_testLogLExecPolicy has been failing since some time, I believe that is independent on this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:231,testability,test,test,231,"Could you add a gtest for the feature? An example could be found [here](https://github.com/root-project/root/blob/master/io/io/test/TBufferMerger.cxx). It seems you have only 3 formatting changes left ;). projectroot.math.mathcore.test.mathcore_testLogLExecPolicy has been failing since some time, I believe that is independent on this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:43,deployability,version,version,43,"Hi Philippe, Vassil,. thanks I removed the version change in TBranch. Also there are a few formatting complaints left. I haven't implemented those yet because they make the file look inconsistent. Would you prefer me to put them in or leave it as is? I will also ask David to look into preparing a gtest, but that may take a little. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:43,integrability,version,version,43,"Hi Philippe, Vassil,. thanks I removed the version change in TBranch. Also there are a few formatting complaints left. I haven't implemented those yet because they make the file look inconsistent. Would you prefer me to put them in or leave it as is? I will also ask David to look into preparing a gtest, but that may take a little. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:91,interoperability,format,formatting,91,"Hi Philippe, Vassil,. thanks I removed the version change in TBranch. Also there are a few formatting complaints left. I haven't implemented those yet because they make the file look inconsistent. Would you prefer me to put them in or leave it as is? I will also ask David to look into preparing a gtest, but that may take a little. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:43,modifiability,version,version,43,"Hi Philippe, Vassil,. thanks I removed the version change in TBranch. Also there are a few formatting complaints left. I haven't implemented those yet because they make the file look inconsistent. Would you prefer me to put them in or leave it as is? I will also ask David to look into preparing a gtest, but that may take a little. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:102,safety,compl,complaints,102,"Hi Philippe, Vassil,. thanks I removed the version change in TBranch. Also there are a few formatting complaints left. I haven't implemented those yet because they make the file look inconsistent. Would you prefer me to put them in or leave it as is? I will also ask David to look into preparing a gtest, but that may take a little. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:102,security,compl,complaints,102,"Hi Philippe, Vassil,. thanks I removed the version change in TBranch. Also there are a few formatting complaints left. I haven't implemented those yet because they make the file look inconsistent. Would you prefer me to put them in or leave it as is? I will also ask David to look into preparing a gtest, but that may take a little. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:207,usability,prefer,prefer,207,"Hi Philippe, Vassil,. thanks I removed the version change in TBranch. Also there are a few formatting complaints left. I haven't implemented those yet because they make the file look inconsistent. Would you prefer me to put them in or leave it as is? I will also ask David to look into preparing a gtest, but that may take a little. Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:27,interoperability,format,formatting,27,"@gemmeren, thanks, for the formatting I'd prefer @pcanal to make a call ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:42,usability,prefer,prefer,42,"@gemmeren, thanks, for the formatting I'd prefer @pcanal to make a call ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:188,availability,state,state,188,"@gemmeren From the commits tab, it looks like you have repeated commits with the same message, and separate commits that should really be just fixups to avoid having a broken intermediate state in the tree. Are you using merge instead of rebase? Could you please rebase and combine those commits into a single one? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:86,integrability,messag,message,86,"@gemmeren From the commits tab, it looks like you have repeated commits with the same message, and separate commits that should really be just fixups to avoid having a broken intermediate state in the tree. Are you using merge instead of rebase? Could you please rebase and combine those commits into a single one? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:188,integrability,state,state,188,"@gemmeren From the commits tab, it looks like you have repeated commits with the same message, and separate commits that should really be just fixups to avoid having a broken intermediate state in the tree. Are you using merge instead of rebase? Could you please rebase and combine those commits into a single one? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:86,interoperability,messag,message,86,"@gemmeren From the commits tab, it looks like you have repeated commits with the same message, and separate commits that should really be just fixups to avoid having a broken intermediate state in the tree. Are you using merge instead of rebase? Could you please rebase and combine those commits into a single one? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:175,modifiability,interm,intermediate,175,"@gemmeren From the commits tab, it looks like you have repeated commits with the same message, and separate commits that should really be just fixups to avoid having a broken intermediate state in the tree. Are you using merge instead of rebase? Could you please rebase and combine those commits into a single one? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:153,safety,avoid,avoid,153,"@gemmeren From the commits tab, it looks like you have repeated commits with the same message, and separate commits that should really be just fixups to avoid having a broken intermediate state in the tree. Are you using merge instead of rebase? Could you please rebase and combine those commits into a single one? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:107,usability,command,commands,107,"Hi Guilherme,. yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? How would I combine the commits? Thanks for your help, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:187,usability,help,help,187,"Hi Guilherme,. yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? How would I combine the commits? Thanks for your help, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:424,availability,cluster,cluster,424,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:553,availability,cluster,clusters,553,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:683,availability,cluster,clusters,683,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1158,availability,cluster,cluster,1158,"our case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1288,availability,cluster,clusters,1288,"t of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1419,availability,cluster,clusters,1419," cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. ke",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1968,availability,cluster,cluster,1968,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2401,availability,cluster,cluster,2401,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:424,deployability,cluster,cluster,424,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:553,deployability,cluster,clusters,553,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:683,deployability,cluster,clusters,683,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:891,deployability,version,version,891,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1158,deployability,cluster,cluster,1158,"our case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1288,deployability,cluster,clusters,1288,"t of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranc",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1419,deployability,cluster,clusters,1419," cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. ke",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1631,deployability,version,version,1631,"rtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Chee",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1968,deployability,cluster,cluster,1968,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2401,deployability,cluster,cluster,2401,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:891,integrability,version,version,891,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1631,integrability,version,version,1631,"rtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Chee",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2018,integrability,messag,message,2018,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2099,integrability,messag,message,2099,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2506,integrability,messag,message,2506,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:781,interoperability,format,format,781,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1518,interoperability,format,format,1518,"egative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and sep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2018,interoperability,messag,message,2018,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2099,interoperability,messag,message,2099,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2506,interoperability,messag,message,2506,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:891,modifiability,version,version,891,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1631,modifiability,version,version,1631,"rtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Chee",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:451,performance,memor,memory,451,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:581,performance,memor,memory,581,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:711,performance,memor,memory,711,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:849,performance,memor,memory,849,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1185,performance,memor,memory,1185,"is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1316,performance,memor,memory,1316,"like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1447,performance,memor,memory,1447," memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The fina",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1588,performance,memor,memory,1588,"ck 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproduci",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1995,performance,memor,memory,1995,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2340,performance,memor,memory,2340,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2429,performance,memor,memory,2429,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1811,security,Auth,Author,1811,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2200,security,Auth,Author,2200,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:94,usability,command,commands,94,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:152,usability,help,help,152,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:451,usability,memor,memory,451,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:581,usability,memor,memory,581,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:711,usability,memor,memory,711,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:849,usability,memor,memory,849,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:878,usability,Undo,Undo,878,"> yes, I am a Git novice, (in ATLAS we use GitLab and merge), so I used several commit, merge commands. How do I use rebase? No problem! We are here to help. In your case, the easiest way is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1185,usability,memor,memory,1185,"is to checkout your branch, and do a `git rebase -i master`. That will put you into an editor with a list of commits, more or less like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1316,usability,memor,memory,1316,"like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1447,usability,memor,memory,1447," memory. pick 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. pick 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The fina",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1588,usability,memor,memory,1588,"ck 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproduci",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1618,usability,Undo,Undo,1618,"on to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:1995,usability,memor,memory,1995,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2313,usability,help,help,2313,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2340,usability,memor,memory,2340,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:2429,usability,memor,memory,2429,"lSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. pick c25ea30332 Make some clang format changes. pick dae3241bee Fix whitespace. pick baa80f53a4 Fix memory leak. pick a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then, you can change the commits you want to fuse from `pick` to `fixup`, which will combine them with the previous commit, like this:. ```. pick ede15457be Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. fixup 3035c73a31 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory. fixup 275d909504 Adding new option to set MaxVirtualSize to a negative value causing that many clusters of baskets kept in memory Just some indentation changes. fixup c25ea30332 Make some clang format changes. fixup dae3241bee Fix whitespace. fixup baa80f53a4 Fix memory leak. fixup a8324c92ee Undo TBranch version change, thanks Philippe. ```. Then you save and quit, and git will rebase for you, leaving you with a single commit:. ```. commit 304f38e812556a7d8c4dcaaf5a71fca4d3ba9bf2. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. Adding new option to set MaxVirtualSize to a negative value causing one cluster of baskets kept in memory. ```. Since the message is quite long, I also did `git commit --amend`, which lets you edit your message and save it. At the end, I have this:. ```. commit 891b51caa6089e13997e2d2e0aa25f869970e878. Author: Peter van Gemmeren <gemmeren@anl.gov>. Date: Tue Jul 18 17:47:58 2017 -0500. [TBranch] Add new option to help in keeping baskets in memory. . Set MaxVirtualSize to a negative value causing one cluster of baskets. kept in memory. ```. The final commit has all the changes combined, and a nice short message and separate long explanation. Let me know if you have any problems reproducing, otherwise I can do this at the end. Cheers,.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:71,integrability,messag,messages,71,"@vgvassilev That's true, but that would put the several similar commit messages in the same commit, which is not that clean. If we can help the contributors prepare the PRs, that's better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:71,interoperability,messag,messages,71,"@vgvassilev That's true, but that would put the several similar commit messages in the same commit, which is not that clean. If we can help the contributors prepare the PRs, that's better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:135,usability,help,help,135,"@vgvassilev That's true, but that would put the several similar commit messages in the same commit, which is not that clean. If we can help the contributors prepare the PRs, that's better.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:56,integrability,messag,messages,56,"@amadio, one could easily edit the content the squashed messages upon merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:56,interoperability,messag,messages,56,"@amadio, one could easily edit the content the squashed messages upon merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:35,performance,content,content,35,"@amadio, one could easily edit the content the squashed messages upon merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:116,availability,consist,consistent,116,"Hi Philippe,. do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? Also, I am not sure whether I should combine the commits (as Guilherme explained) or if its easier to do at your (or Vassil's) end. Thanks, Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:65,interoperability,format,formatting,65,"Hi Philippe,. do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? Also, I am not sure whether I should combine the commits (as Guilherme explained) or if its easier to do at your (or Vassil's) end. Thanks, Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:105,interoperability,format,formatting,105,"Hi Philippe,. do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? Also, I am not sure whether I should combine the commits (as Guilherme explained) or if its easier to do at your (or Vassil's) end. Thanks, Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:76,safety,compl,complaints,76,"Hi Philippe,. do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? Also, I am not sure whether I should combine the commits (as Guilherme explained) or if its easier to do at your (or Vassil's) end. Thanks, Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:76,security,compl,complaints,76,"Hi Philippe,. do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? Also, I am not sure whether I should combine the commits (as Guilherme explained) or if its easier to do at your (or Vassil's) end. Thanks, Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:28,usability,prefer,preference,28,"Hi Philippe,. do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? Also, I am not sure whether I should combine the commits (as Guilherme explained) or if its easier to do at your (or Vassil's) end. Thanks, Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:116,usability,consist,consistent,116,"Hi Philippe,. do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? Also, I am not sure whether I should combine the commits (as Guilherme explained) or if its easier to do at your (or Vassil's) end. Thanks, Peter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:339,availability,consist,consistent,339,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:152,deployability,log,log,152,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:529,integrability,interfac,interface,529,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:288,interoperability,format,formatting,288,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:328,interoperability,format,formatting,328,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:529,interoperability,interfac,interface,529,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:529,modifiability,interfac,interface,529,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:469,performance,content,content,469,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:152,safety,log,log,152,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:184,safety,compl,complete,184,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:299,safety,compl,complaints,299,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:445,safety,review,review,445,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:152,security,log,log,152,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:184,security,compl,complete,184,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:299,security,compl,complaints,299,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:152,testability,log,log,152,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:445,testability,review,review,445,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:94,usability,prefer,prefer,94,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:134,usability,prefer,prefer,134,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:251,usability,prefer,preference,251,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:339,usability,consist,consistent,339,"> Also, I am not sure whether I should combine the commits (as Guilherme explained) . I would prefer if you do .. in addition I would prefer if the git log was expanded to include the complete explanation given in the PR introduction. > do you have a preference on whether to fix all the formatting complaints or leave the file formatting consistent with the existing code? I would apply the recommendation. **However** I still have to actually review the proposal for content ... (i.e. in particular I am still pondering if the interface selected is the best one ...). More later this week. thanks,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:336,availability,cluster,clusters,336,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:419,availability,cluster,cluster,419,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:336,deployability,cluster,clusters,336,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:419,deployability,cluster,cluster,419,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:210,integrability,interfac,interface,210,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:58,interoperability,format,formatting,58,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:210,interoperability,interfac,interface,210,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:210,modifiability,interfac,interface,210,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:410,safety,compl,complete,410,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:410,security,compl,complete,410,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:489,testability,understand,understand,489,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:504,testability,context,context,504,"Hi Philippe,. I just pushed in another commit, fixing the formatting and changing to have TTree::TClusterIterator::Previous(). I also added a gtest, which was requested by Vassil. . I still haven't changed the interface, because I have no good idea of how to do it. I guess we want to keep GetMaxVirtualSize() < 0 to determine how many clusters to retain, but use something else to trigger the pre-fetching of complete cluster. What would that be? I saw fBits mentioned, but didn't really understand the context. Can you walk me through that? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:67,reliability,doe,doesn,67,"Hi @amadio,. for some reason git rebase (see your comment on 7/25) doesn't seem to work for me. I think that this is because I made the changes in my local master. Sorry I am not too familiar with git yet, what can we do? Thanks, Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:35,integrability,repositor,repository,35,I think I totally messed up my git repository now. So I am closing this request and will start a clean one later...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:35,interoperability,repositor,repository,35,I think I totally messed up my git repository now. So I am closing this request and will start a clean one later...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:186,deployability,updat,updating,186,"Hi @gemmeren I think the best thing is to start from a clean master, as you mentioned, and reapply your changes. Then you can open a new pull request. Please do not use `git merge` when updating your branch, but follow the instructions on our website: https://root.cern.ch/creating-pull-request. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:186,safety,updat,updating,186,"Hi @gemmeren I think the best thing is to start from a clean master, as you mentioned, and reapply your changes. Then you can open a new pull request. Please do not use `git merge` when updating your branch, but follow the instructions on our website: https://root.cern.ch/creating-pull-request. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/796:186,security,updat,updating,186,"Hi @gemmeren I think the best thing is to start from a clean master, as you mentioned, and reapply your changes. Then you can open a new pull request. Please do not use `git merge` when updating your branch, but follow the instructions on our website: https://root.cern.ch/creating-pull-request. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/796
https://github.com/root-project/root/pull/798:82,deployability,fail,failing,82,"Alright, I fixed this on master now. I ran the test more than 25000 times without failing. Thanks for your work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/798
https://github.com/root-project/root/pull/798:68,performance,time,times,68,"Alright, I fixed this on master now. I ran the test more than 25000 times without failing. Thanks for your work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/798
https://github.com/root-project/root/pull/798:82,reliability,fail,failing,82,"Alright, I fixed this on master now. I ran the test more than 25000 times without failing. Thanks for your work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/798
https://github.com/root-project/root/pull/798:47,safety,test,test,47,"Alright, I fixed this on master now. I ran the test more than 25000 times without failing. Thanks for your work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/798
https://github.com/root-project/root/pull/798:47,testability,test,test,47,"Alright, I fixed this on master now. I ran the test more than 25000 times without failing. Thanks for your work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/798
https://github.com/root-project/root/pull/799:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:15,availability,error,errors,15,It seems these errors are inherited from master. Should re-trigger once our master is green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:86,energy efficiency,green,green,86,It seems these errors are inherited from master. Should re-trigger once our master is green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:26,modifiability,inherit,inherited,26,It seems these errors are inherited from master. Should re-trigger once our master is green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:15,performance,error,errors,15,It seems these errors are inherited from master. Should re-trigger once our master is green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:15,safety,error,errors,15,It seems these errors are inherited from master. Should re-trigger once our master is green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:15,usability,error,errors,15,It seems these errors are inherited from master. Should re-trigger once our master is green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:66,deployability,build,build,66,"Yes, that's true. I hope we can avoid the problem with @phsft-bot build with flags -Dvc=ON -Dveccore=ON . The problem appears only for `veccore=ON` + `vc=OFF`, which was missed before since we always enabled them together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:32,safety,avoid,avoid,32,"Yes, that's true. I hope we can avoid the problem with @phsft-bot build with flags -Dvc=ON -Dveccore=ON . The problem appears only for `veccore=ON` + `vc=OFF`, which was missed before since we always enabled them together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:11,deployability,build,build,11,@phsft-bot build with flags -Dvc=ON -Dveccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/799:30,interoperability,conflict,conflict,30,This is now merged fixing the conflict by hand,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/799
https://github.com/root-project/root/pull/802:2,safety,test,tested,2,I tested this and it works for me too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/802
https://github.com/root-project/root/pull/802:2,testability,test,tested,2,I tested this and it works for me too.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/802
https://github.com/root-project/root/pull/802:24,usability,close,close,24,We should not forget to close the JIRA issue ([ROOT-8840](https://sft.its.cern.ch/jira/browse/ROOT-8840)) associated with this work once this is merged.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/802
https://github.com/root-project/root/pull/803:166,availability,consist,consist,166,"@amadio . 2 cases solved here:. 1. When chunking and fitting the right amount of elements per chunk I may end up with empty chunks at the end. This chunks will still consist of N elements per chunk, but they will not be initialized. Accessing them was a problem. Solved by reducing the number of chunks (not allowing empty chunks). 2. Although the evaluation loop finishes early when, in the last chunk, the iteration reaches the last data element, the partial results vector was of size step. That means we were reducing over elements that may have not been initialized. Solved by changing the size of the partial results vector.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:273,energy efficiency,reduc,reducing,273,"@amadio . 2 cases solved here:. 1. When chunking and fitting the right amount of elements per chunk I may end up with empty chunks at the end. This chunks will still consist of N elements per chunk, but they will not be initialized. Accessing them was a problem. Solved by reducing the number of chunks (not allowing empty chunks). 2. Although the evaluation loop finishes early when, in the last chunk, the iteration reaches the last data element, the partial results vector was of size step. That means we were reducing over elements that may have not been initialized. Solved by changing the size of the partial results vector.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:513,energy efficiency,reduc,reducing,513,"@amadio . 2 cases solved here:. 1. When chunking and fitting the right amount of elements per chunk I may end up with empty chunks at the end. This chunks will still consist of N elements per chunk, but they will not be initialized. Accessing them was a problem. Solved by reducing the number of chunks (not allowing empty chunks). 2. Although the evaluation loop finishes early when, in the last chunk, the iteration reaches the last data element, the partial results vector was of size step. That means we were reducing over elements that may have not been initialized. Solved by changing the size of the partial results vector.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:233,security,Access,Accessing,233,"@amadio . 2 cases solved here:. 1. When chunking and fitting the right amount of elements per chunk I may end up with empty chunks at the end. This chunks will still consist of N elements per chunk, but they will not be initialized. Accessing them was a problem. Solved by reducing the number of chunks (not allowing empty chunks). 2. Although the evaluation loop finishes early when, in the last chunk, the iteration reaches the last data element, the partial results vector was of size step. That means we were reducing over elements that may have not been initialized. Solved by changing the size of the partial results vector.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:166,usability,consist,consist,166,"@amadio . 2 cases solved here:. 1. When chunking and fitting the right amount of elements per chunk I may end up with empty chunks at the end. This chunks will still consist of N elements per chunk, but they will not be initialized. Accessing them was a problem. Solved by reducing the number of chunks (not allowing empty chunks). 2. Although the evaluation loop finishes early when, in the last chunk, the iteration reaches the last data element, the partial results vector was of size step. That means we were reducing over elements that may have not been initialized. Solved by changing the size of the partial results vector.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:74,integrability,messag,message,74,"@xvallspl That makes a lot more sense. Could you please change the commit message accordingly? That is, add your comment as an explanation with `git commit --amend`. I think it helps if we have to look at the code later again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:74,interoperability,messag,message,74,"@xvallspl That makes a lot more sense. Could you please change the commit message accordingly? That is, add your comment as an explanation with `git commit --amend`. I think it helps if we have to look at the code later again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:177,usability,help,helps,177,"@xvallspl That makes a lot more sense. Could you please change the commit message accordingly? That is, add your comment as an explanation with `git commit --amend`. I think it helps if we have to look at the code later again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:43,safety,test,tests,43,"Yes, I was going to do that once I saw the tests were passing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:43,testability,test,tests,43,"Yes, I was going to do that once I saw the tests were passing :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:34,deployability,Log,LogLExecPolicy,34,"Oh, I was hoping it would fix the LogLExecPolicy test, but I guess that's not the case. Any progress on that one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:34,safety,Log,LogLExecPolicy,34,"Oh, I was hoping it would fix the LogLExecPolicy test, but I guess that's not the case. Any progress on that one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:49,safety,test,test,49,"Oh, I was hoping it would fix the LogLExecPolicy test, but I guess that's not the case. Any progress on that one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:34,security,Log,LogLExecPolicy,34,"Oh, I was hoping it would fix the LogLExecPolicy test, but I guess that's not the case. Any progress on that one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:34,testability,Log,LogLExecPolicy,34,"Oh, I was hoping it would fix the LogLExecPolicy test, but I guess that's not the case. Any progress on that one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:49,testability,test,test,49,"Oh, I was hoping it would fix the LogLExecPolicy test, but I guess that's not the case. Any progress on that one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:92,usability,progress,progress,92,"Oh, I was hoping it would fix the LogLExecPolicy test, but I guess that's not the case. Any progress on that one?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:4,deployability,updat,update,4,The update for the commit message was not there yet! Oh well,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:26,integrability,messag,message,26,The update for the commit message was not there yet! Oh well,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:26,interoperability,messag,message,26,The update for the commit message was not there yet! Oh well,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:4,safety,updat,update,4,The update for the commit message was not there yet! Oh well,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/803:4,security,updat,update,4,The update for the commit message was not there yet! Oh well,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/803
https://github.com/root-project/root/pull/804:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Droot7=ON -Dcxx14=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:92,interoperability,compatib,compatibility,92,"Hi,. I wonder if it wouldn't be perhaps better to implement a to_string method to guarantee compatibility with the stl string_view. This will be also immediately useful for the internals of the TDF...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:35,interoperability,standard,standard,35,"Hi Danilo, the problem is that the standard `string_view` doesn't have the `.to_string()` method, so we cannot fix it by adding it in ROOT. We probably have to move to using the free function `std::to_string()` specialized for `string_view` in that case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:58,reliability,doe,doesn,58,"Hi Danilo, the problem is that the standard `string_view` doesn't have the `.to_string()` method, so we cannot fix it by adding it in ROOT. We probably have to move to using the free function `std::to_string()` specialized for `string_view` in that case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:44,availability,operat,operator,44,"Hi,. our implementation is also missing an `operator<<` overload, see ROOT-8896. @pcanal said he'd look into it. P.S. I think the standard way to convert a `std::string_view` to a `std::string` is just to construct the latter from the former.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:130,interoperability,standard,standard,130,"Hi,. our implementation is also missing an `operator<<` overload, see ROOT-8896. @pcanal said he'd look into it. P.S. I think the standard way to convert a `std::string_view` to a `std::string` is just to construct the latter from the former.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:612,integrability,interfac,interface,612,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:612,interoperability,interfac,interface,612,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:716,interoperability,standard,standard,716,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:612,modifiability,interfac,interface,612,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:104,performance,memor,memory,104,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:637,reliability,doe,does,637,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:89,safety,avoid,avoids,89,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:104,usability,memor,memory,104,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:49,interoperability,compatib,compatibility,49,"I see two advantages of string_view:. 1. Forward compatibility. 2. TStrings, const char*, std::string, std::string_view can be passed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/804:261,usability,close,close,261,"Ok, as long as we can compile with GCC7 in C++17 mode, as the experiments are requesting, I don't have a strong opinion on this and we can keep using `std::string_view`. That said, should I try to make point 2 above work with `const std::string&` or do we just close this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/804
https://github.com/root-project/root/pull/807:8,availability,ping,ping,8,@pcanal ping.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:34,availability,ping,ping,34,"I have to update the PR, so: undo ping @ Philippe :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:10,deployability,updat,update,10,"I have to update the PR, so: undo ping @ Philippe :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:10,safety,updat,update,10,"I have to update the PR, so: undo ping @ Philippe :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:10,security,updat,update,10,"I have to update the PR, so: undo ping @ Philippe :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:29,usability,undo,undo,29,"I have to update the PR, so: undo ping @ Philippe :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:25,deployability,updat,updating,25,"@Teemperor, did you mean updating it by reducing the scope of the fix as we discussed before? I still would like @pcanal to comment on the general direction, esp that we know we have a single use case of this code in Eve, which is the constant `9` ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:40,energy efficiency,reduc,reducing,40,"@Teemperor, did you mean updating it by reducing the scope of the fix as we discussed before? I still would like @pcanal to comment on the general direction, esp that we know we have a single use case of this code in Eve, which is the constant `9` ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:25,safety,updat,updating,25,"@Teemperor, did you mean updating it by reducing the scope of the fix as we discussed before? I still would like @pcanal to comment on the general direction, esp that we know we have a single use case of this code in Eve, which is the constant `9` ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:25,security,updat,updating,25,"@Teemperor, did you mean updating it by reducing the scope of the fix as we discussed before? I still would like @pcanal to comment on the general direction, esp that we know we have a single use case of this code in Eve, which is the constant `9` ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:86,safety,avoid,avoid,86,"> So let's just use atol instead here if. the argument is just a number, which should avoid the issue with. the generated code. Yes, checking 'early' that the string is just a number is a good idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:25,availability,failur,failure,25,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:227,availability,state,state,227,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:25,deployability,fail,failure,25,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:52,deployability,version,version,52,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:196,energy efficiency,green,green,196,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:219,energy efficiency,current,current,219,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:52,integrability,version,version,52,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:227,integrability,state,state,227,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:52,modifiability,version,version,52,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:25,performance,failur,failure,25,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:25,reliability,fail,failure,25,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:84,safety,review,reviewed,84,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:18,testability,assert,assert,18,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:84,testability,review,reviewed,84,"@Axel-Naumann the assert failure was for a previous version of this PR, the one you reviewed already had the fix :). I think I addressed all comments in the newest revision, let's see if we get a green Jenkins with the current state of the master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:33,interoperability,format,formating,33,@Axel-Naumann Yes (pending clang-formating).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/807:20,interoperability,format,formatted,20,"Back from vacation, formatted the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/807
https://github.com/root-project/root/pull/811:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/811
https://github.com/root-project/root/pull/812:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/812
https://github.com/root-project/root/pull/817:80,energy efficiency,current,current,80,It looks like you need to rebase this branch since there are conflicts with the current master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:61,interoperability,conflict,conflicts,61,It looks like you need to rebase this branch since there are conflicts with the current master.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:84,interoperability,conflict,conflicts,84,"Hi Akshay,. merge commits is not allowed, you need to do a rebase and may solve the conflicts.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:80,safety,review,reviewed,80,"@IlievskiV, it is not realistic for this 13K lines modifications to be properly reviewed. Could you split this into smaller atomic PRs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:51,security,modif,modifications,51,"@IlievskiV, it is not realistic for this 13K lines modifications to be properly reviewed. Could you split this into smaller atomic PRs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:80,testability,review,reviewed,80,"@IlievskiV, it is not realistic for this 13K lines modifications to be properly reviewed. Could you split this into smaller atomic PRs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:54,interoperability,conflict,conflicts,54,"Hi, @IlievskiV, @sshekh. Could you rebase and resolve conflicts? I'm assigning this PR to @lmoneta too to see if we can move it forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:17,security,ssh,sshekh,17,"Hi, @IlievskiV, @sshekh. Could you rebase and resolve conflicts? I'm assigning this PR to @lmoneta too to see if we can move it forward.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:23,availability,error,errors,23,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:182,availability,error,error,182,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:311,availability,error,error,311,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:446,availability,error,error,446,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:855,availability,error,error,855,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:927,availability,Down,Downsample,927,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1268,availability,error,error,1268,"ude/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1447,availability,error,error,1447,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1557,availability,error,error,1557,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1716,availability,error,error,1716,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:2405,availability,error,error,2405,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:155,interoperability,Architectur,Architectures,155,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:284,interoperability,Architectur,Architectures,284,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:406,interoperability,Architectur,Architectures,406,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:468,interoperability,incompatib,incompatible,468,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:727,interoperability,Architectur,Architectures,727,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:815,interoperability,Architectur,Architectures,815,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:877,interoperability,incompatib,incompatible,877,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1140,interoperability,Architectur,Architectures,1140,"MVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1228,interoperability,Architectur,Architectures,1228,"m/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1354,interoperability,Architectur,Architectures,1354,"atam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Arch",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1509,interoperability,Architectur,Architectures,1509,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1668,interoperability,Architectur,Architectures,1668,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1738,interoperability,incompatib,incompatible,1738,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:2270,interoperability,Architectur,Architectures,2270,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:2357,interoperability,Architectur,Architectures,2357,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:23,performance,error,errors,23,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:182,performance,error,error,182,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:311,performance,error,error,311,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:446,performance,error,error,446,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:855,performance,error,error,855,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1268,performance,error,error,1268,"ude/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1447,performance,error,error,1447,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1557,performance,error,error,1557,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1716,performance,error,error,1716,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:2405,performance,error,error,2405,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:23,safety,error,errors,23,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:182,safety,error,error,182,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:311,safety,error,error,311,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:446,safety,error,error,446,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:855,safety,error,error,855,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1268,safety,error,error,1268,"ude/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1447,safety,error,error,1447,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1557,safety,error,error,1557,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1716,safety,error,error,1716,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:2405,safety,error,error,2405,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:189,security,ident,identifier,189,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:318,security,ident,identifier,318,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:23,usability,error,errors,23,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:65,usability,support,support,65,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:182,usability,error,error,182,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:311,usability,error,error,311,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:446,usability,error,error,446,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:855,usability,error,error,855,"Hi Guys,. I am getting errors in this branch compiling with cuda support, I am using cuda 8. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1268,usability,error,error,1268,"ude/TMVA/DNN/Architectures/Cuda.h(396): error: identifier ""AReal"" is undefined. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1447,usability,error,error,1447,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1557,usability,error,error,1557,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:1716,usability,error,error,1716,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/817:2405,usability,error,error,2405,"n.cu(143): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Im2col(TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, size_t, size_t, size_t, size_t, size_t, size_t, size_t, size_t)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(287): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(254): error: declaration is incompatible with ""void TMVA::DNN::TCuda<AFloat>::Downsample(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, int, int, int, int, int, int)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(357): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(267): error: expected a declaration. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/Propagation.cu(333): warning: parsing restarts here after previous syntax error. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: ""auto"" function requires a trailing return type. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(29): error: declaration is incompatible with ""TMVA::DNN::TCuda<AFloat>::Matrix_t &TMVA::DNN::TCuda<AFloat>::RecurrentLayerBackward(TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, const TMVA::DNN::TCudaMatrix<AFloat> &, TMVA::DNN::TCudaMatrix<AFloat> &)"". /home/ozapatam/Projects/GSoC/rootdnn/compile/include/TMVA/DNN/Architectures/Cuda.h(92): here. /home/ozapatam/Projects/GSoC/rootdnn/tmva/tmva/src/DNN/Architectures/Cuda/RecurrentPropagation.cu(39): error: expected a declaration.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/817
https://github.com/root-project/root/pull/819:126,deployability,build,buildid,126,"While you're looking at it, @linev could you fix the warnings reported there:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=379054. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=379157",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:189,deployability,build,buildid,189,"While you're looking at it, @linev could you fix the warnings reported there:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=379054. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=379157",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:80,deployability,build,builds,80,"Well, all I can say is that this causes a warning, and it's the only one in our builds which is not green...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:100,energy efficiency,green,green,100,"Well, all I can say is that this causes a warning, and it's the only one in our builds which is not green...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:172,safety,avoid,avoid,172,"Hi Oliver,. There is ""false-positive"" warning in CentOS (see our discussion before). It is about pointer arithmetic with `const char*`. I will change code in the future to avoid it. Regards,. Sergey",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:34,energy efficiency,green,green,34,So what should I do ? I wait your green light to commit,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:163,deployability,build,build,163,> OK I wait you next bunch of commits later today to merge it. You do not understand. I will create separate pull request. It is about usage of OpenUI5 library to build canvas interface. And in that new PR I will add few modifications in CanvasPainter.cxx to solve warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:176,integrability,interfac,interface,176,> OK I wait you next bunch of commits later today to merge it. You do not understand. I will create separate pull request. It is about usage of OpenUI5 library to build canvas interface. And in that new PR I will add few modifications in CanvasPainter.cxx to solve warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:176,interoperability,interfac,interface,176,> OK I wait you next bunch of commits later today to merge it. You do not understand. I will create separate pull request. It is about usage of OpenUI5 library to build canvas interface. And in that new PR I will add few modifications in CanvasPainter.cxx to solve warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:176,modifiability,interfac,interface,176,> OK I wait you next bunch of commits later today to merge it. You do not understand. I will create separate pull request. It is about usage of OpenUI5 library to build canvas interface. And in that new PR I will add few modifications in CanvasPainter.cxx to solve warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:221,security,modif,modifications,221,> OK I wait you next bunch of commits later today to merge it. You do not understand. I will create separate pull request. It is about usage of OpenUI5 library to build canvas interface. And in that new PR I will add few modifications in CanvasPainter.cxx to solve warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/819:74,testability,understand,understand,74,> OK I wait you next bunch of commits later today to merge it. You do not understand. I will create separate pull request. It is about usage of OpenUI5 library to build canvas interface. And in that new PR I will add few modifications in CanvasPainter.cxx to solve warnings.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/819
https://github.com/root-project/root/pull/823:12,deployability,updat,update,12,Can we also update the release procedure to include a reminder to change this file? (assuming it is not already in the release procedure). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:23,deployability,releas,release,23,Can we also update the release procedure to include a reminder to change this file? (assuming it is not already in the release procedure). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:119,deployability,releas,release,119,Can we also update the release procedure to include a reminder to change this file? (assuming it is not already in the release procedure). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:12,safety,updat,update,12,Can we also update the release procedure to include a reminder to change this file? (assuming it is not already in the release procedure). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:12,security,updat,update,12,Can we also update the release procedure to include a reminder to change this file? (assuming it is not already in the release procedure). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:103,deployability,updat,update,103,"Hi,. On Mon, Jul 31, 2017 at 4:13 PM, Philippe Canal <notifications@github.com>. wrote:. > Can we also update the release procedure to include a reminder to change. > this file? (assuming it is not already in the release procedure). Thanks. >. I support this motion :) but it seems I don't have permissions to edit the. website anymore. Cheers,. Enrico. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/823#issuecomment-319079154>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-iod2uLRWBFuZjUyomtd2VZLoYdNks5sTeEVgaJpZM4OoD3E>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:114,deployability,releas,release,114,"Hi,. On Mon, Jul 31, 2017 at 4:13 PM, Philippe Canal <notifications@github.com>. wrote:. > Can we also update the release procedure to include a reminder to change. > this file? (assuming it is not already in the release procedure). Thanks. >. I support this motion :) but it seems I don't have permissions to edit the. website anymore. Cheers,. Enrico. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/823#issuecomment-319079154>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-iod2uLRWBFuZjUyomtd2VZLoYdNks5sTeEVgaJpZM4OoD3E>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:213,deployability,releas,release,213,"Hi,. On Mon, Jul 31, 2017 at 4:13 PM, Philippe Canal <notifications@github.com>. wrote:. > Can we also update the release procedure to include a reminder to change. > this file? (assuming it is not already in the release procedure). Thanks. >. I support this motion :) but it seems I don't have permissions to edit the. website anymore. Cheers,. Enrico. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/823#issuecomment-319079154>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-iod2uLRWBFuZjUyomtd2VZLoYdNks5sTeEVgaJpZM4OoD3E>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:103,safety,updat,update,103,"Hi,. On Mon, Jul 31, 2017 at 4:13 PM, Philippe Canal <notifications@github.com>. wrote:. > Can we also update the release procedure to include a reminder to change. > this file? (assuming it is not already in the release procedure). Thanks. >. I support this motion :) but it seems I don't have permissions to edit the. website anymore. Cheers,. Enrico. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/823#issuecomment-319079154>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-iod2uLRWBFuZjUyomtd2VZLoYdNks5sTeEVgaJpZM4OoD3E>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:295,safety,permiss,permissions,295,"Hi,. On Mon, Jul 31, 2017 at 4:13 PM, Philippe Canal <notifications@github.com>. wrote:. > Can we also update the release procedure to include a reminder to change. > this file? (assuming it is not already in the release procedure). Thanks. >. I support this motion :) but it seems I don't have permissions to edit the. website anymore. Cheers,. Enrico. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/823#issuecomment-319079154>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-iod2uLRWBFuZjUyomtd2VZLoYdNks5sTeEVgaJpZM4OoD3E>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:103,security,updat,update,103,"Hi,. On Mon, Jul 31, 2017 at 4:13 PM, Philippe Canal <notifications@github.com>. wrote:. > Can we also update the release procedure to include a reminder to change. > this file? (assuming it is not already in the release procedure). Thanks. >. I support this motion :) but it seems I don't have permissions to edit the. website anymore. Cheers,. Enrico. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/823#issuecomment-319079154>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-iod2uLRWBFuZjUyomtd2VZLoYdNks5sTeEVgaJpZM4OoD3E>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:608,security,auth,auth,608,"Hi,. On Mon, Jul 31, 2017 at 4:13 PM, Philippe Canal <notifications@github.com>. wrote:. > Can we also update the release procedure to include a reminder to change. > this file? (assuming it is not already in the release procedure). Thanks. >. I support this motion :) but it seems I don't have permissions to edit the. website anymore. Cheers,. Enrico. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/823#issuecomment-319079154>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-iod2uLRWBFuZjUyomtd2VZLoYdNks5sTeEVgaJpZM4OoD3E>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/823:246,usability,support,support,246,"Hi,. On Mon, Jul 31, 2017 at 4:13 PM, Philippe Canal <notifications@github.com>. wrote:. > Can we also update the release procedure to include a reminder to change. > this file? (assuming it is not already in the release procedure). Thanks. >. I support this motion :) but it seems I don't have permissions to edit the. website anymore. Cheers,. Enrico. > —. > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/823#issuecomment-319079154>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AKfU-iod2uLRWBFuZjUyomtd2VZLoYdNks5sTeEVgaJpZM4OoD3E>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/823
https://github.com/root-project/root/pull/824:44,availability,failur,failure,44,"@xvallspl I guess we need to understand the failure in `TFormula` before merging, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/824
https://github.com/root-project/root/pull/824:44,deployability,fail,failure,44,"@xvallspl I guess we need to understand the failure in `TFormula` before merging, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/824
https://github.com/root-project/root/pull/824:44,performance,failur,failure,44,"@xvallspl I guess we need to understand the failure in `TFormula` before merging, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/824
https://github.com/root-project/root/pull/824:44,reliability,fail,failure,44,"@xvallspl I guess we need to understand the failure in `TFormula` before merging, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/824
https://github.com/root-project/root/pull/824:29,testability,understand,understand,29,"@xvallspl I guess we need to understand the failure in `TFormula` before merging, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/824
https://github.com/root-project/root/pull/825:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/825
https://github.com/root-project/root/pull/825:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/825
https://github.com/root-project/root/pull/825:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/825
https://github.com/root-project/root/pull/826:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/826
https://github.com/root-project/root/pull/826:25,interoperability,format,format,25,Cannot comply with clang-format because of markdown/doxygen requirements.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/826
https://github.com/root-project/root/pull/826:7,safety,compl,comply,7,Cannot comply with clang-format because of markdown/doxygen requirements.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/826
https://github.com/root-project/root/pull/826:7,security,compl,comply,7,Cannot comply with clang-format because of markdown/doxygen requirements.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/826
https://github.com/root-project/root/pull/826:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/826
https://github.com/root-project/root/pull/826:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/826
https://github.com/root-project/root/pull/827:19,safety,test,tests,19,Passed the regular tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/827
https://github.com/root-project/root/pull/827:19,testability,test,tests,19,Passed the regular tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/827
https://github.com/root-project/root/pull/827:11,deployability,build,build,11,"@phsft-bot build on centos7/gcc49, mac1012/native, slc6/gcc49, slc6/gcc62, ubuntu14/native with flags -Dvc=ON -Dimt=ON -Dccache=ON -Dbuiltin_vc=ON -Dbuiltin_veccore=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/827
https://github.com/root-project/root/pull/827:10,deployability,fail,failing,10,300+ test failing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/827
https://github.com/root-project/root/pull/827:10,reliability,fail,failing,10,300+ test failing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/827
https://github.com/root-project/root/pull/827:5,safety,test,test,5,300+ test failing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/827
https://github.com/root-project/root/pull/827:5,testability,test,test,5,300+ test failing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/827
https://github.com/root-project/root/pull/827:41,deployability,build,build,41,"Reworded a commit, should not affect the build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/827
https://github.com/root-project/root/pull/828:107,deployability,API,API,107,This PR is expected to break `root-multicore-tthrobj_ttreeview_regression` due to changes in `TTreeView`'s API. The issue will be addressed by a PR in `root-project/roottest`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:107,integrability,API,API,107,This PR is expected to break `root-multicore-tthrobj_ttreeview_regression` due to changes in `TTreeView`'s API. The issue will be addressed by a PR in `root-project/roottest`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:107,interoperability,API,API,107,This PR is expected to break `root-multicore-tthrobj_ttreeview_regression` due to changes in `TTreeView`'s API. The issue will be addressed by a PR in `root-project/roottest`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:69,performance,parallel,parallelism,69,"Hi @bluehood ,. just to double check: in order to enable full nested parallelism we need also to have task safe processing index assigning, right? Because I am working on it. I will have an implementation soon :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:107,safety,safe,safe,107,"Hi @bluehood ,. just to double check: in order to enable full nested parallelism we need also to have task safe processing index assigning, right? Because I am working on it. I will have an implementation soon :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:258,performance,parallel,parallelism,258,"@dpiparo yes, this PR fixes TTreeView, but yours is still needed to fix TDataFrame. By the way, the ""needs testing"" label is a reminder that this PR (as well as yours) must be tested against ROOT master with 32bc00006f reverted (the commit that keeps nested parallelism from happening).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:107,safety,test,testing,107,"@dpiparo yes, this PR fixes TTreeView, but yours is still needed to fix TDataFrame. By the way, the ""needs testing"" label is a reminder that this PR (as well as yours) must be tested against ROOT master with 32bc00006f reverted (the commit that keeps nested parallelism from happening).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:176,safety,test,tested,176,"@dpiparo yes, this PR fixes TTreeView, but yours is still needed to fix TDataFrame. By the way, the ""needs testing"" label is a reminder that this PR (as well as yours) must be tested against ROOT master with 32bc00006f reverted (the commit that keeps nested parallelism from happening).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:107,testability,test,testing,107,"@dpiparo yes, this PR fixes TTreeView, but yours is still needed to fix TDataFrame. By the way, the ""needs testing"" label is a reminder that this PR (as well as yours) must be tested against ROOT master with 32bc00006f reverted (the commit that keeps nested parallelism from happening).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:176,testability,test,tested,176,"@dpiparo yes, this PR fixes TTreeView, but yours is still needed to fix TDataFrame. By the way, the ""needs testing"" label is a reminder that this PR (as well as yours) must be tested against ROOT master with 32bc00006f reverted (the commit that keeps nested parallelism from happening).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:69,deployability,integr,integrate,69,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:69,integrability,integr,integrate,69,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:69,interoperability,integr,integrate,69,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:69,modifiability,integr,integrate,69,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:69,reliability,integr,integrate,69,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:151,safety,test,test,151,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:69,security,integr,integrate,69,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:69,testability,integr,integrate,69,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:151,testability,test,test,151,"Hi @bluehood,. great. Once we are happy with both implementations we integrate them in the code base. Then we can revamp your reproducer and make it a test (if test_snapshotNfiles is not more or less the same thing).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:136,availability,down,down,136,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:533,deployability,stack,stacktraces,533,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:279,integrability,filter,filter,279,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:545,interoperability,distribut,distributed,545,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:306,safety,test,testing,306,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:306,testability,test,testing,306,"@dpiparo I would say test_snapshotNFiles is pretty much the same as the reproducer: the best I could come up with (basically a stripped down test_snapshotNfiles with more workers and more files) can be found at the jira issue [here](https://sft.its.cern.ch/jira/browse/ROOT-8918?filter=12774). If need be, testing of the two fixes can happen independently, e.g. if this PR fixes the TTreeView issue, we should only see crashes due to `TSlotStack::Push` and `Pop` and no crashes due to `TTree::AddClone` and `SetEntryBase` (the three stacktraces distributed themselves quite evenly during debugging) when 32bc000 is reverted.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:407,availability,avail,available,407,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:640,availability,restor,restored,640,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:173,deployability,fail,failing,173,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:173,reliability,fail,failing,173,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:407,reliability,availab,available,407,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:640,reliability,restor,restored,640,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:407,safety,avail,available,407,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:407,security,availab,available,407,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:24,testability,understand,understand,24,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:671,usability,Help,Helped,671,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:688,usability,help,help,688,"@pcanal I am not sure I understand the first question, `fTreeName` should always be the name of a TTree. Regarding the python issue, as you see `python_ttree_ttree` started failing. The original code had this comment in the header - I don't know more than this:. ```. // We cannot use here the template method (TFile::GetObject) because the header will finish . // in the PCH and the specialization will be available. PyROOT will not be able to specialize . // the method for types other that TTree. . ```. I can reinstate the comment if you wish, but it definitely looks like `TFile::GetObject` cannot be used in this header file. EDIT: I restored the original comment. Helped me, might help others in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:150,deployability,contain,contain,150,"> @pcanal I am not sure I understand the first question, fTreeName should always be the name of a TTree. One or more of the file could be 'wrong' and contain an histogram that has the same name as the TTree in the other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:26,testability,understand,understand,26,"> @pcanal I am not sure I understand the first question, fTreeName should always be the name of a TTree. One or more of the file could be 'wrong' and contain an histogram that has the same name as the TTree in the other files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:10,availability,restor,restored,10,"> EDIT: I restored the original comment. Helped me, might help others in the future. Yes, it is essential to explain why we are not using the normal interface. > but it definitely looks like TFile::GetObject cannot be used in this header file. Well in this case use GetObjectChecked(const char *namecycle, const TClass* cl);.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:149,integrability,interfac,interface,149,"> EDIT: I restored the original comment. Helped me, might help others in the future. Yes, it is essential to explain why we are not using the normal interface. > but it definitely looks like TFile::GetObject cannot be used in this header file. Well in this case use GetObjectChecked(const char *namecycle, const TClass* cl);.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:149,interoperability,interfac,interface,149,"> EDIT: I restored the original comment. Helped me, might help others in the future. Yes, it is essential to explain why we are not using the normal interface. > but it definitely looks like TFile::GetObject cannot be used in this header file. Well in this case use GetObjectChecked(const char *namecycle, const TClass* cl);.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:149,modifiability,interfac,interface,149,"> EDIT: I restored the original comment. Helped me, might help others in the future. Yes, it is essential to explain why we are not using the normal interface. > but it definitely looks like TFile::GetObject cannot be used in this header file. Well in this case use GetObjectChecked(const char *namecycle, const TClass* cl);.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:10,reliability,restor,restored,10,"> EDIT: I restored the original comment. Helped me, might help others in the future. Yes, it is essential to explain why we are not using the normal interface. > but it definitely looks like TFile::GetObject cannot be used in this header file. Well in this case use GetObjectChecked(const char *namecycle, const TClass* cl);.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:41,usability,Help,Helped,41,"> EDIT: I restored the original comment. Helped me, might help others in the future. Yes, it is essential to explain why we are not using the normal interface. > but it definitely looks like TFile::GetObject cannot be used in this header file. Well in this case use GetObjectChecked(const char *namecycle, const TClass* cl);.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:58,usability,help,help,58,"> EDIT: I restored the original comment. Helped me, might help others in the future. Yes, it is essential to explain why we are not using the normal interface. > but it definitely looks like TFile::GetObject cannot be used in this header file. Well in this case use GetObjectChecked(const char *namecycle, const TClass* cl);.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:174,deployability,contain,contain,174,"Thanks Philippe, I did not know about `GetObjectChecked`. I'll change the last commit to use it tomorrow. Regarding proper checking that all files passed to TTreeProcessorMT contain a TTree with the same name, it is beyond the scope of this PR to add it (I believe the best place for such checks would be TTreeProcessorMT's constructors, which I did not touch) - maybe @etejedor can comment on it further.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:275,availability,operat,operation,275,"> it is beyond the scope of this PR to add it. Fair enough (and indeed it seems to be missing in a few places). > I believe the best place for such checks would be TTreeProcessorMT's constructors, which I did not touch. That is unlikely. Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:449,deployability,scale,scales,449,"> it is beyond the scope of this PR to add it. Fair enough (and indeed it seems to be missing in a few places). > I believe the best place for such checks would be TTreeProcessorMT's constructors, which I did not touch. That is unlikely. Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:449,energy efficiency,scale,scales,449,"> it is beyond the scope of this PR to add it. Fair enough (and indeed it seems to be missing in a few places). > I believe the best place for such checks would be TTreeProcessorMT's constructors, which I did not touch. That is unlikely. Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:449,modifiability,scal,scales,449,"> it is beyond the scope of this PR to add it. Fair enough (and indeed it seems to be missing in a few places). > I believe the best place for such checks would be TTreeProcessorMT's constructors, which I did not touch. That is unlikely. Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:449,performance,scale,scales,449,"> it is beyond the scope of this PR to add it. Fair enough (and indeed it seems to be missing in a few places). > I believe the best place for such checks would be TTreeProcessorMT's constructors, which I did not touch. That is unlikely. Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:440,reliability,doe,does,440,"> it is beyond the scope of this PR to add it. Fair enough (and indeed it seems to be missing in a few places). > I believe the best place for such checks would be TTreeProcessorMT's constructors, which I did not touch. That is unlikely. Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:39,availability,operat,operation,39,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:345,availability,cluster,cluster,345,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:213,deployability,scale,scales,213,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:345,deployability,cluster,cluster,345,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:213,energy efficiency,scale,scales,213,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:266,energy efficiency,Current,Currently,266,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:408,energy efficiency,optim,optimize,408,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:213,modifiability,scal,scales,213,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:213,performance,scale,scales,213,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:408,performance,optimiz,optimize,408,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:204,reliability,doe,does,204,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:293,reliability,doe,does,293,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:324,safety,input,input,324,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/828:324,usability,input,input,324,> Opening the file can be an expensive operation (especially if it is a remote file) so you only want to do it once (per file) and keeping around opened files (that you are not using 'right' this moment) does not scales (think of running over more than 1000 files). Currently TTreeProcessorMT does a pre-emptive pass of all input files to check cluster boundaries. I agree this is something we might want to optimize and if I am not mistaken @etejedor 's future work might go in that direction.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/828
https://github.com/root-project/root/pull/829:155,energy efficiency,draw,drawables,155,"I add ""QUIT"" and ""INTERRUPT"" commands. Code with gROOT->ProcessLine() is removed. But in the future we can not avoid usage of interpreter for execution of drawables methods.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/829
https://github.com/root-project/root/pull/829:111,safety,avoid,avoid,111,"I add ""QUIT"" and ""INTERRUPT"" commands. Code with gROOT->ProcessLine() is removed. But in the future we can not avoid usage of interpreter for execution of drawables methods.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/829
https://github.com/root-project/root/pull/829:29,usability,command,commands,29,"I add ""QUIT"" and ""INTERRUPT"" commands. Code with gROOT->ProcessLine() is removed. But in the future we can not avoid usage of interpreter for execution of drawables methods.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/829
https://github.com/root-project/root/pull/830:11,deployability,build,build,11,@phsft-bot build also on mac1012/native with flags -Dbuiltin_veccore=ON -Dbuiltin_vc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:11,deployability,build,build,11,@phsft-bot build also on mac1012/native with flags -Dbuiltin_veccore=ON -Dbuiltin_vc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:11,deployability,build,build,11,@phsft-bot build on ubuntu16/native with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:11,deployability,build,build,11,@phsft-bot build on ubuntu14/native with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:113,deployability,depend,dependency,113,"@pcanal What do you think would be the right place to include VecCore in ROOT? I want to avoid injecting it as a dependency when it's not needed, but that seems to cause problems with the PCH on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:95,integrability,inject,injecting,95,"@pcanal What do you think would be the right place to include VecCore in ROOT? I want to avoid injecting it as a dependency when it's not needed, but that seems to cause problems with the PCH on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:113,integrability,depend,dependency,113,"@pcanal What do you think would be the right place to include VecCore in ROOT? I want to avoid injecting it as a dependency when it's not needed, but that seems to cause problems with the PCH on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:113,modifiability,depend,dependency,113,"@pcanal What do you think would be the right place to include VecCore in ROOT? I want to avoid injecting it as a dependency when it's not needed, but that seems to cause problems with the PCH on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:89,safety,avoid,avoid,89,"@pcanal What do you think would be the right place to include VecCore in ROOT? I want to avoid injecting it as a dependency when it's not needed, but that seems to cause problems with the PCH on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:113,safety,depend,dependency,113,"@pcanal What do you think would be the right place to include VecCore in ROOT? I want to avoid injecting it as a dependency when it's not needed, but that seems to cause problems with the PCH on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:95,security,inject,injecting,95,"@pcanal What do you think would be the right place to include VecCore in ROOT? I want to avoid injecting it as a dependency when it's not needed, but that seems to cause problems with the PCH on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:113,testability,depend,dependency,113,"@pcanal What do you think would be the right place to include VecCore in ROOT? I want to avoid injecting it as a dependency when it's not needed, but that seems to cause problems with the PCH on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:11,deployability,build,build,11,"@phsft-bot build also on centos7/gcc49, mac1012/native, slc6/gcc62 with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:28,deployability,instal,installed,28,"Both Vc and VecCore are now installed into `${CMAKE_BINARY_DIR}/externals` with `${CMAKE_PREFIX_INSTALL}` appended (unfortunately necessary to make Vc work at the end, since Vc is not relocatable). This PR needs https://github.com/root-project/roottest/pull/65 to be merged for tests to pass (that PR properly propagates the new necessary include directories when running tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:278,safety,test,tests,278,"Both Vc and VecCore are now installed into `${CMAKE_BINARY_DIR}/externals` with `${CMAKE_PREFIX_INSTALL}` appended (unfortunately necessary to make Vc work at the end, since Vc is not relocatable). This PR needs https://github.com/root-project/roottest/pull/65 to be merged for tests to pass (that PR properly propagates the new necessary include directories when running tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:372,safety,test,tests,372,"Both Vc and VecCore are now installed into `${CMAKE_BINARY_DIR}/externals` with `${CMAKE_PREFIX_INSTALL}` appended (unfortunately necessary to make Vc work at the end, since Vc is not relocatable). This PR needs https://github.com/root-project/roottest/pull/65 to be merged for tests to pass (that PR properly propagates the new necessary include directories when running tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:278,testability,test,tests,278,"Both Vc and VecCore are now installed into `${CMAKE_BINARY_DIR}/externals` with `${CMAKE_PREFIX_INSTALL}` appended (unfortunately necessary to make Vc work at the end, since Vc is not relocatable). This PR needs https://github.com/root-project/roottest/pull/65 to be merged for tests to pass (that PR properly propagates the new necessary include directories when running tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:372,testability,test,tests,372,"Both Vc and VecCore are now installed into `${CMAKE_BINARY_DIR}/externals` with `${CMAKE_PREFIX_INSTALL}` appended (unfortunately necessary to make Vc work at the end, since Vc is not relocatable). This PR needs https://github.com/root-project/roottest/pull/65 to be merged for tests to pass (that PR properly propagates the new necessary include directories when running tests).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:62,deployability,build,build,62,Will close this PR and open a new one. I think that the dirty build directories are interfering with testing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:101,safety,test,testing,101,Will close this PR and open a new one. I think that the dirty build directories are interfering with testing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:101,testability,test,testing,101,Will close this PR and open a new one. I think that the dirty build directories are interfering with testing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/830:5,usability,close,close,5,Will close this PR and open a new one. I think that the dirty build directories are interfering with testing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/830
https://github.com/root-project/root/pull/831:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:16,availability,error,errors,16,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:45,deployability,updat,update,45,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:16,performance,error,errors,16,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:16,safety,error,errors,16,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:45,safety,updat,update,45,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:59,safety,test,test,59,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:45,security,updat,update,45,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:59,testability,test,test,59,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:16,usability,error,errors,16,There are a few errors left. Do they need an update of the test (and/or reference file) or a fix in rootlcing/genreflex?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:70,availability,error,errors,70,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:36,deployability,fail,fail,36,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:70,performance,error,errors,70,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:36,reliability,fail,fail,36,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:70,safety,error,errors,70,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:70,usability,error,errors,70,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:93,usability,behavi,behavior,93,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:106,usability,user,users,106,"As discussed with Axel, we now only fail with a non-zero exit code on errors to keep the old behavior for users. If we introduce warnings in root (outside roottest), Jenkins should still pickup the warning, so this keeps the desired effect that we see if people do suspicious things in ROOT itself.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:128,interoperability,xml,xml,128,"Hi Raphael,. for me the PR is good to go. Could you fix the selection files in roottest too? You can authoritatively change the xml field from name to pattern. For the test it's the same, the important thing there is to be able to parse.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:168,safety,test,test,168,"Hi Raphael,. for me the PR is good to go. Could you fix the selection files in roottest too? You can authoritatively change the xml field from name to pattern. For the test it's the same, the important thing there is to be able to parse.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:101,security,auth,authoritatively,101,"Hi Raphael,. for me the PR is good to go. Could you fix the selection files in roottest too? You can authoritatively change the xml field from name to pattern. For the test it's the same, the important thing there is to be able to parse.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:168,testability,test,test,168,"Hi Raphael,. for me the PR is good to go. Could you fix the selection files in roottest too? You can authoritatively change the xml field from name to pattern. For the test it's the same, the important thing there is to be able to parse.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:29,deployability,fail,fail,29,"Another point. We should not fail on warnings unless the user says so, which we do if the user specifies --fail_on_warnings in genreflex.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:95,interoperability,specif,specifies,95,"Another point. We should not fail on warnings unless the user says so, which we do if the user specifies --fail_on_warnings in genreflex.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:29,reliability,fail,fail,29,"Another point. We should not fail on warnings unless the user says so, which we do if the user specifies --fail_on_warnings in genreflex.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:57,usability,user,user,57,"Another point. We should not fail on warnings unless the user says so, which we do if the user specifies --fail_on_warnings in genreflex.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:90,usability,user,user,90,"Another point. We should not fail on warnings unless the user says so, which we do if the user specifies --fail_on_warnings in genreflex.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:11,availability,ping,ping,11,@Teemperor ping...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:4,deployability,fail,failing,4,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:130,deployability,fail,fail-on-warning,130,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:4,reliability,fail,failing,4,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:130,reliability,fail,fail-on-warning,130,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:12,safety,test,tests,12,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:46,safety,test,test,46,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:76,safety,test,test,76,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:12,testability,test,tests,12,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:46,testability,test,test,46,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:76,testability,test,test,76,The failing tests are all broken because they test the wrong return code or test unintended side effects (such as that turning on fail-on-warning suddenly enables full-blown verbose mode in RScanner due to some funny side effects with `kThrowOnWarning`). I fixed all of them in this roottest PR: https://github.com/root-project/roottest/pull/71,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/831:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/831
https://github.com/root-project/root/pull/832:60,deployability,patch,patch,60,We will sadly loose this hypnotizing piece of art with this patch: https://teemperor.de/pub/rootio_errors.png,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/832:88,integrability,pub,pub,88,We will sadly loose this hypnotizing piece of art with this patch: https://teemperor.de/pub/rootio_errors.png,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/832:60,safety,patch,patch,60,We will sadly loose this hypnotizing piece of art with this patch: https://teemperor.de/pub/rootio_errors.png,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/832:60,security,patch,patch,60,We will sadly loose this hypnotizing piece of art with this patch: https://teemperor.de/pub/rootio_errors.png,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/832:40,interoperability,format,format,40,"@Teemperor, could you address the clang-format complaint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/832:47,safety,compl,complaint,47,"@Teemperor, could you address the clang-format complaint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/832:47,security,compl,complaint,47,"@Teemperor, could you address the clang-format complaint?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/832:11,availability,ping,ping,11,@Teemperor ping. Please clang-format so we can merge. The change seems sensible afterall.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/832:30,interoperability,format,format,30,@Teemperor ping. Please clang-format so we can merge. The change seems sensible afterall.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/832
https://github.com/root-project/root/pull/834:41,deployability,Depend,Depending,41,"This PR has a small conflict with #835 . Depending on which one is merged first, I'll rebase the other fixing the conflict. P.S. I think travis has gone a bit bonkers with clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/834
https://github.com/root-project/root/pull/834:41,integrability,Depend,Depending,41,"This PR has a small conflict with #835 . Depending on which one is merged first, I'll rebase the other fixing the conflict. P.S. I think travis has gone a bit bonkers with clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/834
https://github.com/root-project/root/pull/834:20,interoperability,conflict,conflict,20,"This PR has a small conflict with #835 . Depending on which one is merged first, I'll rebase the other fixing the conflict. P.S. I think travis has gone a bit bonkers with clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/834
https://github.com/root-project/root/pull/834:114,interoperability,conflict,conflict,114,"This PR has a small conflict with #835 . Depending on which one is merged first, I'll rebase the other fixing the conflict. P.S. I think travis has gone a bit bonkers with clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/834
https://github.com/root-project/root/pull/834:178,interoperability,format,format,178,"This PR has a small conflict with #835 . Depending on which one is merged first, I'll rebase the other fixing the conflict. P.S. I think travis has gone a bit bonkers with clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/834
https://github.com/root-project/root/pull/834:41,modifiability,Depend,Depending,41,"This PR has a small conflict with #835 . Depending on which one is merged first, I'll rebase the other fixing the conflict. P.S. I think travis has gone a bit bonkers with clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/834
https://github.com/root-project/root/pull/834:41,safety,Depend,Depending,41,"This PR has a small conflict with #835 . Depending on which one is merged first, I'll rebase the other fixing the conflict. P.S. I think travis has gone a bit bonkers with clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/834
https://github.com/root-project/root/pull/834:41,testability,Depend,Depending,41,"This PR has a small conflict with #835 . Depending on which one is merged first, I'll rebase the other fixing the conflict. P.S. I think travis has gone a bit bonkers with clang-format.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/834
https://github.com/root-project/root/pull/835:133,deployability,patch,patch,133,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:415,deployability,upgrad,upgrade,415,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:466,deployability,patch,patch,466,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:46,energy efficiency,green,green,46,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:355,interoperability,architectur,architectures,355,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:415,modifiability,upgrad,upgrade,415,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:267,performance,parallel,parallelism,267,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:117,safety,review,reviewed,117,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:133,safety,patch,patch,133,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:466,safety,patch,patch,466,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:133,security,patch,patch,133,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:466,security,patch,patch,466,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:117,testability,review,reviewed,117,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:147,testability,simpl,simple,147,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:147,usability,simpl,simple,147,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:188,usability,close,close,188,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:328,usability,efficien,efficient,328,"Hi @bluehood ,. I'd wait for the master to be green again and then merge. Since the PR is done and #833 and #828 are reviewed and my patch is very simple, I'd go for this ""summary PR"" and close the afore mentioned ones. Great that now we can seamlessly handle nested parallelism with ROOT. This is yet another milestone for the efficient usage of extreme architectures such as KNL. In addition this work allows the upgrade of TTreeProcessorMT with the the ""locality patch"" of @etejedor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:281,availability,failur,failures,281,"@dpiparo I have closed the two PRs that are included in this one and added the default labels instead of ""do not merge"". I will fix the `clang-format` issues and that would make this PR ready for merging on my part (the `roottest_root_multicore_tthrobj_ttreeview_regression_build` failures are expected and are fixed by [PR 63](https://github.com/root-project/roottest/pull/63) in root-project/roottest).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:281,deployability,fail,failures,281,"@dpiparo I have closed the two PRs that are included in this one and added the default labels instead of ""do not merge"". I will fix the `clang-format` issues and that would make this PR ready for merging on my part (the `roottest_root_multicore_tthrobj_ttreeview_regression_build` failures are expected and are fixed by [PR 63](https://github.com/root-project/roottest/pull/63) in root-project/roottest).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:143,interoperability,format,format,143,"@dpiparo I have closed the two PRs that are included in this one and added the default labels instead of ""do not merge"". I will fix the `clang-format` issues and that would make this PR ready for merging on my part (the `roottest_root_multicore_tthrobj_ttreeview_regression_build` failures are expected and are fixed by [PR 63](https://github.com/root-project/roottest/pull/63) in root-project/roottest).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:281,performance,failur,failures,281,"@dpiparo I have closed the two PRs that are included in this one and added the default labels instead of ""do not merge"". I will fix the `clang-format` issues and that would make this PR ready for merging on my part (the `roottest_root_multicore_tthrobj_ttreeview_regression_build` failures are expected and are fixed by [PR 63](https://github.com/root-project/roottest/pull/63) in root-project/roottest).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:281,reliability,fail,failures,281,"@dpiparo I have closed the two PRs that are included in this one and added the default labels instead of ""do not merge"". I will fix the `clang-format` issues and that would make this PR ready for merging on my part (the `roottest_root_multicore_tthrobj_ttreeview_regression_build` failures are expected and are fixed by [PR 63](https://github.com/root-project/roottest/pull/63) in root-project/roottest).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:16,usability,close,closed,16,"@dpiparo I have closed the two PRs that are included in this one and added the default labels instead of ""do not merge"". I will fix the `clang-format` issues and that would make this PR ready for merging on my part (the `roottest_root_multicore_tthrobj_ttreeview_regression_build` failures are expected and are fixed by [PR 63](https://github.com/root-project/roottest/pull/63) in root-project/roottest).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:26,interoperability,format,format,26,@vgvassilev I think clang-format is having some issues (maybe because of the change in ubuntu distro used by travis?): when I run clang-format locally I definitely do not get as many corrections as highlighted by the bot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:136,interoperability,format,format,136,@vgvassilev I think clang-format is having some issues (maybe because of the change in ubuntu distro used by travis?): when I run clang-format locally I definitely do not get as many corrections as highlighted by the bot.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:68,interoperability,format,format,68,"@bluehood, that's weird. I think it is because we have broken clang-format file (according to clang-format-3.9 on the bot). I am thinking to follow up renaming of one of the configs from `SplitEmptyFunctionBody` to `SplitEmptyFunction`. Could you locally do it and let me know if your clang-format would be happy with the shorthand `SplitEmptyFunction`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:100,interoperability,format,format-,100,"@bluehood, that's weird. I think it is because we have broken clang-format file (according to clang-format-3.9 on the bot). I am thinking to follow up renaming of one of the configs from `SplitEmptyFunctionBody` to `SplitEmptyFunction`. Could you locally do it and let me know if your clang-format would be happy with the shorthand `SplitEmptyFunction`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:291,interoperability,format,format,291,"@bluehood, that's weird. I think it is because we have broken clang-format file (according to clang-format-3.9 on the bot). I am thinking to follow up renaming of one of the configs from `SplitEmptyFunctionBody` to `SplitEmptyFunction`. Could you locally do it and let me know if your clang-format would be happy with the shorthand `SplitEmptyFunction`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/835:110,reliability,doe,does,110,"Hi @vgvassilev ,. clang 4.0 (compiled on my machine a few months ago) is not happy with `SplitEmptyFunction` (does not know the keyword).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/835
https://github.com/root-project/root/pull/836:30,availability,failur,failure,30,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:30,deployability,fail,failure,30,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:168,deployability,build,build,168,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:30,performance,failur,failure,30,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:30,reliability,fail,failure,30,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:138,safety,test,testDetails,138,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:154,safety,test,test,154,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:138,testability,test,testDetails,138,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:154,testability,test,test,154,Hi! This is supposed to fix a failure of stressTMVA where the BDTG would get an unacceptable ROC score. (Like [here](http://cdash.cern.ch/testDetails.php?test=27555086&build=380765)),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:24,interoperability,format,format,24,I will ignore the clang format issue considering how small the change is.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/836:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/836
https://github.com/root-project/root/pull/837:41,performance,time,times,41,I have run all dataframe tests dozens of times and the reproducer for nested-parallelism-related issues several hundreds of times. Did not see any problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/837
https://github.com/root-project/root/pull/837:77,performance,parallel,parallelism-related,77,I have run all dataframe tests dozens of times and the reproducer for nested-parallelism-related issues several hundreds of times. Did not see any problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/837
https://github.com/root-project/root/pull/837:124,performance,time,times,124,I have run all dataframe tests dozens of times and the reproducer for nested-parallelism-related issues several hundreds of times. Did not see any problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/837
https://github.com/root-project/root/pull/837:25,safety,test,tests,25,I have run all dataframe tests dozens of times and the reproducer for nested-parallelism-related issues several hundreds of times. Did not see any problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/837
https://github.com/root-project/root/pull/837:25,testability,test,tests,25,I have run all dataframe tests dozens of times and the reproducer for nested-parallelism-related issues several hundreds of times. Did not see any problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/837
https://github.com/root-project/root/pull/838:119,deployability,fail,failing,119,"Hi @simonpf, besides being something good in general (we do not want refs to temporary objects!) is this fixing a test failing in our battery?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/838
https://github.com/root-project/root/pull/838:134,energy efficiency,batter,battery,134,"Hi @simonpf, besides being something good in general (we do not want refs to temporary objects!) is this fixing a test failing in our battery?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/838
https://github.com/root-project/root/pull/838:119,reliability,fail,failing,119,"Hi @simonpf, besides being something good in general (we do not want refs to temporary objects!) is this fixing a test failing in our battery?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/838
https://github.com/root-project/root/pull/838:114,safety,test,test,114,"Hi @simonpf, besides being something good in general (we do not want refs to temporary objects!) is this fixing a test failing in our battery?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/838
https://github.com/root-project/root/pull/838:114,testability,test,test,114,"Hi @simonpf, besides being something good in general (we do not want refs to temporary objects!) is this fixing a test failing in our battery?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/838
https://github.com/root-project/root/pull/838:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/838
https://github.com/root-project/root/pull/838:30,deployability,fail,failing,30,"Yes, @dpiparo, stressTMVA was failing because of this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/838
https://github.com/root-project/root/pull/838:30,reliability,fail,failing,30,"Yes, @dpiparo, stressTMVA was failing because of this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/838
https://github.com/root-project/root/pull/839:91,integrability,sub,submit,91,What about adding some text that says how clang-format and Jenkins works when contributors submit a PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:48,interoperability,format,format,48,What about adding some text that says how clang-format and Jenkins works when contributors submit a PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:109,deployability,build,build-configuration,109,@bbockelm the only thing I can come up with is the how-to for using @phsft-bot: https://github.com/phsft-bot/build-configuration/blob/master/README.md,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:115,integrability,configur,configuration,115,@bbockelm the only thing I can come up with is the how-to for using @phsft-bot: https://github.com/phsft-bot/build-configuration/blob/master/README.md,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:115,modifiability,configur,configuration,115,@bbockelm the only thing I can come up with is the how-to for using @phsft-bot: https://github.com/phsft-bot/build-configuration/blob/master/README.md,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:115,security,configur,configuration,115,@bbockelm the only thing I can come up with is the how-to for using @phsft-bot: https://github.com/phsft-bot/build-configuration/blob/master/README.md,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:26,safety,review,review,26,"It looks like I started a review by accident, those comments were general comments, not a part of a review. Oops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:36,safety,accid,accident,36,"It looks like I started a review by accident, those comments were general comments, not a part of a review. Oops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:100,safety,review,review,100,"It looks like I started a review by accident, those comments were general comments, not a part of a review. Oops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:26,testability,review,review,26,"It looks like I started a review by accident, those comments were general comments, not a part of a review. Oops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:100,testability,review,review,100,"It looks like I started a review by accident, those comments were general comments, not a part of a review. Oops.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:175,modifiability,maintain,maintainers,175,"@martinmine - Since you already started a review, might as well give it an ""approve"" :). @vgvassilev - I added comments about `clang-tidy`; I marked the branch as editable by maintainers if you'd like to play with the text further. Given I can't find any authoritative document on copyright text, I don't want to make one up on the spot here. Let's get this page done -- we can always return to it later!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:42,safety,review,review,42,"@martinmine - Since you already started a review, might as well give it an ""approve"" :). @vgvassilev - I added comments about `clang-tidy`; I marked the branch as editable by maintainers if you'd like to play with the text further. Given I can't find any authoritative document on copyright text, I don't want to make one up on the spot here. Let's get this page done -- we can always return to it later!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:175,safety,maintain,maintainers,175,"@martinmine - Since you already started a review, might as well give it an ""approve"" :). @vgvassilev - I added comments about `clang-tidy`; I marked the branch as editable by maintainers if you'd like to play with the text further. Given I can't find any authoritative document on copyright text, I don't want to make one up on the spot here. Let's get this page done -- we can always return to it later!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:255,security,auth,authoritative,255,"@martinmine - Since you already started a review, might as well give it an ""approve"" :). @vgvassilev - I added comments about `clang-tidy`; I marked the branch as editable by maintainers if you'd like to play with the text further. Given I can't find any authoritative document on copyright text, I don't want to make one up on the spot here. Let's get this page done -- we can always return to it later!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:42,testability,review,review,42,"@martinmine - Since you already started a review, might as well give it an ""approve"" :). @vgvassilev - I added comments about `clang-tidy`; I marked the branch as editable by maintainers if you'd like to play with the text further. Given I can't find any authoritative document on copyright text, I don't want to make one up on the spot here. Let's get this page done -- we can always return to it later!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:269,usability,document,document,269,"@martinmine - Since you already started a review, might as well give it an ""approve"" :). @vgvassilev - I added comments about `clang-tidy`; I marked the branch as editable by maintainers if you'd like to play with the text further. Given I can't find any authoritative document on copyright text, I don't want to make one up on the spot here. Let's get this page done -- we can always return to it later!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:20,deployability,updat,update,20,"We do need still to update the documentation pointed by this contributing file, for example how to create a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:20,safety,updat,update,20,"We do need still to update the documentation pointed by this contributing file, for example how to create a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:20,security,updat,update,20,"We do need still to update the documentation pointed by this contributing file, for example how to create a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/839:31,usability,document,documentation,31,"We do need still to update the documentation pointed by this contributing file, for example how to create a PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/839
https://github.com/root-project/root/pull/840:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:72,safety,review,reviewers,72,"Despite the filename saying ""owners"" - I think of it more as ""suggested reviewers"". You can certainly have something like:. ```. * @dpiparo. ```. and you will show up as a suggested reviewer for all PRs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:182,safety,review,reviewer,182,"Despite the filename saying ""owners"" - I think of it more as ""suggested reviewers"". You can certainly have something like:. ```. * @dpiparo. ```. and you will show up as a suggested reviewer for all PRs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:72,testability,review,reviewers,72,"Despite the filename saying ""owners"" - I think of it more as ""suggested reviewers"". You can certainly have something like:. ```. * @dpiparo. ```. and you will show up as a suggested reviewer for all PRs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:182,testability,review,reviewer,182,"Despite the filename saying ""owners"" - I think of it more as ""suggested reviewers"". You can certainly have something like:. ```. * @dpiparo. ```. and you will show up as a suggested reviewer for all PRs.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:129,safety,review,review,129,"@dpiparo this is a new feature GitHub added last month. Despite the term ""code owners"", it is a way of telling GitHub who should review certain parts of our code base when we receive PRs. Have a look: https://github.com/blog/2392-introducing-code-owners",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:129,testability,review,review,129,"@dpiparo this is a new feature GitHub added last month. Despite the term ""code owners"", it is a way of telling GitHub who should review certain parts of our code base when we receive PRs. Have a look: https://github.com/blog/2392-introducing-code-owners",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:376,deployability,modul,module,376,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:459,energy efficiency,current,currently,459,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:441,integrability,compon,component,441,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:179,interoperability,distribut,distributed,179,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:441,interoperability,compon,component,441,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:211,modifiability,maintain,maintainers,211,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:376,modifiability,modul,module,376,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:441,modifiability,compon,component,441,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:151,safety,review,reviewers,151,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:211,safety,maintain,maintainers,211,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:376,safety,modul,module,376,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:493,safety,review,review,493,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:151,testability,review,reviewers,151,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:493,testability,review,review,493,"@vgvassilev - it's precisely the case outlined in the text of the PR. This provides a programmatic way for GitHub to provide reasonable suggestions of reviewers. ROOT is a really distributed project in terms of maintainers of different pieces. External contributors - particularly, those that contribute infrequently - may not know who owns or is responsible for a particular module. Heck, I don't. For example, if I make a PR against a GUI component, GitHub currently may suggest that Danilo review the PR because he was the last one to edit the file -- even if it was just a whitespace change. This is all about making ROOT a friendlier project for newbies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:7,deployability,updat,updated,7,I have updated the list of 'owners' and would like to see (experimentally) what is the effect of it for assigning PR. Clearly we need to fine tune the list with more fine grain assignments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:142,performance,tune,tune,142,I have updated the list of 'owners' and would like to see (experimentally) what is the effect of it for assigning PR. Clearly we need to fine tune the list with more fine grain assignments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:7,safety,updat,updated,7,I have updated the list of 'owners' and would like to see (experimentally) what is the effect of it for assigning PR. Clearly we need to fine tune the list with more fine grain assignments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:7,security,updat,updated,7,I have updated the list of 'owners' and would like to see (experimentally) what is the effect of it for assigning PR. Clearly we need to fine tune the list with more fine grain assignments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/840:118,usability,Clear,Clearly,118,I have updated the list of 'owners' and would like to see (experimentally) what is the effect of it for assigning PR. Clearly we need to fine tune the list with more fine grain assignments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/840
https://github.com/root-project/root/pull/841:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/841
https://github.com/root-project/root/pull/842:45,availability,failur,failure,45,"@amadio can we merge this, please? The build failure was due to the Vc PCH issue. Or is there a reason to hold this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/842
https://github.com/root-project/root/pull/842:39,deployability,build,build,39,"@amadio can we merge this, please? The build failure was due to the Vc PCH issue. Or is there a reason to hold this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/842
https://github.com/root-project/root/pull/842:45,deployability,fail,failure,45,"@amadio can we merge this, please? The build failure was due to the Vc PCH issue. Or is there a reason to hold this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/842
https://github.com/root-project/root/pull/842:45,performance,failur,failure,45,"@amadio can we merge this, please? The build failure was due to the Vc PCH issue. Or is there a reason to hold this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/842
https://github.com/root-project/root/pull/842:45,reliability,fail,failure,45,"@amadio can we merge this, please? The build failure was due to the Vc PCH issue. Or is there a reason to hold this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/842
https://github.com/root-project/root/pull/842:11,deployability,build,build,11,@phsft-bot build! Just to be sure :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/842
https://github.com/root-project/root/pull/843:137,interoperability,format,format,137,"Thanks for your comments @vgvassilev, I'll address the header order shortly. As a side-note, could this be something we could make clang-format or one of those tools check for?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:160,usability,tool,tools,160,"Thanks for your comments @vgvassilev, I'll address the header order shortly. As a side-note, could this be something we could make clang-format or one of those tools check for?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:106,integrability,sub,submit,106,"@vgvassilev [Yep, there is.](https://clang.llvm.org/extra/clang-tidy/checks/llvm-include-order.html) I'll submit another PR for this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:22,interoperability,conflict,conflict,22,Rebased after a merge conflict,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:102,deployability,modul,modular,102,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:119,deployability,compos,composed,119,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:102,integrability,modular,modular,102,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:102,modifiability,modul,modular,102,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:119,modifiability,compos,composed,119,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:76,safety,test,test,76,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:102,safety,modul,modular,102,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:76,testability,test,test,76,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:102,testability,modula,modular,102,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/843:246,usability,close,close,246,"This is a very nice contribution, but it brings a very small advantage to a test that is already very modular, because composed by very small functions, which can be run all independently and from the ROOT prompt. . I am sorry but I will have to close this PR. . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/843
https://github.com/root-project/root/pull/844:28,usability,behavi,behavior,28,@Axel-Naumann it seems this behavior was on purpose.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/844
https://github.com/root-project/root/pull/845:4,deployability,build,build,4,The build on MacOS fails because of the corrupted PCH. I am going to merge the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/845
https://github.com/root-project/root/pull/845:19,deployability,fail,fails,19,The build on MacOS fails because of the corrupted PCH. I am going to merge the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/845
https://github.com/root-project/root/pull/845:19,reliability,fail,fails,19,The build on MacOS fails because of the corrupted PCH. I am going to merge the PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/845
https://github.com/root-project/root/pull/846:87,interoperability,conflict,conflicts,87,"@arthur-tsang thanks for your contribution, perhaps you want to re-base to resolve the conflicts and we can test your PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/846
https://github.com/root-project/root/pull/846:108,safety,test,test,108,"@arthur-tsang thanks for your contribution, perhaps you want to re-base to resolve the conflicts and we can test your PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/846
https://github.com/root-project/root/pull/846:108,testability,test,test,108,"@arthur-tsang thanks for your contribution, perhaps you want to re-base to resolve the conflicts and we can test your PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/846
https://github.com/root-project/root/pull/846:52,energy efficiency,current,current,52,"> > Ok, I will rebase it this evening. > merge with current master. Note that 'merge commit' to catch up with the master are **not** allowed. Please use rebase instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/846
https://github.com/root-project/root/pull/846:126,performance,time,time,126,@pcanal thanks for the clarification (I've never done a rebase before); I went back and did the merge using `git rebase` this time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/846
https://github.com/root-project/root/pull/846:93,usability,help,help,93,"@arthur-tsang your history seems to be duplicated after rebasing. If you want to, I can come help you out with rebasing. Where is your office?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/846
https://github.com/root-project/root/pull/848:370,performance,memor,memory,370,"Hi @Axel-Naumann, @Teemperor, . congrats, seriously. Perhaps this is a bit academic but maybe we can improve starting from from this fix:. - If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? - Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:377,safety,sanit,sanitiser,377,"Hi @Axel-Naumann, @Teemperor, . congrats, seriously. Perhaps this is a bit academic but maybe we can improve starting from from this fix:. - If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? - Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:377,security,sanit,sanitiser,377,"Hi @Axel-Naumann, @Teemperor, . congrats, seriously. Perhaps this is a bit academic but maybe we can improve starting from from this fix:. - If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? - Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:370,usability,memor,memory,370,"Hi @Axel-Naumann, @Teemperor, . congrats, seriously. Perhaps this is a bit academic but maybe we can improve starting from from this fix:. - If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? - Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:224,deployability,patch,patching,224,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:749,deployability,patch,patch,749,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:646,integrability,buffer,buffers,646,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:441,performance,memor,memory,441,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:595,performance,memor,memory,595,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:224,safety,patch,patching,224,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:332,safety,safe,safe,332,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:361,safety,safe,safe,361,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:448,safety,sanit,sanitiser,448,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:589,safety,valid,valid,589,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:749,safety,patch,patch,749,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:774,safety,review,review,774,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:224,security,patch,patching,224,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:271,security,control,controlled,271,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:448,security,sanit,sanitiser,448,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:749,security,patch,patch,749,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:271,testability,control,controlled,271,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:774,testability,review,review,774,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:441,usability,memor,memory,441,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:595,usability,memor,memory,595,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/848:908,usability,learn,learn,908,"> If I read correctly the code, it means that in the pch we could have had garbage anytime in the past, even without VC. Is this correct? If yes, is it only by chance that everything worked? No, by design. I just screwed up patching the PCH writer; this is a fairly well-controlled piece of clang that I broke. I broke it in a very safe way (because the PCH is safe by design), wasting lots of bytes. > Would we have seen this with valgrind/memory sanitiser if we had given a pass to rootcling generating the pch? If yes, perhaps it makes sense to do it when generating pcms. No. It's all valid memory, we have just been writing and reading long buffers out of which only a few leading bytes were actually needed. Additionally, this broken original patch of mine is pending review with clang, and they would have definitely pinpointed this bug. But we were first! So I don't really think there's anything to learn or improve here. Please move on ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/848
https://github.com/root-project/root/pull/850:174,integrability,sub,subpad,174,"Here is macro demonstrating problem with I/O (even after apply this PR):. #include <ROOT/TCanvas.hxx>. #include <TBufferJSON.h>. #include <TROOT.h>. #include <TFile.h>. void subpad(). {. using namespace ROOT;. auto canvas = Experimental::TCanvas::Create(""v7 TCanvas showing a v6 TGraph"");. . canvas->SetSize(900,700);. . canvas->Divide(2,3);. TFile *f = TFile::Open(""test.root"", ""recreate"");. f->WriteObject(canvas.get(), ""can7"");. delete f;. TBufferJSON::ExportToFile(""can7.json"", canvas.get(), gROOT->GetClass(""ROOT::Experimental::TCanvas""));. }.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/850
https://github.com/root-project/root/pull/850:41,performance,I/O,I/O,41,"Here is macro demonstrating problem with I/O (even after apply this PR):. #include <ROOT/TCanvas.hxx>. #include <TBufferJSON.h>. #include <TROOT.h>. #include <TFile.h>. void subpad(). {. using namespace ROOT;. auto canvas = Experimental::TCanvas::Create(""v7 TCanvas showing a v6 TGraph"");. . canvas->SetSize(900,700);. . canvas->Divide(2,3);. TFile *f = TFile::Open(""test.root"", ""recreate"");. f->WriteObject(canvas.get(), ""can7"");. delete f;. TBufferJSON::ExportToFile(""can7.json"", canvas.get(), gROOT->GetClass(""ROOT::Experimental::TCanvas""));. }.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/850
https://github.com/root-project/root/pull/850:367,safety,test,test,367,"Here is macro demonstrating problem with I/O (even after apply this PR):. #include <ROOT/TCanvas.hxx>. #include <TBufferJSON.h>. #include <TROOT.h>. #include <TFile.h>. void subpad(). {. using namespace ROOT;. auto canvas = Experimental::TCanvas::Create(""v7 TCanvas showing a v6 TGraph"");. . canvas->SetSize(900,700);. . canvas->Divide(2,3);. TFile *f = TFile::Open(""test.root"", ""recreate"");. f->WriteObject(canvas.get(), ""can7"");. delete f;. TBufferJSON::ExportToFile(""can7.json"", canvas.get(), gROOT->GetClass(""ROOT::Experimental::TCanvas""));. }.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/850
https://github.com/root-project/root/pull/850:367,testability,test,test,367,"Here is macro demonstrating problem with I/O (even after apply this PR):. #include <ROOT/TCanvas.hxx>. #include <TBufferJSON.h>. #include <TROOT.h>. #include <TFile.h>. void subpad(). {. using namespace ROOT;. auto canvas = Experimental::TCanvas::Create(""v7 TCanvas showing a v6 TGraph"");. . canvas->SetSize(900,700);. . canvas->Divide(2,3);. TFile *f = TFile::Open(""test.root"", ""recreate"");. f->WriteObject(canvas.get(), ""can7"");. delete f;. TBufferJSON::ExportToFile(""can7.json"", canvas.get(), gROOT->GetClass(""ROOT::Experimental::TCanvas""));. }.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/850
https://github.com/root-project/root/pull/850:218,performance,I/O,I/O,218,"Hi Axel, . I separate TPadUserCoordBase and TPadLinearUserCoord and provide source file for them. With comments in TCanvas.hxx I have no idea how to proceed. If I return member comments before member, I cannot disable I/O for this member. Sergey.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/850
https://github.com/root-project/root/pull/851:11,deployability,build,build,11,@phsft-bot build on ubuntu14/native with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:5,availability,failur,failures,5,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:5,deployability,fail,failures,5,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:34,deployability,build,build,34,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:53,deployability,log,logged,53,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:161,deployability,build,builds,161,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:186,deployability,build,build,186,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:5,performance,failur,failures,5,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:5,reliability,fail,failures,5,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:0,safety,Test,Test,0,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:53,safety,log,logged,53,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:53,security,log,logged,53,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:0,testability,Test,Test,0,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:53,testability,log,logged,53,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/851:176,usability,clear,clear,176,"Test failures were due to a dirty build directory. I logged into the node, ran `cmake .`, and the headers were then found. If the headers are not found in other builds, please clear the build directory of the affected node(s), so that the roottest targets get recreated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/851
https://github.com/root-project/root/pull/852:103,energy efficiency,core,core,103,"It works for me, but do we really need such extra file (.stamp)? And there is side effect - it I touch core/base/LinkDef3.h file,. this causes recompilation of all ROOT dictionaries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:56,deployability,depend,depend,56,"@linev The rebuilding is necessary, as all dictionaries depend on the Core one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:70,energy efficiency,Core,Core,70,"@linev The rebuilding is necessary, as all dictionaries depend on the Core one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:56,integrability,depend,depend,56,"@linev The rebuilding is necessary, as all dictionaries depend on the Core one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:56,modifiability,depend,depend,56,"@linev The rebuilding is necessary, as all dictionaries depend on the Core one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:56,safety,depend,depend,56,"@linev The rebuilding is necessary, as all dictionaries depend on the Core one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:56,testability,depend,depend,56,"@linev The rebuilding is necessary, as all dictionaries depend on the Core one.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:54,deployability,build,build,54,"@linev Do you care if an extra file is created in the build tree? We do create 3 files for each dictionary, this stamp file summarizes them for what concerns dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:158,deployability,depend,dependencies,158,"@linev Do you care if an extra file is created in the build tree? We do create 3 files for each dictionary, this stamp file summarizes them for what concerns dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:158,integrability,depend,dependencies,158,"@linev Do you care if an extra file is created in the build tree? We do create 3 files for each dictionary, this stamp file summarizes them for what concerns dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:149,modifiability,concern,concerns,149,"@linev Do you care if an extra file is created in the build tree? We do create 3 files for each dictionary, this stamp file summarizes them for what concerns dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:158,modifiability,depend,dependencies,158,"@linev Do you care if an extra file is created in the build tree? We do create 3 files for each dictionary, this stamp file summarizes them for what concerns dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:158,safety,depend,dependencies,158,"@linev Do you care if an extra file is created in the build tree? We do create 3 files for each dictionary, this stamp file summarizes them for what concerns dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:149,testability,concern,concerns,149,"@linev Do you care if an extra file is created in the build tree? We do create 3 files for each dictionary, this stamp file summarizes them for what concerns dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:158,testability,depend,dependencies,158,"@linev Do you care if an extra file is created in the build tree? We do create 3 files for each dictionary, this stamp file summarizes them for what concerns dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/852:49,deployability,build,build,49,> Do you care if an extra file is created in the build tree? Not at all - as long as everything works properly. For the moment changes absolutely OK for me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/852
https://github.com/root-project/root/pull/853:40,interoperability,format,format,40,@arthur-tsang can you address the clang-format warnings?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/853
https://github.com/root-project/root/pull/853:113,deployability,automat,automatically,113,"@martinmine Yes, I ran the `git-clang-format` command given by the travis output. How can I commit those changes automatically?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/853
https://github.com/root-project/root/pull/853:38,interoperability,format,format,38,"@martinmine Yes, I ran the `git-clang-format` command given by the travis output. How can I commit those changes automatically?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/853
https://github.com/root-project/root/pull/853:113,testability,automat,automatically,113,"@martinmine Yes, I ran the `git-clang-format` command given by the travis output. How can I commit those changes automatically?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/853
https://github.com/root-project/root/pull/853:46,usability,command,command,46,"@martinmine Yes, I ran the `git-clang-format` command given by the travis output. How can I commit those changes automatically?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/853
https://github.com/root-project/root/pull/853:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/853
https://github.com/root-project/root/pull/855:63,deployability,build,build,63,Those `VecCore not found` bugs should be fixed by clearing the build directory. They are related to my own changes to avoid copying headers to the build directory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/855
https://github.com/root-project/root/pull/855:147,deployability,build,build,147,Those `VecCore not found` bugs should be fixed by clearing the build directory. They are related to my own changes to avoid copying headers to the build directory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/855
https://github.com/root-project/root/pull/855:118,safety,avoid,avoid,118,Those `VecCore not found` bugs should be fixed by clearing the build directory. They are related to my own changes to avoid copying headers to the build directory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/855
https://github.com/root-project/root/pull/855:50,usability,clear,clearing,50,Those `VecCore not found` bugs should be fixed by clearing the build directory. They are related to my own changes to avoid copying headers to the build directory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/855
https://github.com/root-project/root/pull/856:11,deployability,build,build,11,@phsft-bot build with flags -Dvc=ON -Dbuiltin_veccore=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/856
https://github.com/root-project/root/pull/857:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/857
https://github.com/root-project/root/pull/857:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/857
https://github.com/root-project/root/pull/858:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:28,deployability,updat,update,28,"Hi Mammad, . Can you please update your Pull request with the fixes for the formatting (clang-format) and also . ass a tutorial program showing the usage of these 3 features in parallel. Thank you . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:76,interoperability,format,formatting,76,"Hi Mammad, . Can you please update your Pull request with the fixes for the formatting (clang-format) and also . ass a tutorial program showing the usage of these 3 features in parallel. Thank you . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:94,interoperability,format,format,94,"Hi Mammad, . Can you please update your Pull request with the fixes for the formatting (clang-format) and also . ass a tutorial program showing the usage of these 3 features in parallel. Thank you . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:177,performance,parallel,parallel,177,"Hi Mammad, . Can you please update your Pull request with the fixes for the formatting (clang-format) and also . ass a tutorial program showing the usage of these 3 features in parallel. Thank you . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:28,safety,updat,update,28,"Hi Mammad, . Can you please update your Pull request with the fixes for the formatting (clang-format) and also . ass a tutorial program showing the usage of these 3 features in parallel. Thank you . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:28,security,updat,update,28,"Hi Mammad, . Can you please update your Pull request with the fixes for the formatting (clang-format) and also . ass a tutorial program showing the usage of these 3 features in parallel. Thank you . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:45,interoperability,format,format,45,You might want to squash or fixup your clang-format commits.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:39,usability,close,close,39,@lmoneta can you take care of this (or close it),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:120,usability,close,close,120,"@lmoneta @ashlaban all checks pass but there are some comments to be addressed, could you make sure this is followed or close the PR if not needed anymore?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:23,usability,progress,progress,23,@lmoneta @ashlaban any progress on merging this PR since our last chat?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:23,usability,progress,progress,23,@lmoneta @ashlaban any progress on merging this PR since our last chat?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:26,deployability,integr,integrated,26,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:209,deployability,integr,integrate,209,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:310,deployability,updat,update,310,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:26,integrability,integr,integrated,26,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:209,integrability,integr,integrate,209,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:26,interoperability,integr,integrated,26,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:209,interoperability,integr,integrate,209,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:26,modifiability,integr,integrated,26,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:99,modifiability,variab,variable,99,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:209,modifiability,integr,integrate,209,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:26,reliability,integr,integrated,26,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:209,reliability,integr,integrate,209,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:6,safety,valid,validation,6,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:310,safety,updat,update,310,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:6,security,validat,validation,6,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:26,security,integr,integrated,26,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:209,security,integr,integrate,209,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:310,security,updat,update,310,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:26,testability,integr,integrated,26,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:155,testability,plan,plan,155,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:176,testability,understand,understanding,176,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:209,testability,integr,integrate,209,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:251,usability,indicat,indicating,251,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/858:282,usability,close,closed,282,"Cross validation has been integrated through a different PR. Remaining are the Hyper param opt and variable importance. I refer to @lmoneta for the future plan there. It is my understanding however that if we integrate them we do it through new PR’s, indicating that this PR can be closed. I will make sure to update the PR after discussion with Lorenzo during next week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/858
https://github.com/root-project/root/pull/859:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/859
https://github.com/root-project/root/pull/860:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/860
https://github.com/root-project/root/pull/860:50,interoperability,format,format,50,"Sorry, I thought I already took care of the clang-format. I will go and do that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/860
https://github.com/root-project/root/pull/860:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/860
https://github.com/root-project/root/pull/860:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/860
https://github.com/root-project/root/pull/864:37,deployability,build,build,37,Hey Lukas - thanks a lot! @phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:138,performance,I/O,I/O,138,Nice. One caveat though. When running with genreflex the default is to use essentially the modifier + (request for new StreamerInfo based I/O) and there is no way (and should not) to request the old I/O implementation. So it probably does not make sense to advertise the + (which is always a no-op).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:199,performance,I/O,I/O,199,Nice. One caveat though. When running with genreflex the default is to use essentially the modifier + (request for new StreamerInfo based I/O) and there is no way (and should not) to request the old I/O implementation. So it probably does not make sense to advertise the + (which is always a no-op).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:234,reliability,doe,does,234,Nice. One caveat though. When running with genreflex the default is to use essentially the modifier + (request for new StreamerInfo based I/O) and there is no way (and should not) to request the old I/O implementation. So it probably does not make sense to advertise the + (which is always a no-op).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:91,security,modif,modifier,91,Nice. One caveat though. When running with genreflex the default is to use essentially the modifier + (request for new StreamerInfo based I/O) and there is no way (and should not) to request the old I/O implementation. So it probably does not make sense to advertise the + (which is always a no-op).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:74,modifiability,concern,concerns,74,"I agree with philippe. The + could be left aside as the default. For what concerns the name of the field I am not sure ""modifier"" is the best name possible. ""StreamerOption"" ? Two simple fields, which can be ""NoStreamer"" and ""NoInputOperator""? E.g. ```. ... NoStreamer = ""true"" />. ... NoInputOperator = ""true"" />. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:120,security,modif,modifier,120,"I agree with philippe. The + could be left aside as the default. For what concerns the name of the field I am not sure ""modifier"" is the best name possible. ""StreamerOption"" ? Two simple fields, which can be ""NoStreamer"" and ""NoInputOperator""? E.g. ```. ... NoStreamer = ""true"" />. ... NoInputOperator = ""true"" />. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:74,testability,concern,concerns,74,"I agree with philippe. The + could be left aside as the default. For what concerns the name of the field I am not sure ""modifier"" is the best name possible. ""StreamerOption"" ? Two simple fields, which can be ""NoStreamer"" and ""NoInputOperator""? E.g. ```. ... NoStreamer = ""true"" />. ... NoInputOperator = ""true"" />. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:180,testability,simpl,simple,180,"I agree with philippe. The + could be left aside as the default. For what concerns the name of the field I am not sure ""modifier"" is the best name possible. ""StreamerOption"" ? Two simple fields, which can be ""NoStreamer"" and ""NoInputOperator""? E.g. ```. ... NoStreamer = ""true"" />. ... NoInputOperator = ""true"" />. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:180,usability,simpl,simple,180,"I agree with philippe. The + could be left aside as the default. For what concerns the name of the field I am not sure ""modifier"" is the best name possible. ""StreamerOption"" ? Two simple fields, which can be ""NoStreamer"" and ""NoInputOperator""? E.g. ```. ... NoStreamer = ""true"" />. ... NoInputOperator = ""true"" />. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:25,safety,compl,complemented,25,...also the PR should be complemented with a test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:45,safety,test,test,45,...also the PR should be complemented with a test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:25,security,compl,complemented,25,...also the PR should be complemented with a test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:45,testability,test,test,45,...also the PR should be complemented with a test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:87,safety,test,tests,87,Thanks for the feedback Philippe and Danilo! will modify it and send the corresponding tests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:50,security,modif,modify,50,Thanks for the feedback Philippe and Danilo! will modify it and send the corresponding tests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:87,testability,test,tests,87,Thanks for the feedback Philippe and Danilo! will modify it and send the corresponding tests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:15,usability,feedback,feedback,15,Thanks for the feedback Philippe and Danilo! will modify it and send the corresponding tests,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:742,deployability,DEPEND,DEPENDS,742,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:1115,deployability,version,version,1115,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:203,energy efficiency,load,loads,203,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:742,integrability,DEPEND,DEPENDS,742,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:1115,integrability,version,version,1115,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:178,interoperability,xml,xml,178,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:651,interoperability,xml,xml,651,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:869,interoperability,xml,xml,869,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:742,modifiability,DEPEND,DEPENDS,742,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:1115,modifiability,version,version,1115,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:203,performance,load,loads,203,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:969,reliability,doe,does,969,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:73,safety,test,test,73,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:447,safety,test,tests,447,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:479,safety,test,tests,479,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:742,safety,DEPEND,DEPENDS,742,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:73,testability,test,test,73,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:447,testability,test,tests,447,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:479,testability,test,tests,479,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:742,testability,DEPEND,DEPENDS,742,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:1104,testability,simpl,simplified,1104,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:232,usability,custom,custom,232,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:584,usability,custom,customStreamer,584,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:599,usability,custom,customStreamer,599,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:675,usability,custom,customStreamer,675,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:697,usability,custom,customStreamer,697,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:722,usability,custom,customStreamer,722,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:821,usability,custom,customStreamer,821,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:886,usability,custom,customStreamer,886,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:1062,usability,custom,customStreamer,1062,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:1104,usability,simpl,simplified,1104,"Hi @breitwieserCern ,. the functionality now looks good. Could you add a test in roottest about the new functionality? This one should:. - Generate a dictionary with a selection xml. - Have a macro that loads it and checks that the custom streamer works fine. In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:. ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer. MACRO customStreamer.C. OUTREF customStreamer.ref. DEPENDS ${GENERATE_REFLEX_TEST}). ```. This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with. Do not hesitate to contact me privately if you need more info! Cheers,. D.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:14,safety,test,tests,14,Corresponding tests: https://github.com/root-project/roottest/pull/70,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/864:14,testability,test,tests,14,Corresponding tests: https://github.com/root-project/roottest/pull/70,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/864
https://github.com/root-project/root/pull/871:11,deployability,build,build,11,"@phsft-bot build! On Sat, Aug 19, 2017, 16:26 phsft-bot <notifications@github.com> wrote:. > Can one of the admins verify this patch? >. > —. > You are receiving this because you are subscribed to this thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/871#issuecomment-323526282>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yGXJ1vW6gWaXYLrIxsK94TGho_Jks5sZvCDgaJpZM4O8WOF>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:127,deployability,patch,patch,127,"@phsft-bot build! On Sat, Aug 19, 2017, 16:26 phsft-bot <notifications@github.com> wrote:. > Can one of the admins verify this patch? >. > —. > You are receiving this because you are subscribed to this thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/871#issuecomment-323526282>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yGXJ1vW6gWaXYLrIxsK94TGho_Jks5sZvCDgaJpZM4O8WOF>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:183,integrability,sub,subscribed,183,"@phsft-bot build! On Sat, Aug 19, 2017, 16:26 phsft-bot <notifications@github.com> wrote:. > Can one of the admins verify this patch? >. > —. > You are receiving this because you are subscribed to this thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/871#issuecomment-323526282>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yGXJ1vW6gWaXYLrIxsK94TGho_Jks5sZvCDgaJpZM4O8WOF>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:127,safety,patch,patch,127,"@phsft-bot build! On Sat, Aug 19, 2017, 16:26 phsft-bot <notifications@github.com> wrote:. > Can one of the admins verify this patch? >. > —. > You are receiving this because you are subscribed to this thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/871#issuecomment-323526282>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yGXJ1vW6gWaXYLrIxsK94TGho_Jks5sZvCDgaJpZM4O8WOF>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:127,security,patch,patch,127,"@phsft-bot build! On Sat, Aug 19, 2017, 16:26 phsft-bot <notifications@github.com> wrote:. > Can one of the admins verify this patch? >. > —. > You are receiving this because you are subscribed to this thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/871#issuecomment-323526282>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yGXJ1vW6gWaXYLrIxsK94TGho_Jks5sZvCDgaJpZM4O8WOF>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:406,security,auth,auth,406,"@phsft-bot build! On Sat, Aug 19, 2017, 16:26 phsft-bot <notifications@github.com> wrote:. > Can one of the admins verify this patch? >. > —. > You are receiving this because you are subscribed to this thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/871#issuecomment-323526282>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yGXJ1vW6gWaXYLrIxsK94TGho_Jks5sZvCDgaJpZM4O8WOF>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:115,testability,verif,verify,115,"@phsft-bot build! On Sat, Aug 19, 2017, 16:26 phsft-bot <notifications@github.com> wrote:. > Can one of the admins verify this patch? >. > —. > You are receiving this because you are subscribed to this thread. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/pull/871#issuecomment-323526282>,. > or mute the thread. > <https://github.com/notifications/unsubscribe-auth/AA074yGXJ1vW6gWaXYLrIxsK94TGho_Jks5sZvCDgaJpZM4O8WOF>. > . >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:11,deployability,build,build,11,@phsft-bot build with flags -Dimt=OFF -Dbuiltin_tbb=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/871:11,deployability,build,build,11,@phsft-bot build with flags -Dimt=OFF -Dbuiltin_tbb=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/871
https://github.com/root-project/root/pull/872:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/872
https://github.com/root-project/root/pull/872:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/872
https://github.com/root-project/root/pull/875:7,interoperability,format,format,7,`clang-format` should be fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/875
https://github.com/root-project/root/pull/876:11,deployability,build,build,11,@phsft-bot build with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/876
https://github.com/root-project/root/pull/876:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags `-Dcxxmodules=ON`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/876
https://github.com/root-project/root/pull/876:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/876
https://github.com/root-project/root/pull/876:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/876
https://github.com/root-project/root/pull/876:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/876
https://github.com/root-project/root/pull/876:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/876
https://github.com/root-project/root/pull/876:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/876
https://github.com/root-project/root/pull/877:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/877
https://github.com/root-project/root/pull/877:10,availability,failur,failures,10,"LGTM, the failures are probably due to clang/gcc ABI bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/877
https://github.com/root-project/root/pull/877:10,deployability,fail,failures,10,"LGTM, the failures are probably due to clang/gcc ABI bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/877
https://github.com/root-project/root/pull/877:10,performance,failur,failures,10,"LGTM, the failures are probably due to clang/gcc ABI bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/877
https://github.com/root-project/root/pull/877:10,reliability,fail,failures,10,"LGTM, the failures are probably due to clang/gcc ABI bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/877
https://github.com/root-project/root/pull/878:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON -Dccache=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:97,deployability,modul,module,97,"Historically, we had this to disambiguate between pcm files generated by rootcling and 'regular' module files (i.e. if somebody unwisely forwarded the compiler's module cache there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:162,deployability,modul,module,162,"Historically, we had this to disambiguate between pcm files generated by rootcling and 'regular' module files (i.e. if somebody unwisely forwarded the compiler's module cache there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:97,modifiability,modul,module,97,"Historically, we had this to disambiguate between pcm files generated by rootcling and 'regular' module files (i.e. if somebody unwisely forwarded the compiler's module cache there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:162,modifiability,modul,module,162,"Historically, we had this to disambiguate between pcm files generated by rootcling and 'regular' module files (i.e. if somebody unwisely forwarded the compiler's module cache there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:169,performance,cach,cache,169,"Historically, we had this to disambiguate between pcm files generated by rootcling and 'regular' module files (i.e. if somebody unwisely forwarded the compiler's module cache there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:97,safety,modul,module,97,"Historically, we had this to disambiguate between pcm files generated by rootcling and 'regular' module files (i.e. if somebody unwisely forwarded the compiler's module cache there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:162,safety,modul,module,162,"Historically, we had this to disambiguate between pcm files generated by rootcling and 'regular' module files (i.e. if somebody unwisely forwarded the compiler's module cache there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:190,availability,error,error,190,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:34,deployability,modul,modulemap,34,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:48,deployability,build,building,48,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:223,deployability,version,version,223,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:261,energy efficiency,load,loading,261,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:223,integrability,version,version,223,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:34,modifiability,modul,modulemap,34,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:223,modifiability,version,version,223,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:190,performance,error,error,190,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:261,performance,load,loading,261,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:34,safety,modul,modulemap,34,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:190,safety,error,error,190,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:190,usability,error,error,190,"@vgvassilev well, we use the same modulemap for building/runtime at the moment, so the names would be anyway equal :) Also if you try to trick root by placing other PCMs there you'll get an error because we check the clang version that generated the PCM before loading it, so you would have to do some serious work to get around this check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:19,availability,failur,failures,19,"LGTM, I assume the failures are due to the infamous clang/gcc ABI bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:19,deployability,fail,failures,19,"LGTM, I assume the failures are due to the infamous clang/gcc ABI bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:19,performance,failur,failures,19,"LGTM, I assume the failures are due to the infamous clang/gcc ABI bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/878:19,reliability,fail,failures,19,"LGTM, I assume the failures are due to the infamous clang/gcc ABI bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/878
https://github.com/root-project/root/pull/879:11,deployability,build,build,11,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/879
https://github.com/root-project/root/pull/879:85,deployability,build,build,85,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/879
https://github.com/root-project/root/pull/879:112,deployability,modul,modules,112,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/879
https://github.com/root-project/root/pull/879:112,modifiability,modul,modules,112,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/879
https://github.com/root-project/root/pull/879:104,safety,test,testing,104,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/879
https://github.com/root-project/root/pull/879:112,safety,modul,modules,112,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/879
https://github.com/root-project/root/pull/879:104,testability,test,testing,104,"@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=ON. Normal jenkins build passed, just testing modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/879
https://github.com/root-project/root/pull/880:99,safety,test,tested,99,"Yes, please do cross-check. Someone with an active development area should try it first. It can be tested with the script attached to the JIRA ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/880
https://github.com/root-project/root/pull/880:99,testability,test,tested,99,"Yes, please do cross-check. Someone with an active development area should try it first. It can be tested with the script attached to the JIRA ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/880
https://github.com/root-project/root/pull/880:11,deployability,build,build,11,@phsft-bot build please.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/880
https://github.com/root-project/root/pull/881:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/881
https://github.com/root-project/root/pull/884:27,interoperability,format,formatting,27,"Bertrand,. can we postpone formatting for later. It is pure prototype and will be changed many times",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/884:95,performance,time,times,95,"Bertrand,. can we postpone formatting for later. It is pure prototype and will be changed many times",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/884:60,usability,prototyp,prototype,60,"Bertrand,. can we postpone formatting for later. It is pure prototype and will be changed many times",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/884:31,interoperability,xml,xml,31,"OI, then fine with me, but the xml files should be corrected for the next PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/884:106,integrability,sub,submit,106,"> OI, then fine with me, but the xml files should be corrected for the next PR. Bertrand, you are free to submit required changes to jsroot repository. Here is just copy of dev branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/884:140,integrability,repositor,repository,140,"> OI, then fine with me, but the xml files should be corrected for the next PR. Bertrand, you are free to submit required changes to jsroot repository. Here is just copy of dev branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/884:33,interoperability,xml,xml,33,"> OI, then fine with me, but the xml files should be corrected for the next PR. Bertrand, you are free to submit required changes to jsroot repository. Here is just copy of dev branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/884:140,interoperability,repositor,repository,140,"> OI, then fine with me, but the xml files should be corrected for the next PR. Bertrand, you are free to submit required changes to jsroot repository. Here is just copy of dev branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/884:113,modifiability,required chang,required changes,113,"> OI, then fine with me, but the xml files should be corrected for the next PR. Bertrand, you are free to submit required changes to jsroot repository. Here is just copy of dev branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/884
https://github.com/root-project/root/pull/885:26,energy efficiency,cool,cool,26,"This code owners thing is cool, but I wonder if Axel wants to review TDF stuff?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/885
https://github.com/root-project/root/pull/885:62,safety,review,review,62,"This code owners thing is cool, but I wonder if Axel wants to review TDF stuff?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/885
https://github.com/root-project/root/pull/885:62,testability,review,review,62,"This code owners thing is cool, but I wonder if Axel wants to review TDF stuff?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/885
https://github.com/root-project/root/pull/887:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON -Dvc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/887
https://github.com/root-project/root/pull/887:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_vc=ON -Dbuiltin_veccore=ON -Dvc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/887
https://github.com/root-project/root/pull/889:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/889
https://github.com/root-project/root/pull/889:19,interoperability,conflict,conflicts,19,Rebased to resolve conflicts,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/889
https://github.com/root-project/root/pull/889:43,safety,test,test,43,"Wow, that's weird. I don't see how is that test related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/889
https://github.com/root-project/root/pull/889:43,testability,test,test,43,"Wow, that's weird. I don't see how is that test related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/889
https://github.com/root-project/root/pull/890:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_veccore=ON -Dvc=ON -Dbuiltin_vc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/890
https://github.com/root-project/root/pull/890:11,deployability,build,build,11,@phsft-bot build with flags -Dbuiltin_veccore=ON -Dvc=ON -Dbuiltin_vc=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/890
https://github.com/root-project/root/pull/891:11,deployability,build,build,11,@phsft-bot build with flags -Dfortran=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:653,deployability,depend,dependencies,653,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:889,deployability,log,logic,889,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:843,energy efficiency,current,currently,843,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:653,integrability,depend,dependencies,653,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:321,modifiability,variab,variables,321,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:653,modifiability,depend,dependencies,653,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:288,reliability,doe,does,288,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:834,reliability,doe,does,834,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:653,safety,depend,dependencies,653,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:889,safety,log,logic,889,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:889,security,log,logic,889,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:653,testability,depend,dependencies,653,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:673,testability,simpl,simplest,673,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:889,testability,log,logic,889,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:5,usability,document,documentation,5,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:44,usability,help,help,44,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:56,usability,command,command,56,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:185,usability,command,command,185,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:201,usability,support,support,201,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:276,usability,command,command,276,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:365,usability,command,command,365,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:422,usability,command,command,422,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:673,usability,simpl,simplest,673,"The [documentation](https://cmake.org/cmake/help/latest/command/enable_language.html) says:. > Enable a language (CXX/C/Fortran/etc). >. >**enable_language(<lang> [OPTIONAL] )**. >This command enables support for the named language in CMake. This is the same as the. >project command but does not create any of the extra variables that are created by the. >project command. Example languages are CXX, C, Fortran. >. >This command must be called in file scope, not in a function call. Furthermore, **it must. >be called in the highest directory common to all targets using the named language**. >directly for compiling sources or indirectly through link dependencies. It is simplest to. >enable all needed languages in the top-level directory of a project. >. >The **OPTIONAL** keyword is a placeholder for future implementation and **does not currently work**. So, should we just add this logic directly into the top `CMakeLists.txt` file?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:30,deployability,log,logic,30,"> So, should we just add this logic directly into the top `CMakeLists.txt` file? You don't have to. `CheckCompiler.cmake` is `include`d from the main `CMakeLists.txt`, which means that both files have the same scope ([Cmake doc](https://cmake.org/cmake/help/v3.0/command/include.html)). I think the. > it must be called in the highest directory [...]. refers to directories added with `add_subdirectory` which would open a new scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:30,safety,log,logic,30,"> So, should we just add this logic directly into the top `CMakeLists.txt` file? You don't have to. `CheckCompiler.cmake` is `include`d from the main `CMakeLists.txt`, which means that both files have the same scope ([Cmake doc](https://cmake.org/cmake/help/v3.0/command/include.html)). I think the. > it must be called in the highest directory [...]. refers to directories added with `add_subdirectory` which would open a new scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:30,security,log,logic,30,"> So, should we just add this logic directly into the top `CMakeLists.txt` file? You don't have to. `CheckCompiler.cmake` is `include`d from the main `CMakeLists.txt`, which means that both files have the same scope ([Cmake doc](https://cmake.org/cmake/help/v3.0/command/include.html)). I think the. > it must be called in the highest directory [...]. refers to directories added with `add_subdirectory` which would open a new scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:30,testability,log,logic,30,"> So, should we just add this logic directly into the top `CMakeLists.txt` file? You don't have to. `CheckCompiler.cmake` is `include`d from the main `CMakeLists.txt`, which means that both files have the same scope ([Cmake doc](https://cmake.org/cmake/help/v3.0/command/include.html)). I think the. > it must be called in the highest directory [...]. refers to directories added with `add_subdirectory` which would open a new scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:253,usability,help,help,253,"> So, should we just add this logic directly into the top `CMakeLists.txt` file? You don't have to. `CheckCompiler.cmake` is `include`d from the main `CMakeLists.txt`, which means that both files have the same scope ([Cmake doc](https://cmake.org/cmake/help/v3.0/command/include.html)). I think the. > it must be called in the highest directory [...]. refers to directories added with `add_subdirectory` which would open a new scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:263,usability,command,command,263,"> So, should we just add this logic directly into the top `CMakeLists.txt` file? You don't have to. `CheckCompiler.cmake` is `include`d from the main `CMakeLists.txt`, which means that both files have the same scope ([Cmake doc](https://cmake.org/cmake/help/v3.0/command/include.html)). I think the. > it must be called in the highest directory [...]. refers to directories added with `add_subdirectory` which would open a new scope.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:24,reliability,doe,does,24,"Nevermind, Ninja itself does not support Fortran with CMake for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:33,usability,support,support,33,"Nevermind, Ninja itself does not support Fortran with CMake for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:11,deployability,build,build,11,@phsft-bot build with flags -Dfortran=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:30,deployability,patch,patch,30,"Merged, thanks! I applied the patch locally, so GitHub's interface got confused. Closing this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:57,integrability,interfac,interface,57,"Merged, thanks! I applied the patch locally, so GitHub's interface got confused. Closing this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:57,interoperability,interfac,interface,57,"Merged, thanks! I applied the patch locally, so GitHub's interface got confused. Closing this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:57,modifiability,interfac,interface,57,"Merged, thanks! I applied the patch locally, so GitHub's interface got confused. Closing this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:30,safety,patch,patch,30,"Merged, thanks! I applied the patch locally, so GitHub's interface got confused. Closing this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
https://github.com/root-project/root/pull/891:30,security,patch,patch,30,"Merged, thanks! I applied the patch locally, so GitHub's interface got confused. Closing this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/891
